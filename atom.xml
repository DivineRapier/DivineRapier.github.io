<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>お可愛いこと</title>
  
  
  <link href="http://divinerapier.github.io/atom.xml" rel="self"/>
  
  <link href="http://divinerapier.github.io/"/>
  <updated>2021-03-05T05:37:05.902Z</updated>
  <id>http://divinerapier.github.io/</id>
  
  <author>
    <name>divinerapier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未设置 shm 导致 PyTorch 任务失败</title>
    <link href="http://divinerapier.github.io/2021/03/05/pytorch-fails-without-shm/"/>
    <id>http://divinerapier.github.io/2021/03/05/pytorch-fails-without-shm/</id>
    <published>2021-03-05T02:01:27.000Z</published>
    <updated>2021-03-05T05:37:05.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近，配合研发同学将原来在老集群上直接用 <code>docker</code> 运行的 <code>pytorch</code> 算法迁移到使用 <code>k8s</code> 的新集群上运行。结果，很不幸，研发同学说无法运行。错误日志如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-Traceback (most recent call last):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/runpy.py"</span>, line 193, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-<span class="string">"__main__"</span>, mod_spec)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/runpy.py"</span>, line 85, <span class="keyword">in</span> _run_code</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-exec(code, run_globals)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/egs/chn_40h/extend_code/launch.py"</span>, line 29, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-main()</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/launch.py"</span>, line 10, <span class="keyword">in</span> main</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-launch(args)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/cli/launch.py"</span>, line 148, <span class="keyword">in</span> launch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-trainer.train_on(data)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 77, <span class="keyword">in</span> train_on</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-self.train_epoch(data[<span class="string">'tr'</span>])</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 41, <span class="keyword">in</span> train_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-return self._one_epoch(data_queue, is_training=True)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 63, <span class="keyword">in</span> _one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-return self.one_epoch(data_queue, is_training)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/naive_trainer.py"</span>, line 115, <span class="keyword">in</span> one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-for batch_idx, batch <span class="keyword">in</span> enumerate(self.timer[<span class="string">'io'</span>].profile(data_queue)):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/common.py"</span>, line 102, <span class="keyword">in</span> profile</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-value = next(iterator)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"&lt;string&gt;"</span>, line 2, <span class="keyword">in</span> get</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/multiprocessing/managers.py"</span>, line 834, <span class="keyword">in</span> _callmethod</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-raise convert_to_error(kind, result)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-_queue</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-.</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-Empty</span><br><span class="line">11:12:55[asr.utils.bootstrap]-WARNING-Version 0.3.1.dev28</span><br></pre></td></tr></table></figure><p>看到这个错误，就挺迷茫的。</p><p>根据错误信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/naive_trainer.py"</span>, line 115, <span class="keyword">in</span> one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-for batch_idx, batch <span class="keyword">in</span> enumerate(self.timer[<span class="string">'io'</span>].profile(data_queue)):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/common.py"</span>, line 102, <span class="keyword">in</span> profile</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-value = next(iterator)</span><br></pre></td></tr></table></figure><p>推断是读数据的时候出现了问题。虽然看起来与 <code>GPU</code> 没有关系，但是，为了保险起见，依然对比了前后环境的 <code>NVIDIA Driver</code>，<code>CUDA</code> 等版本信息，结果是一致的。而且，<code>NCCL</code> 是在镜像中安装的，不太可能有问题。</p><p>之后，尝试在容器中安装 <code>perf</code>，但是失败了，尝试在容器中使用 <code>strace</code>，提示没有权限。</p><p>正在我继续死磕的时候，研发提供了另一段错误日志:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytorch-956sg:9319:9379 [0] include/shm.h:48 NCCL WARN Error <span class="keyword">while</span> creating shared memory segment nccl-shm-recv-183375136c5888b6-0-2-3 (size 9637888)</span><br></pre></td></tr></table></figure><p>这个错误就很有价值啊，创建共享内存失败。</p><p>此前，反复与研发同学确认过，是否只依赖于外部的 <code>NVIDIA Driver</code> 与 <code>CUDA</code>，得到了肯定的答复。因此，就一直以此为前提进行排查。但现在我产生了怀疑，问研发要来启动命令，隐藏敏感数据后如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit /data:/data --name asr --ipc=host image:latest /bin/bash</span><br></pre></td></tr></table></figure><p>果然就发现了隐藏信息: <strong>–ipc=host</strong> 。</p><p>因此，修改在原有创建任务的 <code>yaml</code> 文件中增加 <code>volume</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">asr</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image:latest</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/dev/shm</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">shm</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shm</span></span><br><span class="line">      <span class="attr">emptyDir:</span></span><br><span class="line">         <span class="attr">medium:</span> <span class="string">Memory</span></span><br></pre></td></tr></table></figure><p>在容器内，挂载一个 <code>tmpfs</code> 到 <code>/dev/shm</code>。成功解决上述两个问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>虽然成功解决了两个问题，但是对于第一个问题还是感到迷惑。虽然，根据答案反推原因，可以查到 <code>DataLoader</code> 在工作的时候会依赖于 <code>shm</code>。但是，查到的错误却不同于第一份错误日志。</p></li><li><p>这次是运气好，遇到了第二个错误明显的提示。否则，可能就需要继续跟 <code>perf</code>，<code>strace</code> 作斗争了，甚至于调试 <code>coredump</code>。</p></li><li><p>在遇到错误二之前，已经决定自己在新集群上使用 <code>docker</code> 运行看看了，其实，这样的话也能发现被隐藏的 <code>--ipc=host</code>。</p></li><li><p>最终要的一点，不要轻易相信他人给定的条件。即使对方不是有意隐瞒，也可能会由于遗忘，或本来就不清楚等各种原因，导致丢失已知条件。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近，配合研发同学将原来在老集群上直接用 &lt;code&gt;docker&lt;/code&gt; 运行的 &lt;code&gt;pytorch&lt;/code&gt; 算法迁移到使用 &lt;code&gt;k8s&lt;/code&gt; 的新集群上运行。结果，很不幸，研发同学说无法运行。错误日志如下:&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://divinerapier.github.io/tags/docker/"/>
    
    <category term="k8s" scheme="http://divinerapier.github.io/tags/k8s/"/>
    
    <category term="pytorch" scheme="http://divinerapier.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>开闭原则</title>
    <link href="http://divinerapier.github.io/2021/02/08/programming-open-closed-principle/"/>
    <id>http://divinerapier.github.io/2021/02/08/programming-open-closed-principle/</id>
    <published>2021-02-08T06:17:10.000Z</published>
    <updated>2021-03-06T08:34:09.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是开闭原则"><a href="#什么是开闭原则" class="headerlink" title="什么是开闭原则"></a>什么是开闭原则</h2><p><strong>需求变化</strong> 是让开发者最为头痛的问题之一。通常在新增一个功能的时候，都会伴随着修改原有的代码。因此，理想情况是在新增功能时尽可能减少对已有代码的改动，避免因改动代码引入新的问题。</p><p>由此产生了一个编码设计原则: 开闭原则 (Open Close Principle)。</p><blockquote><p>Software entities like classes, modules and functions should be <strong>open for extension</strong> but <strong>closed for modifications</strong>.</p></blockquote><h2 id="举个栗子-——-用户注册模块"><a href="#举个栗子-——-用户注册模块" class="headerlink" title="举个栗子 —— 用户注册模块"></a>举个栗子 —— 用户注册模块</h2><h3 id="原始需求"><a href="#原始需求" class="headerlink" title="原始需求"></a>原始需求</h3><p>业务初期，只允许使用邮箱注册，因此，需要实现向邮箱发送验证码的功能。</p><p>定义邮箱发送类，用于发送验证码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *EmailMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义服务类，调用邮箱发送类发送消息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  emailSender *EmailMessageSender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">()</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">    emailSender: &amp;EmailMessageSender&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MessageService)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  s.emailSender.SendVerificationCode(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  service := NewMessageService()</span><br><span class="line">  service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加需求"><a href="#增加需求" class="headerlink" title="增加需求"></a>增加需求</h3><p>后来业务要求，允许使用手机号注册，通过短信的方式接受验证码。</p><p>因此，增加发送短信类:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ShortMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ShortMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，需要修改 <code>MessageService</code> 类:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  emailSender        *EmailMessageSender</span><br><span class="line">  shortMessageSender *ShortMessageSender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要通过某种方式制定使用哪种途径发送消息，例如增加一个表示类型的参数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageSender <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  MessageSenderEmail        MessageSender = <span class="literal">iota</span></span><br><span class="line">  MessageSenderShortMessage</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">(typ MessageSender)</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> typ &#123;</span><br><span class="line">    <span class="keyword">case</span> MessageSenderEmail:</span><br><span class="line">      <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">        emailSender: &amp;EmailMessageSender&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> MessageSenderShortMessage:</span><br><span class="line">      <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">        shortMessageSender: &amp;ShortMessageSender&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"unknown sender type: %s"</span>, typ))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MessageService)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> s.emailSender != <span class="literal">nil</span> &#123;</span><br><span class="line">    s.emailSender.SendVerificationCode(code)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> s.shortMessageSender != <span class="literal">nil</span> &#123;</span><br><span class="line">    s.shortMessageSender.SendVerificationCode(code)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(MessageSenderEmail)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(MessageSenderShortMessage)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上面的实现方式违背了 <code>OCP</code>: 在增加新类型 <code>ShortMessageSender</code> 的同时，为了能使用这个类，需要同时修改函数 <code>NewMessageService</code> 与函数 <code>MessageService::SendVerificationCode</code>，手动确定使用哪种方式发送消息。</p><p>并且可以确定以后每增加一种发送消息的类型，都需要同时修改这两个函数。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>首先，可以观察到，无论是通过类型 <code>EmailMessageSender</code> 发送消息，亦或是通过类型 <code>ShortMessageSender</code> 发送消息，二者对于 <code>MessageService</code> 都只是发送消息的一种实现方式，而 <code>MessageService</code> 并不关心具体使用的方式是什么。由此可以考虑将这个功能抽象为一个接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Sender <span class="keyword">interface</span> &#123;</span><br><span class="line">  SendVerificationCode(code <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MessageService</code> 只需要持有这个接口即可:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  sender Sender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">(sender Sender)</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">    sender: sender,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s *MessageService) SendVerificationCode(code <span class="keyword">string</span>) &#123;</span><br><span class="line">  s.sender.SendVerificationCode(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是水到渠成的事情，让 <code>EmailMessageSender</code> 与 <code>ShortMessageSender</code> 分别实现接口 <code>Sender</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *EmailMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShortMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ShortMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(&amp;EmailMessageSender&#123;&#125;)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(&amp;ShortMessageSender&#123;&#125;)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式，若要增加新的发送方式，只需要增加对应的类型，并使其实现接口 <code>Sender</code> 即可，而无需修改除 <code>main</code> 以外的其他函数。达到 <strong>open for extension</strong> but <strong>closed for modifications</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>开闭原则</strong> 的目标是指导如何 <strong>提高代码可扩展性</strong>，因此是众多设计模式主要遵从的设计原则。</p><p>熟练使用这项原则，需要开发者具备扩展意识、抽象意识、封装意识等。在写代码之前，要认真思考，未来的需求可能会改变哪里。将可能的变化进行抽象，对外提供不变的接口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是开闭原则&quot;&gt;&lt;a href=&quot;#什么是开闭原则&quot; class=&quot;headerlink&quot; title=&quot;什么是开闭原则&quot;&gt;&lt;/a&gt;什么是开闭原则&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;需求变化&lt;/strong&gt; 是让开发者最为头痛的问题之一。通常在新增一个功能的时候，</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>单一职责原则</title>
    <link href="http://divinerapier.github.io/2021/02/08/programming-single-responsibility-principle/"/>
    <id>http://divinerapier.github.io/2021/02/08/programming-single-responsibility-principle/</id>
    <published>2021-02-08T02:06:13.000Z</published>
    <updated>2021-03-06T06:57:08.027Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A class or module should have a single responsibility.</p></blockquote><p>单一职责原则要求，一个类或模块只应该有唯一的职责。</p><p>首先来明确概念，职责可以被看做一个类或者模块被修改的原因。那么，由这个概念可以得出，当一个类或者模块被修改的原因有两个或以上时，应该考虑将这些功能拆分到多个类或者模块中，从而使每一个类或者模块被修改的原因只有一个。</p><p>那么，问题来了: 什么叫做单一职责，或者说，以类为例，如何判断一个类的职责是否单一？这个原则在字面上是非常简单的，但实际上却又非常主观。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>大多数业务中都会涉及到用户信息，例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID                <span class="keyword">int64</span></span><br><span class="line">    Name              <span class="keyword">string</span></span><br><span class="line">    Email             <span class="keyword">string</span></span><br><span class="line">    Telephone         <span class="keyword">string</span></span><br><span class="line">    CreateTime        time.Time</span><br><span class="line">    LastLoginTime     time.Time</span><br><span class="line">    AvatarURL         <span class="keyword">string</span></span><br><span class="line">    ProvinceOfAddress Province</span><br><span class="line">    CityOfAddress     City</span><br><span class="line">    RegionOfAddress   Region</span><br><span class="line">    DetailedAddress   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大部分的开发者会使用如上扁平化的数据结构，事实上也不会有什么问题。但本着从学术的角度出发，来审视一下 <code>UserInfo</code> 中的职责有哪些:</p><ul><li>调用接口时，作为唯一标志<ul><li><code>ID</code></li></ul></li><li>展示作用<ul><li><code>Name</code></li><li><code>CreateTime</code></li><li><code>LastLoginTime</code></li><li><code>AvatarURL</code></li></ul></li><li>认证作用<ul><li><code>Email</code></li><li><code>Telephone</code></li></ul></li><li>地址信息<ul><li><code>ProvinceOfAddress</code></li><li><code>CityOfAddress</code></li><li><code>RegionOfAddress</code></li><li><code>DetailedAddress</code></li></ul></li></ul><p>结果分析下来，竟然包含了四种职责。并且，这四种职责基本上是相互独立的，即任何一种职责的信息发生变化，基本不会影响其他职责的功能。</p><p>同时，思考如下几个问题:</p><ol><li>用户登录的时候，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含认证相关字段的类型 <code>Credential</code> 呢</li><li>展示用户信息的时候，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含展示信息字段的类型 <code>UserDisplayInfo</code> 呢</li><li>在处理订单收货地址是，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含地址相关字段的类型 <code>Address</code> 呢</li><li>在计算发货地与收货地距离时，也要使用 <code>UserInfo</code> 类型处理吗</li></ol><p>如此看来，应该将 <code>UserInfo</code> 修改为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Credential <span class="keyword">struct</span> &#123;</span><br><span class="line">    Email             <span class="keyword">string</span></span><br><span class="line">    Telephone         <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserDisplayInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name              <span class="keyword">string</span></span><br><span class="line">    CreateTime        time.Time</span><br><span class="line">    LastLoginTime     time.Time</span><br><span class="line">    AvatarURL         <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    ProvinceOfAddress Province</span><br><span class="line">    CityOfAddress     City</span><br><span class="line">    RegionOfAddress   Region</span><br><span class="line">    DetailedAddress   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID              <span class="keyword">int64</span></span><br><span class="line">    Credential      Credential</span><br><span class="line">    UserDisplayInfo UserDisplayInfo</span><br><span class="line">    Address         Address</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，还有可能你开发的产品没有订单功能，这时候还有必要有 <code>Address</code> 类吗？</p><p>因此，开篇才会说，这是一个主观的设计原则。职责是否单一还应该取决于实际的业务场景。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.oodesign.com/single-responsibility-principle.html" target="_blank" rel="noopener">OODesign: single responsibility principle</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;A class or module should have a single responsibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则要求，一个类或模块只应该有唯一的职责。&lt;/p&gt;
&lt;p&gt;首先来明确概念，职责可以被看做</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>针对接口编程</title>
    <link href="http://divinerapier.github.io/2021/02/06/programming-program-to-an-interface/"/>
    <id>http://divinerapier.github.io/2021/02/06/programming-program-to-an-interface/</id>
    <published>2021-02-06T08:22:31.000Z</published>
    <updated>2021-03-06T06:57:22.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Program to an interface, not an implementation.</p></blockquote><p>针对接口，而非实现编程 —— 出自 GoF《设计模式: 可复用面向对象软件基础》。<strong>接口</strong> 表示一组 <strong>协议</strong> 或 <strong>约定</strong>，是一组功能的集合。</p><p>接口在不同的语言中，有不同的称呼:</p><ul><li><strong>rust</strong> 中的 <strong>trait</strong></li><li><strong>go</strong> 中的 <strong>interface</strong></li><li><strong>swift</strong> 中的 <strong>protocol</strong></li><li><strong>java</strong> 中的 <strong>interface</strong></li></ul><p>但无论他们的名字是否相同，其作用都是表达一组 <strong>抽象的功能集合</strong>。</p><p>以上字面意思很好理解，下面来详细说明。</p><h2 id="为什么要针对接口编程"><a href="#为什么要针对接口编程" class="headerlink" title="为什么要针对接口编程"></a>为什么要针对接口编程</h2><p>初级开发者在实现某一具体需求时，其思考的关注点在于需求本身，分析实现这个需求要经过哪些步骤，每个步骤又要做那些事情，以此类推。在经过逐层分析，想明白流程之后，这名开发者就会把解决步骤转化为代码。</p><p>如果只看这个需求，这名开发者完成并交付了这个功能。但是，当需求发生变动时，需要修改功能，或增加功能时，由于上面的实现方式是面向过程的，步骤与步骤之间互相暴露实现的细节。因此，当修改了某一个步骤的代码时，就非常可能需要同步修改前后相邻步骤的代码，最坏的情况可能要修改全部的代码。结果就是不小的开发工作量与测试工作量。</p><p>如果开发者使用针对接口编程的方式，封装不稳定的实现细节，暴露稳定的接口。当需求发生变化时，只需要修改相关的接口实现，而因为接口不变，所以无需改动其他代码。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>产品给你分配了一个任务: 有一批保存在 <code>aws s3</code> 上的数据，需要你将它们同步到 <code>aliyun oss</code> 上。</p><h3 id="针对实现编程"><a href="#针对实现编程" class="headerlink" title="针对实现编程"></a>针对实现编程</h3><p>如果是使用针对实现编程方式，那么在收到这个需求之后，应该就会思考: 把 <code>aws s3</code> 的数据同步到 <code>aliyun oss</code> 上，步骤差不多是:</p><ol><li>想办法把数据从 <code>aws s3</code> 上下载到磁盘或者内存</li><li>把磁盘或者内存中的数据上传到 <code>aliyun oss</code></li></ol><p>想到这里，感觉差不多可以写代码了:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AwsS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">type</span> AliyunOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) Sync(oss *AliyunOSS, names []<span class="keyword">string</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> _, name := ranges names &#123;</span><br><span class="line">    data := s3.Download(name)</span><br><span class="line">    oss.Upload(name, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试确认无误后，发布上线，成功运行了几个月没出现 Bug。</p><h4 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h4><p>后来呢，产品要求你有的数据要同步到 <code>aliyun oss</code>，有一些要同步到 <code>ceph s3</code> 上。你一看，这个需求简单啊，我会。然后，你把上面的代码复制了一份，稍加改动:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CephS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Meta <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name     <span class="keyword">string</span></span><br><span class="line">  ToOss    <span class="keyword">bool</span></span><br><span class="line">  ToCephS3 <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) syncToOss(oss *AliyunOSS, name <span class="keyword">string</span>) &#123;</span><br><span class="line">  data := s3.Download(name)</span><br><span class="line">  oss.Upload(name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) syncToCephS3(cephs3 *CephS3, name <span class="keyword">string</span>) &#123;</span><br><span class="line">  data := s3.Download(name)</span><br><span class="line">  cephs3.Upload(name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) Sync(oss *AliyunOSS, cephs3 *CephS3, metas *Meta) &#123;</span><br><span class="line">  <span class="keyword">for</span> _, meta := ranges metas &#123;</span><br><span class="line">    data := s3.Download(meta.Name)</span><br><span class="line">    <span class="keyword">if</span> meta.ToOss &#123;</span><br><span class="line">      s3.syncToOss(oss, meta.Name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> meta.ToCephS3 &#123;</span><br><span class="line">      s3.syncToCephS3(cephs3, meta.Name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不到一天的时间就完成了开发、测试，第二天就上线了。</p><h3 id="针对接口编程"><a href="#针对接口编程" class="headerlink" title="针对接口编程"></a>针对接口编程</h3><p>实现将数据从 <code>aws s3</code> 同步到 <code>aliyun oss</code> 上，可以提取到的信息包括 <code>aws s3</code>、<code>aliyun oss</code> 两种存储系统，同步是要实现的操作。</p><p>由此引发思考，同步是一种动作，未来发生变化的可能性不大，或许有增加其他的动作可能，比如对比两个存储系统的内容，但这应该算作扩展需求，暂时无需考虑；但是存储系统就不好说了，现在是这样的要求，未来可能就会要求同步到 <code>minio</code> 上，或者同步到另一个 <code>aws s3</code> 上。</p><p>至此，可以考虑将存储系统抽象为一组接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Storage <span class="keyword">interface</span> &#123;</span><br><span class="line">  Upload(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span><br><span class="line">  Download(name <span class="keyword">string</span>) []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来思考，现在是要求从 <code>aws s3</code> 同步到 <code>aliyun oss</code> 上，既然上面已经认为未来有很大概率需要同步其他存储系统，由此提出问题: 如何确定同步的目标系统？先大胆猜测:</p><ol><li>一个服务只负责一种特定源到特定目标的同步任务</li><li>在创建同步任务时指定，即在请求参数中，适用于本次任务的所有数据</li><li>根据某种策略，或者是算法，确定每一个文件的源与目的分别是哪里</li></ol><p>那么接下来逐条分析:</p><ul><li>方法一，极其不灵活，如果有 <strong>n</strong> 个存储系统，那么一共需要启动 <strong>nx(n-1)</strong>个服务，无论是对于使用者，还是维护者来说，都可谓是灾难</li><li>方法二，相比于方法一，极大地提高了灵活性，只需要一个服务就能替代上述 <strong>nx(n-1)</strong> 个服务</li><li>方法三，相比于方法二，更进一步提高了灵活性，每一个文件都可以有独立的源与目标。但这种方法只是看起来很美好，很灵活，实际上可能并没有真实的使用场景。原因是，如果每一个文件都可以具有独立的目标，那么完全可以将目标相同的文件聚合到一起，作为一个批量的任务，这样就演变为了 <strong>方法二</strong></li></ul><p>综上所述，下面实现 <strong>方法二</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Batch <span class="keyword">struct</span> &#123;</span><br><span class="line">  From    <span class="keyword">string</span></span><br><span class="line">  Targets []<span class="keyword">string</span></span><br><span class="line">  Names   []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sync</span><span class="params">(batch *Batch)</span></span> &#123;</span><br><span class="line">  from := NewStorage(batch.From)</span><br><span class="line">  targets := NewStorages(batch.Targets)</span><br><span class="line">  <span class="keyword">for</span> _, name := <span class="keyword">range</span> batch.Names &#123;</span><br><span class="line">    data := from.Download(name)</span><br><span class="line">    <span class="keyword">for</span> _, target := <span class="keyword">range</span> targets &#123;</span><br><span class="line">      target.Upload(name, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，所有代码都是面向接口编程，需求中提到的 <code>aws s3</code> 与 <code>aliyun oss</code> 还没有出现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AwsS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AliyunOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后，需要实现两个函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorage</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> name &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"awss3"</span>:</span><br><span class="line">      <span class="keyword">return</span> &amp;AwsS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"aliyunoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> AliyunOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"unknown name: %s"</span>, name) <span class="comment">// 只作为演示 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorages</span><span class="params">(names <span class="keyword">string</span>)</span> []<span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> results []Storage</span><br><span class="line">  <span class="keyword">for</span> _, name := <span class="keyword">range</span> names &#123;</span><br><span class="line">    results = <span class="built_in">append</span>(results, NewStorage(name))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，才终于完成了原始需求。使用面向实现方式的同学会说: 你这代码量要比面向实现的方法多很多，你实现了一个需求，我都实现好几个了。</p><p>对此，我是不慌的。</p><p>当产品要求将数据同步到 <code>cephs3</code>，<code>minio</code> 时，或者是从 <code>tencent cos</code>，本地磁盘同步到其他地方时，<code>func Sync</code> 是完全不需要改动的，代码的改动只有:</p><ol><li><p>增加对应的类型实现 <strong>Storage</strong> 接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CephS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ceph *CephS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ceph *CephS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MinIO <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(minio *MinIO)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(minio *MinIO)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Posix <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fs *Posix)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fs *Posix)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TencentOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(oss *TencentOSS)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(oss *TencentOSS)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 <strong>func NewStorage</strong>:</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorage</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> name &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"awss3"</span>:</span><br><span class="line">      <span class="keyword">return</span> &amp;AwsS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"aliyunoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> AliyunOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"cephs3"</span>:</span><br><span class="line">      <span class="keyword">return</span> CephS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minio"</span>:</span><br><span class="line">      <span class="keyword">return</span> MinIO&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"posix"</span>:</span><br><span class="line">      <span class="keyword">return</span> Posix&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"tencentoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> TencentOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"unknown name: %s"</span>, name) <span class="comment">// 只作为演示 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完成所有的修改了。如果是面向实现的方式，算了，我不想了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>抽象会提升思维上的难度，但却能提高代码的灵活性。而且，灵活性还会随着抽象程度的提升一起提高。优秀的代码设计，不但能满足于眼前的需求，还提供了在不改变已有设计的前提支持对未来可能变化的需求的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Program to an interface, not an implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对接口，而非实现编程 —— 出自 GoF《设计模式: 可复用面向对象软件基础》。&lt;strong&gt;接口&lt;/st</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>代码质量衡量标准</title>
    <link href="http://divinerapier.github.io/2021/02/06/the-code-quality-metrics/"/>
    <id>http://divinerapier.github.io/2021/02/06/the-code-quality-metrics/</id>
    <published>2021-02-06T04:51:33.000Z</published>
    <updated>2021-02-07T07:32:46.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可维护性-maintainability"><a href="#可维护性-maintainability" class="headerlink" title="可维护性 (maintainability)"></a>可维护性 (maintainability)</h2><p>常见的代码维护工作，大体上包括: 修复 Bug，修改已有的代码，添加新的代码。可维护性就是用来衡量上述工作的难度。</p><p>显而易见地，修改配置的难度小于修改编译参数，小于增加代码，小于改动已有代码。改动一处代码的难度小于改动多出代码，更小于改动不知道多少处代码。</p><p>易于维护就要求，在不破坏原有代码设计、引入新 Bug 低风险的情况下，能够快速修改或者添加代码。反之，则是不易于维护。</p><p>易于维护代码应该在兼具 <strong>可读性</strong> 的前提下，具有良好的模块化设计，做到高内聚低耦合，遵从面向接口而非实现的程序设计原则。</p><p>但是，可维护性是一个偏主观的衡量标准。一段代码的可维护性依赖于代码量、业务复杂度、知识背景、文档完善度还有开发开发者水平等诸多方面的因素。</p><p>同一段代码对于不同的开发者会具有不同的可维护性。</p><h2 id="可读性-readability"><a href="#可读性-readability" class="headerlink" title="可读性 (readability)"></a>可读性 (readability)</h2><blockquote><p>Martin Fowler:”Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”</p></blockquote><p>代码被阅读的次数远超过被编写的次数，无论是学习编程、修改代码、添加代码还是进行 Code Review 时，都需要对代码进行阅读。</p><p>很多人都听说过 <strong>可读性</strong>，知道 <strong>可读性</strong> 很重要，但却并不重视。在实际写代码的时候，会为了 <strong>编写上舒服</strong>，为了 <strong>自以为的高效</strong>，为了 <strong>炫技</strong> 或者是其他什么原因，写出让其他人难以理解，甚至无法理解的代码。更有甚者，<strong>看不懂若干月之前自己写的代码</strong>。</p><p>个人认为，可读性应被看做最重要的衡量标准。因为，无论是修复 Bug 还是开发新功能，只有先读懂代码，才能得到自己需要的信息去完成接下来的工作。若是读都读不懂，那么轻则工作效率事倍功半，加班成为常态；重则引入 Bug 影响绩效。</p><p>衡量可读性可以从编码规范、命名、函数长度、模块划分、注释等方面切入。</p><p>检测可读性可以通过 Code Review，如果同事读你的代码有很多疑问就表示需要提高可读性了。</p><h2 id="可扩展性-extensibility"><a href="#可扩展性-extensibility" class="headerlink" title="可扩展性 (extensibility)"></a>可扩展性 (extensibility)</h2><p>代码的可扩展性表示代码应对未来需求变化的能力。</p><p>在添加新功能时，扩展性的高低反比与对已有代码修改的数量。修改的内容越少，则表示扩展性越好。如果能做到只通过扩展的方式添加新代码，而无需修改已有代码时，则表示代码具有非常好的可扩展性。</p><h2 id="灵活性-flexibility"><a href="#灵活性-flexibility" class="headerlink" title="灵活性 (flexibility)"></a>灵活性 (flexibility)</h2><p>灵活性也是一个比较主观的衡量标准。例如:</p><ul><li>代码具有非常好的可扩展性</li><li>底层模块抽象度高，封装良好，已于复用代码</li><li>接口可以应对各种使用场景，满足各种不同的需求</li></ul><h2 id="简洁性-simplicity"><a href="#简洁性-simplicity" class="headerlink" title="简洁性 (simplicity)"></a>简洁性 (simplicity)</h2><blockquote><p>KISS 原则: Kepp It Simple, Stupid.</p></blockquote><p>保持代码简单、结构简洁、逻辑清晰。因为，越简单的代码，越易于理解。避免在代码中引入不必要的设计模式，或其他炫技的写法。</p><h2 id="可复用性-reusability"><a href="#可复用性-reusability" class="headerlink" title="可复用性 (reusability)"></a>可复用性 (reusability)</h2><p>大部分开发者一定听过可复用性，也一定听过 <strong>Don’t Repeat Yourself</strong>，也明白同样的代码只写一次，但却很少有人能真正做到，或者说是不知道如何做:</p><ul><li>面向对象的封装、继承、多态</li><li>单一职责原则</li><li>解耦，高内聚低耦合</li></ul><h2 id="可测试性-testability"><a href="#可测试性-testability" class="headerlink" title="可测试性 (testability)"></a>可测试性 (testability)</h2><p>编写易于单元测试的代码，如果为你的代码编写单元测试很困难，那你可能需要思考，你的一个函数或模块是不是做了太多的事情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可维护性-maintainability&quot;&gt;&lt;a href=&quot;#可维护性-maintainability&quot; class=&quot;headerlink&quot; title=&quot;可维护性 (maintainability)&quot;&gt;&lt;/a&gt;可维护性 (maintainability)&lt;/</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>删除已合并的分支</title>
    <link href="http://divinerapier.github.io/2020/12/31/git-delete-merged-branches/"/>
    <id>http://divinerapier.github.io/2020/12/31/git-delete-merged-branches/</id>
    <published>2020-12-31T03:05:56.000Z</published>
    <updated>2020-12-31T03:06:25.302Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged | egrep -v <span class="string">"(^\*|master|dev)"</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="git" scheme="http://divinerapier.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在 Archlinux 使用 diff cmp</title>
    <link href="http://divinerapier.github.io/2020/12/16/archlinux-diffutils/"/>
    <id>http://divinerapier.github.io/2020/12/16/archlinux-diffutils/</id>
    <published>2020-12-16T06:59:09.000Z</published>
    <updated>2020-12-16T07:01:41.168Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">kubernetes</a> 仓库中的脚本依赖于 <code>cmp &amp; diff</code> 命令。</p><p>这些命令在 <a href="https://www.archlinux.org/packages/core/x86_64/diffutils/files/" target="_blank" rel="noopener">diffutils</a> 中。</p><p>使用如下方式安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S diffutils</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes&lt;/a&gt; 仓库中的脚本依赖于 &lt;code&gt;cmp &amp;amp; diff&lt;/code&gt; </summary>
      
    
    
    
    
    <category term="archlinux" scheme="http://divinerapier.github.io/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>安装 NVIDIA Driver 和 CUDA</title>
    <link href="http://divinerapier.github.io/2020/12/08/install-nvidia-driver-and-cuda/"/>
    <id>http://divinerapier.github.io/2020/12/08/install-nvidia-driver-and-cuda/</id>
    <published>2020-12-08T02:46:02.000Z</published>
    <updated>2020-12-08T04:33:22.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ /home/sihao$ cat /etc/os-release</span><br><span class="line"></span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"18.04.4 LTS (Bionic Beaver)"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 18.04.4 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"18.04"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"https://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.launchpad.net/ubuntu/"</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span></span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><p><strong>GPU: GTX 2080Ti</strong>。</p><h2 id="下载安装程序"><a href="#下载安装程序" class="headerlink" title="下载安装程序"></a>下载安装程序</h2><p><strong>cuda</strong> 版本为 <a href="https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=runfilelocal" target="_blank" rel="noopener">cuda10.0</a></p><p><strong>NVIDIA Driver</strong> 版本为 440.82</p><h2 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/cuda-10.0 /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/cuda/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:<span class="variable">$LD_LIBRARY_PATH</span>"</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"/usr/local/cuda/lib64"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h2 id="安装-NVIDIA-Driver"><a href="#安装-NVIDIA-Driver" class="headerlink" title="安装 NVIDIA Driver"></a>安装 NVIDIA Driver</h2><h3 id="卸载已有-NVIDIA-Driver"><a href="#卸载已有-NVIDIA-Driver" class="headerlink" title="卸载已有 NVIDIA Driver"></a>卸载已有 NVIDIA Driver</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/nvidia-uninstall</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="安装新-NVIDIA-Driver"><a href="#安装新-NVIDIA-Driver" class="headerlink" title="安装新 NVIDIA Driver"></a>安装新 NVIDIA Driver</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh NVIDIA-Linux-x86_64-440.82.run</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://forums.developer.nvidia.com/t/libcublas-so-10-0-cannot-be-found/69629" target="_blank" rel="noopener">libcublas-so-10-0-cannot-be-found</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="nvidia" scheme="http://divinerapier.github.io/tags/nvidia/"/>
    
    <category term="cuda" scheme="http://divinerapier.github.io/tags/cuda/"/>
    
  </entry>
  
  <entry>
    <title>Volcano Plugin - binpack</title>
    <link href="http://divinerapier.github.io/2020/12/07/volcano-plugin-binpack/"/>
    <id>http://divinerapier.github.io/2020/12/07/volcano-plugin-binpack/</id>
    <published>2020-12-07T07:17:39.000Z</published>
    <updated>2020-12-08T07:32:05.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>binpack</strong> 解决的问题是，提高节点的利用率，避免资源碎片化。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>如下代码来自: <code>pkg/scheduler/plugins/binpack/binpack.go</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BinPackingScore use the best fit polices during scheduling.</span></span><br><span class="line"><span class="comment">// Goals:</span></span><br><span class="line"><span class="comment">// - Schedule Jobs using BestFit Policy using Resource Bin Packing Priority Function</span></span><br><span class="line"><span class="comment">// - Reduce Fragmentation of scarce resources on the Cluster</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinPackingScore</span><span class="params">(task *api.TaskInfo, node *api.NodeInfo, weight priorityWeight)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    score := <span class="number">0.0</span></span><br><span class="line">    weightSum := <span class="number">0</span></span><br><span class="line">    requested := task.Resreq</span><br><span class="line">    allocatable := node.Allocatable</span><br><span class="line">    used := node.Used</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, resource := <span class="keyword">range</span> requested.ResourceNames() &#123;</span><br><span class="line">        request := requested.Get(resource)</span><br><span class="line">        <span class="keyword">if</span> request == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        allocate := allocatable.Get(resource)</span><br><span class="line">        nodeUsed := used.Get(resource)</span><br><span class="line"></span><br><span class="line">        resourceWeight := <span class="number">0</span></span><br><span class="line">        found := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">switch</span> resource &#123;</span><br><span class="line">        <span class="keyword">case</span> v1.ResourceCPU:</span><br><span class="line">            resourceWeight = weight.BinPackingCPU</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> v1.ResourceMemory:</span><br><span class="line">            resourceWeight = weight.BinPackingMemory</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            resourceWeight, found = weight.BinPackingResources[resource]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !found &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resourceScore := ResourceBinPackingScore(request, allocate, nodeUsed, resourceWeight)</span><br><span class="line">        klog.V(<span class="number">5</span>).Infof(<span class="string">"task %s/%s on node %s resource %s, need %f, used %f, allocatable %f, weight %d, score %f"</span>, task.Namespace, task.Name, node.Name, resource, request, nodeUsed, allocate, resourceWeight, resourceScore)</span><br><span class="line"></span><br><span class="line">        score += resourceScore</span><br><span class="line">        weightSum += resourceWeight</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapping the result from [0, weightSum] to [0, 10(MaxPriority)]</span></span><br><span class="line">    <span class="keyword">if</span> weightSum &gt; <span class="number">0</span> &#123;</span><br><span class="line">        score /= <span class="keyword">float64</span>(weightSum)</span><br><span class="line">    &#125;</span><br><span class="line">    score *= <span class="keyword">float64</span>(v1alpha1.MaxNodeScore * <span class="keyword">int64</span>(weight.BinPackingWeight))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResourceBinPackingScore calculate the binpack score for resource with provided info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResourceBinPackingScore</span><span class="params">(requested, capacity, used <span class="keyword">float64</span>, weight <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> capacity == <span class="number">0</span> || weight == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    usedFinally := requested + used</span><br><span class="line">    <span class="keyword">if</span> usedFinally &gt; capacity &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    score := usedFinally * <span class="keyword">float64</span>(weight) / capacity</span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volcano-scheduler-configmap</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">volcano-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">volcano-scheduler.conf:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">actions:</span> <span class="string">"enqueue, allocate, backfill"</span></span><br><span class="line">    <span class="attr">tiers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">priority</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gang</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conformance</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">drf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">predicates</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proportion</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nodeorder</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">binpack</span></span><br><span class="line">        <span class="attr">arguments:</span></span><br><span class="line">          <span class="comment"># binpack 插件权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.weight:</span> <span class="number">10</span></span><br><span class="line">          <span class="comment"># cpu 资源权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.cpu:</span> <span class="number">1</span></span><br><span class="line">          <span class="comment"># memory 资源权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.memory:</span> <span class="number">1</span></span><br><span class="line">          <span class="comment"># gpu 等其他资源类型</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.resources:</span> <span class="string">nvidia.com/gpu</span></span><br><span class="line">          <span class="comment"># gpu 等其他资源权重配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.resources.nvidia.com/gpu:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Volcano-Scheduler-日志"><a href="#Volcano-Scheduler-日志" class="headerlink" title="Volcano Scheduler 日志"></a>Volcano Scheduler 日志</h3><p><strong>Volcano Scheduler</strong> 中可以看到 <strong>binpack plugin</strong> 加载的配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n volcano-system logs -f volcano-scheduler-566b6f749d-4wr6m</span><br><span class="line"></span><br><span class="line">I1208 07:27:43.875761       1 binpack.go:161] Leaving binpack plugin. binpack.weight[10], binpack.cpu[1], binpack.memory[1], nvidia.com/gpu[2] ...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;binpack&lt;/strong&gt; 解决的问题是，提高节点的利用率，避免资源碎片化。&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="volcano" scheme="http://divinerapier.github.io/tags/volcano/"/>
    
  </entry>
  
  <entry>
    <title>删除所有 Evicted 状态的 Pod</title>
    <link href="http://divinerapier.github.io/2020/12/01/delete-all-evicted-pods/"/>
    <id>http://divinerapier.github.io/2020/12/01/delete-all-evicted-pods/</id>
    <published>2020-12-01T05:53:47.000Z</published>
    <updated>2020-12-01T05:54:30.431Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -ojson | jq -r <span class="string">'.items[] | select(.status.reason!=null) | select(.status.reason | contains("Evicted")) | .metadata.namespace + " " + .metadata.name'</span> | xargs -n2 -l bash -c <span class="string">'kubectl delete pods -n $0 $1'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>设置容器内的 locale</title>
    <link href="http://divinerapier.github.io/2020/11/30/set-locale-inside-a-container/"/>
    <id>http://divinerapier.github.io/2020/11/30/set-locale-inside-a-container/</id>
    <published>2020-11-30T02:22:26.000Z</published>
    <updated>2020-11-30T06:17:58.252Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法面向 <strong>Ubuntu/Debian</strong> 系列，<strong>CentOS</strong> 系列方法类似。</p><h2 id="在容器内处理"><a href="#在容器内处理" class="headerlink" title="在容器内处理"></a>在容器内处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt update --fix-missing</span><br><span class="line">apt install -y locales</span><br><span class="line">sed -i <span class="string">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen</span><br><span class="line">locale-gen</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LANG=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LANGUAGE=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LC_ALL=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936"</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set termencoding=utf-8"</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set encoding=utf-8"</span> &gt;&gt; ~/.vimrc</span><br></pre></td></tr></table></figure><h2 id="在-Dockerfile-中处理"><a href="#在-Dockerfile-中处理" class="headerlink" title="在 Dockerfile 中处理"></a>在 Dockerfile 中处理</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update --fix-missing \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y locales \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen \</span></span><br><span class="line"><span class="bash">    &amp;&amp; locale-gen</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936"</span> &gt;&gt; ~/.vimrc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"set termencoding=utf-8"</span> &gt;&gt; ~/.vimrc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"set encoding=utf-8"</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解决办法面向 &lt;strong&gt;Ubuntu/Debian&lt;/strong&gt; 系列，&lt;strong&gt;CentOS&lt;/strong&gt; 系列方法类似。&lt;/p&gt;
&lt;h2 id=&quot;在容器内处理&quot;&gt;&lt;a href=&quot;#在容器内处理&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="container" scheme="http://divinerapier.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>并行程序设计</title>
    <link href="http://divinerapier.github.io/2020/11/21/introduction-to-parallel-programming/"/>
    <id>http://divinerapier.github.io/2020/11/21/introduction-to-parallel-programming/</id>
    <published>2020-11-21T06:24:38.000Z</published>
    <updated>2020-11-23T02:10:49.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要并行程序"><a href="#为什么需要并行程序" class="headerlink" title="为什么需要并行程序"></a>为什么需要并行程序</h2><p>单核心的性能不满足需求。</p><h2 id="如何设计并行程序"><a href="#如何设计并行程序" class="headerlink" title="如何设计并行程序"></a>如何设计并行程序</h2><p>在软件层面，通常的方案的基本思想是将要完成的任务分配给各个处理核心。有两种广泛采用的方法: <strong>任务并行</strong> 和 <strong>数据并行</strong>。</p><p>以如下问题解释说明:</p><p>试卷共计 5 道题目，有 100 名学生参加考试，5 名教师阅卷。</p><h3 id="任务并行"><a href="#任务并行" class="headerlink" title="任务并行"></a>任务并行</h3><p>将待解决的问题所需要执行的各个任务分配到各个核心上执行。</p><p>对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，批改每一道题是一个任务。则将任务分配到核心的含义是: 每一名教师只需要负责批阅固定的一道题目。</p><h3 id="数据并行"><a href="#数据并行" class="headerlink" title="数据并行"></a>数据并行</h3><p>将待解决问题所需要处理的数据分配给各个处理核心，每个处理核心执行相同的操作。</p><p>对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，将试卷 —— 也就是数据分配给教师，教师负责试卷的整个批阅过程。各个老师是做的工作是相同的。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如何衡量并行程序的性能指标。</p><h3 id="加速比和效率"><a href="#加速比和效率" class="headerlink" title="加速比和效率"></a>加速比和效率</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要并行程序&quot;&gt;&lt;a href=&quot;#为什么需要并行程序&quot; class=&quot;headerlink&quot; title=&quot;为什么需要并行程序&quot;&gt;&lt;/a&gt;为什么需要并行程序&lt;/h2&gt;&lt;p&gt;单核心的性能不满足需求。&lt;/p&gt;
&lt;h2 id=&quot;如何设计并行程序&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="parallel programming" scheme="http://divinerapier.github.io/tags/parallel-programming/"/>
    
  </entry>
  
  <entry>
    <title>测试节点之间的网络带宽</title>
    <link href="http://divinerapier.github.io/2020/11/19/testing-the-bandwidth-between-two-nodes/"/>
    <id>http://divinerapier.github.io/2020/11/19/testing-the-bandwidth-between-two-nodes/</id>
    <published>2020-11-19T05:14:30.000Z</published>
    <updated>2020-11-19T08:05:50.160Z</updated>
    
    <content type="html"><![CDATA[<p>昨天同事找到我，说 <strong>nfs</strong> 太慢了，通过 <strong>iostat</strong> 看只有 <strong>1-2MB/s</strong> 的写入速度。在通过 <strong>fio</strong> 测试磁盘顺序写入速度，得到结果为 <strong>300MB/s</strong> 之后，遂怀疑是网络的问题。</p><h2 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h2><blockquote><p>iperf is a tool for performing network throughput measurements.  It can test either TCP or UDP throughput.  To perform an iperf test the user must establish both a server (to discard traffic) and a client (to generate traffic).</p></blockquote><p>此处省略安装过程。</p><h3 id="测试网络带宽"><a href="#测试网络带宽" class="headerlink" title="测试网络带宽"></a>测试网络带宽</h3><p><strong>iperf</strong> 通过使用不同的命令行参数，支持分别作为 <strong>服务端</strong> 或 <strong>客户端</strong>。</p><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><p>监听默认端口 <strong>5001</strong>，启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s</span><br></pre></td></tr></table></figure><p>或者，监听指定端口，启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s -p &lt;port&gt;</span><br></pre></td></tr></table></figure><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p>连接默认端口 <strong>5001</strong>，启动客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt;</span><br></pre></td></tr></table></figure><p>或者，连接指定端口，启动客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt; -p &lt;port&gt;</span><br></pre></td></tr></table></figure><p>同时，<strong>iperf</strong> 也支持多线程的客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt; -p &lt;port&gt; -P &lt;threadiness&gt;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>单线程客户端的测试结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.33.28.26, TCP port 9999</span><br><span class="line">TCP window size:  170 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] <span class="built_in">local</span> 172.29.60.164 port 37290 connected with 10.33.28.26 port 9999</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.6 sec  24.0 MBytes  19.0 Mbits/sec</span><br></pre></td></tr></table></figure><p>多线程客户端的测试结果，两个节点都有 <strong>16</strong> 个 <strong>CPU</strong> 核心:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.33.28.26, TCP port 9999</span><br><span class="line">TCP window size: 85.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[ 18] <span class="built_in">local</span> 172.29.60.164 port 37392 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 17] <span class="built_in">local</span> 172.29.60.164 port 37390 connected with 10.33.28.26 port 9999</span><br><span class="line">[  4] <span class="built_in">local</span> 172.29.60.164 port 37364 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 11] <span class="built_in">local</span> 172.29.60.164 port 37378 connected with 10.33.28.26 port 9999</span><br><span class="line">[  9] <span class="built_in">local</span> 172.29.60.164 port 37374 connected with 10.33.28.26 port 9999</span><br><span class="line">[  8] <span class="built_in">local</span> 172.29.60.164 port 37372 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 10] <span class="built_in">local</span> 172.29.60.164 port 37376 connected with 10.33.28.26 port 9999</span><br><span class="line">[  6] <span class="built_in">local</span> 172.29.60.164 port 37366 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 13] <span class="built_in">local</span> 172.29.60.164 port 37382 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 14] <span class="built_in">local</span> 172.29.60.164 port 37384 connected with 10.33.28.26 port 9999</span><br><span class="line">[  3] <span class="built_in">local</span> 172.29.60.164 port 37362 connected with 10.33.28.26 port 9999</span><br><span class="line">[  5] <span class="built_in">local</span> 172.29.60.164 port 37368 connected with 10.33.28.26 port 9999</span><br><span class="line">[  7] <span class="built_in">local</span> 172.29.60.164 port 37370 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 15] <span class="built_in">local</span> 172.29.60.164 port 37386 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 16] <span class="built_in">local</span> 172.29.60.164 port 37388 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 12] <span class="built_in">local</span> 172.29.60.164 port 37380 connected with 10.33.28.26 port 9999</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.2 sec  2.62 MBytes  2.17 Mbits/sec</span><br><span class="line">[ 13]  0.0-10.2 sec  2.88 MBytes  2.36 Mbits/sec</span><br><span class="line">[ 15]  0.0-10.2 sec  1.88 MBytes  1.54 Mbits/sec</span><br><span class="line">[  7]  0.0-10.9 sec  1.50 MBytes  1.15 Mbits/sec</span><br><span class="line">[  6]  0.0-11.0 sec  1.75 MBytes  1.34 Mbits/sec</span><br><span class="line">[ 17]  0.0-11.2 sec  1.88 MBytes  1.40 Mbits/sec</span><br><span class="line">[  5]  0.0-11.3 sec  1.50 MBytes  1.12 Mbits/sec</span><br><span class="line">[ 10]  0.0-11.6 sec  1.88 MBytes  1.35 Mbits/sec</span><br><span class="line">[  9]  0.0-12.4 sec  1.62 MBytes  1.10 Mbits/sec</span><br><span class="line">[  4]  0.0-13.0 sec  2.88 MBytes  1.85 Mbits/sec</span><br><span class="line">[ 11]  0.0-13.0 sec  4.62 MBytes  2.98 Mbits/sec</span><br><span class="line">[ 14]  0.0-13.1 sec  4.88 MBytes  3.12 Mbits/sec</span><br><span class="line">[  8]  0.0-13.9 sec  2.12 MBytes  1.28 Mbits/sec</span><br><span class="line">[ 16]  0.0-14.1 sec  2.00 MBytes  1.19 Mbits/sec</span><br><span class="line">[ 18]  0.0-14.1 sec  2.12 MBytes  1.26 Mbits/sec</span><br><span class="line">[ 12]  0.0-14.3 sec  1.73 MBytes  1.01 Mbits/sec</span><br><span class="line">[SUM]  0.0-14.3 sec  37.9 MBytes  22.1 Mbits/sec</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>瓶颈在网络带宽，悲哀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天同事找到我，说 &lt;strong&gt;nfs&lt;/strong&gt; 太慢了，通过 &lt;strong&gt;iostat&lt;/strong&gt; 看只有 &lt;strong&gt;1-2MB/s&lt;/strong&gt; 的写入速度。在通过 &lt;strong&gt;fio&lt;/strong&gt; 测试磁盘顺序写入速度，得到结果</summary>
      
    
    
    
    
    <category term="network" scheme="http://divinerapier.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Volcano</title>
    <link href="http://divinerapier.github.io/2020/11/16/volcano/"/>
    <id>http://divinerapier.github.io/2020/11/16/volcano/</id>
    <published>2020-11-16T06:43:43.000Z</published>
    <updated>2020-11-18T03:31:38.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>从 <a href="https://github.com/volcano-sh/volcano/releases" target="_blank" rel="noopener">volocano release</a> 下载 <strong>Volcano</strong>，通过 <strong>yaml</strong> 文件创建 <strong>Deployment</strong> 等。</p><p>以当前版本 <strong>v1.1.0</strong> 为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/volcano-sh/volcano/releases/download/v1.1.0/volcano-v1.1.0-linux-gnu.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar xzf volcano-v1.1.0-linux-gnu.tar.gz</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f ./volcano-v1.1.0.yaml</span><br><span class="line">namespace/volcano-system created</span><br><span class="line">namespace/volcano-monitoring created</span><br><span class="line">configmap/volcano-scheduler-configmap created</span><br><span class="line">serviceaccount/volcano-scheduler created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-scheduler created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-scheduler-role created</span><br><span class="line">deployment.apps/volcano-scheduler created</span><br><span class="line">service/volcano-scheduler-service created</span><br><span class="line">serviceaccount/volcano-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-admission-role created</span><br><span class="line">deployment.apps/volcano-admission created</span><br><span class="line">service/volcano-admission-service created</span><br><span class="line">job.batch/volcano-admission-init created</span><br><span class="line">serviceaccount/volcano-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-controllers-role created</span><br><span class="line">deployment.apps/volcano-controllers created</span><br><span class="line">Warning: apiextensions.k8s.io/v1beta1 CustomResourceDefinition is deprecated <span class="keyword">in</span> v1.16+, unavailable <span class="keyword">in</span> v1.22+; use apiextensions.k8s.io/v1 CustomResourceDefinition</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/jobs.batch.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/commands.bus.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/podgroups.scheduling.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/queues.scheduling.volcano.sh created</span><br></pre></td></tr></table></figure><p>验证 <strong>Volcano</strong> 组件运行状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get all -n volcano-system</span><br><span class="line">NAME                                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/volcano-admission-7cfdf5b8d-cd2mk    1/1     Running     0          6m27s</span><br><span class="line">pod/volcano-admission-init-rmd7w         0/1     Completed   0          6m27s</span><br><span class="line">pod/volcano-controllers-c4c5f48b-dtx4w   1/1     Running     0          6m27s</span><br><span class="line">pod/volcano-scheduler-54f77d6788-d6t9j   1/1     Running     0          6m27s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/volcano-admission-service   ClusterIP   10.5.51.59    &lt;none&gt;        443/TCP    6m27s</span><br><span class="line">service/volcano-scheduler-service   ClusterIP   10.5.128.19   &lt;none&gt;        8080/TCP   6m27s</span><br><span class="line"></span><br><span class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/volcano-admission     1/1     1            1           6m27s</span><br><span class="line">deployment.apps/volcano-controllers   1/1     1            1           6m27s</span><br><span class="line">deployment.apps/volcano-scheduler     1/1     1            1           6m27s</span><br><span class="line"></span><br><span class="line">NAME                                           DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/volcano-admission-7cfdf5b8d    1         1         1       6m27s</span><br><span class="line">replicaset.apps/volcano-controllers-c4c5f48b   1         1         1       6m27s</span><br><span class="line">replicaset.apps/volcano-scheduler-54f77d6788   1         1         1       6m27s</span><br><span class="line"></span><br><span class="line">NAME                               COMPLETIONS   DURATION   AGE</span><br><span class="line">job.batch/volcano-admission-init   1/1           4m24s      6m27s</span><br></pre></td></tr></table></figure><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><h3 id="CPU-任务"><a href="#CPU-任务" class="headerlink" title="CPU 任务"></a>CPU 任务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeflow.org/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MPIJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">volcano</span></span><br><span class="line">  <span class="attr">slotsPerWorker:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cleanPodPolicy:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">mpiReplicaSpecs:</span></span><br><span class="line">    <span class="attr">Launcher:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">         <span class="attr">spec:</span></span><br><span class="line">           <span class="attr">containers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">divinerapier/openmpi-helloworld:0.0.1</span></span><br><span class="line">             <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line">             <span class="attr">command:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">mpirun</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--allow-run-as-root</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-np</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">"2"</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">/helloworld/mpi_hello_world</span></span><br><span class="line">             <span class="attr">resources:</span></span><br><span class="line">               <span class="attr">request:</span></span><br><span class="line">                 <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">               <span class="attr">limits:</span></span><br><span class="line">                 <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">    <span class="attr">Worker:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">divinerapier/openmpi-helloworld:0.0.1</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line">            <span class="attr">resources:</span></span><br><span class="line">              <span class="attr">request:</span></span><br><span class="line">                <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">              <span class="attr">limits:</span></span><br><span class="line">                <span class="attr">cpu:</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure><h3 id="GPU-任务"><a href="#GPU-任务" class="headerlink" title="GPU 任务"></a>GPU 任务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeflow.org/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MPIJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">volcano</span></span><br><span class="line">  <span class="attr">slotsPerWorker:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cleanPodPolicy:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">mpiReplicaSpecs:</span></span><br><span class="line">    <span class="attr">Launcher:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">         <span class="attr">spec:</span></span><br><span class="line">           <span class="attr">containers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mpioperator/tensorflow-benchmarks:latest</span></span><br><span class="line">             <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line">             <span class="attr">command:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">mpirun</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--allow-run-as-root</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-np</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">"2"</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-bind-to</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">none</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-map-by</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">slot</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">NCCL_DEBUG=INFO</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">LD_LIBRARY_PATH</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">PATH</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-mca</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">pml</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">ob1</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-mca</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">btl</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">^openib</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--model=resnet101</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--batch_size=64</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--variable_update=horovod</span></span><br><span class="line">             <span class="attr">resources:</span></span><br><span class="line">               <span class="attr">limits:</span></span><br><span class="line">                 <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Worker:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mpioperator/tensorflow-benchmarks:latest</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line">            <span class="attr">resources:</span></span><br><span class="line">              <span class="attr">limits:</span></span><br><span class="line">                <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>volcano-scheduler</strong> 在调度任务时，当任务使用的资源太少时会被跳过，具体逻辑为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    minMilliCPU <span class="keyword">float64</span> = <span class="number">10</span></span><br><span class="line">    minMilliScalarResources <span class="keyword">float64</span> = <span class="number">10</span></span><br><span class="line">    minMemory <span class="keyword">float64</span> = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(alloc *Action)</span> <span class="title">Execute</span><span class="params">(ssn *framework.Session)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> _, found = pendingTasks[job.UID]; !found &#123;</span><br><span class="line">        tasks := util.NewPriorityQueue(ssn.TaskOrderFn)</span><br><span class="line">        <span class="keyword">for</span> _, task := <span class="keyword">range</span> job.TaskStatusIndex[api.Pending] &#123;</span><br><span class="line">            <span class="comment">// Skip BestEffort task in 'allocate' action.</span></span><br><span class="line">            <span class="keyword">if</span> task.Resreq.IsEmpty() &#123;</span><br><span class="line">                klog.V(<span class="number">4</span>).Infof(<span class="string">"Task &lt;%v/%v&gt; is BestEffort task, skip it."</span>,</span><br><span class="line">                task.Namespace, task.Name)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tasks.Push(task)</span><br><span class="line">        &#125;</span><br><span class="line">        pendingTasks[job.UID] = tasks</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty returns bool after checking any of resource is less than min possible value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resource)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r.MilliCPU &gt;= minMilliCPU || r.Memory &gt;= minMemory &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, rQuant := <span class="keyword">range</span> r.ScalarResources &#123;</span><br><span class="line">        <span class="keyword">if</span> rQuant &gt;= minMilliScalarResources &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，在使用 <strong>volcano</strong> 作为调度器时，必须要对 <strong>Pod</strong> 使用的资源做出限制。对于使用 <strong>volcano</strong> 调度 <strong>MPIJob</strong> 时，无论是 <strong>Launcher</strong> 还是 <strong>Worker</strong> 都需要显示声明需要的资源。</p><p>更具体地，<strong>volcano</strong> 会将资源分为两个大类:</p><ul><li><strong>CPU</strong> 与 <strong>Memory</strong></li><li>其他资源</li></ul><p>要求上述两类资源，至少有一类使用的资源满足最低要求即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;从 &lt;a href=&quot;https://github.com/</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="scheduler" scheme="http://divinerapier.github.io/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>调度与驱逐 —— 将 Pod 分配到节点上</title>
    <link href="http://divinerapier.github.io/2020/11/15/scheduling-and-eviction-assigning-pods-to-nodes/"/>
    <id>http://divinerapier.github.io/2020/11/15/scheduling-and-eviction-assigning-pods-to-nodes/</id>
    <published>2020-11-15T10:47:40.000Z</published>
    <updated>2020-11-15T13:38:36.880Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">Labels and Selectors</a> 来选择。该约束为可选项，默认情况下调度器将自动进行合理的调度，比如，将 pod 分散到节点上，而非在可用资源不足的节点上。但在某些情况下，用户期望对调度 Pod 的 Node(s) 有更多控制，例如，确保 pod 最终落在有 SSD 的机器上，或者将若干有大量通信的服务的 pod 放置在同一个可用区。</p><h2 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h2><p><strong>nodeSelector</strong> 是最简单推荐形式的节点选择约束。nodeSelector 是 PodSpec 的一个字段，其包含键值对映射。为了使 pod 可以在某个节点上运行，约束键值对构成的集合必须是节点标签集合的子集。</p><h3 id="Get-nodes"><a href="#Get-nodes" class="headerlink" title="Get nodes"></a>Get nodes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="Get-the-names-of-cluster’s-nodes"><a href="#Get-the-names-of-cluster’s-nodes" class="headerlink" title="Get the names of cluster’s nodes"></a>Get the names of cluster’s nodes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="Attach-label-to-the-node"><a href="#Attach-label-to-the-node" class="headerlink" title="Attach label to the node"></a>Attach label to the node</h3><p>规则为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;</span><br></pre></td></tr></table></figure><p>例如，节点 ‘kubernetes-foo-node-1.c.a-robinson.internal’，标签 ‘disktype=ssd’，则可以执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes kubernetes-foo-node-1.c.a-robinson.internal disktype=ssd</span><br></pre></td></tr></table></figure><p>通过命令验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node &lt;node-name&gt;</span><br></pre></td></tr></table></figure><h3 id="Add-a-nodeSelector-field-to-your-pod-configuration"><a href="#Add-a-nodeSelector-field-to-your-pod-configuration" class="headerlink" title="Add a nodeSelector field to your pod configuration"></a>Add a nodeSelector field to your pod configuration</h3><p>如下为原始 Pod 配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>在此基础上，添加 nodeSelector:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure><p>而改文件可以在 <a href="https://k8s.io/examples/pods/pod-nginx.yaml" target="_blank" rel="noopener">https://k8s.io/examples/pods/pod-nginx.yaml</a> 得到。因此，使用如下命令创建 Pod:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/pods/pod-nginx.yaml</span><br></pre></td></tr></table></figure><p>之后，查看 Pod 所在的 Node 并验证约束是否有效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">kubectl describe node &lt;node-name&gt;</span><br></pre></td></tr></table></figure><h3 id="Affinity-and-anti-affinity"><a href="#Affinity-and-anti-affinity" class="headerlink" title="Affinity and anti-affinity"></a>Affinity and anti-affinity</h3><p>Affinity and anti-affinity (亲和与反亲和) 是 nodeSelector 提供的一种非常简单的将 pod 约束到具有特定标签的节点上的方法，极大地扩展了用户可以表达约束的类型。关键增强表现为:</p><ol><li>语言更具表现力，不只是 “完全匹配的 AND” 语义</li><li>规则可以是一种建议性的，而非硬性要求，即使调度器无法找到满足要求的 Node，依旧会调度该 pod</li><li>除了可以使用 Node 本身的标签作为约束之外，还可以使用运行在 Node 上的 pod 的标签作为约束，表明可以或者不可以与哪些 pod 运行在同一 Node 上。</li></ol><p>Affinity 功能包含两种类型的 affinity: <strong>node affinity</strong> 与 <strong>inter-pod affinity/anti-affinity</strong>。<strong>node affinity</strong> 类似于 <strong>nodeSelector</strong>，对应上述 <strong>1,2</strong> 两点优势。而 <strong>inter-pod affinity/anti-affinity</strong> 具有上述 <strong>1,2,3</strong> 三点优势。</p><h4 id="Node-affinity"><a href="#Node-affinity" class="headerlink" title="Node affinity"></a>Node affinity</h4><p><strong>Node affinity</strong> 概念上类似于 <strong>nodeSelector</strong>，可以根据节点上的标签来约束 pod 可以调度到哪些节点。</p><p>目前有两种类型的 Node affinity，分别为 <strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 和 <strong>preferredDuringSchedulingIgnoredDuringExecution</strong>。</p><p><strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 指定了将 pod 调度到一个节点上必须满足的规则，原则上等同于 nodeSelector，但语法更具有表现力。</p><p><strong>preferredDuringSchedulingIgnoredDuringExecution</strong> 指定调度器将尝试执行但不能保证的偏好。</p><p>名称中 <strong>IgnoredDuringExecution</strong> 类似于 <strong>nodeSelector</strong> 的用法，表明如果节点的标签在 Pod 运行时发生变更，从而不再满足 pod 上的 affinity 规则时，pod 将仍然继续运行在原节点上。<strong>requiredDuringSchedulingRequiredDuringExecution</strong> 还只存在于计划中。</p><p>因此，在下面的示例中:</p><ul><li><strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 的含义为: <strong>必须将 pod 运行在具有 kubernetes.io/e2e-az-name=e2e-az1 或 kubernetes.io/e2e-az-name=e2e-az2 标签的 Node 上</strong></li><li><strong>preferredDuringSchedulingIgnoredDuringExecution</strong> 的含义为: <strong>尝试将 pod 运行具有 another-node-label-key=another-node-label-value 标签的 Node 上，如果这不可能的话，则允许 pod 在其他地方运行</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/e2e-az-name</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az2</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">another-node-label-key</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">another-node-label-value</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause:2.0</span></span><br></pre></td></tr></table></figure><p>Node affinity 语法支持的操作符: In，NotIn，Exists，DoesNotExist，Gt，Lt。使用 NotIn 和 DoesNotExist 来实现 <strong>node anti-affinity</strong> 行为，或者使用 <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/" target="_blank" rel="noopener">node taints(节点污点将)</a> pod 从特定节点中驱逐。</p><p>如果同时指定了 <strong>nodeSelector</strong> 和 <strong>nodeAffinity</strong>，则要求两者必须同时满足，才能将 pod 调度到候选 Node 上。</p><p>如果指定了多个与 <strong>nodeAffinity</strong> 类型关联的 <strong>nodeSelectorTerms</strong>，则 Node 只需要满足其中任何一个 nodeSelectorTerms 即可将 pod 调度到 Node 上。</p><p>如果指定了多个与 <strong>nodeSelectorTerms</strong> 关联的 <strong>matchExpressions</strong>，则当且仅当所有 <strong>matchExpressions</strong> 得到满足时才将 pod 调度到该 Node 上。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/" target="_blank" rel="noopener">Assigning Pods to Nodes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="scheduling" scheme="http://divinerapier.github.io/tags/scheduling/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Device Plugin</title>
    <link href="http://divinerapier.github.io/2020/11/15/kubernetes-device-plugin/"/>
    <id>http://divinerapier.github.io/2020/11/15/kubernetes-device-plugin/</id>
    <published>2020-11-15T09:20:26.000Z</published>
    <updated>2020-11-15T10:27:25.570Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 提供 <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/device-plugin.md" target="_blank" rel="noopener">device plugin framework</a>，允许用户将系统硬件资源发布到 Kubelet。</p><p>Device Plugin 由设备供应商实现，由用户或手动部署或作为 DaemonSet 来部署，而无需定制 Kubernetes 本身的代码。目标设备可以是 GPU、高性能 NIC、FPGA、InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。</p><h2 id="注册-Device-Plugin"><a href="#注册-Device-Plugin" class="headerlink" title="注册 Device Plugin"></a>注册 Device Plugin</h2><p>kubelet 提供了一个 Registration 的 gRPC 服务:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Registration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Register(RegisterRequest) <span class="keyword">returns</span> (Empty) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Device Plugin</strong> 可以通过此 gRPC 服务在 kubelet 进行注册。在注册时，<strong>Device Plugin</strong> 需要提供如下内容:</p><ul><li>Device Plugin 的 Unix 套接字。</li><li>Device Plugin 的 API 版本。</li><li>ResourceName。遵循 <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#extended-resources" target="_blank" rel="noopener">扩展资源命名方案</a>，形如 vendor-domain/resourcetype: 比如 NVIDIA GPU 就被公布为 nvidia.com/gpu。</li></ul><p>在成功注册后，<strong>Device Plugin</strong> 会向 kubelet 发送他所管理的设备列表，之后 kubelet 负责将这些资源发布到 API Server，作为 kubelet 节点状态更新的一部分。</p><p>比如，<strong>Device Plugin</strong> 在 kubelet 中注册了 <strong>hardware-vendor.example/foo</strong> 并报告了节点上的两个运行状况良好的设备后，节点状态将更新以通告该节点已安装2个 Foo 设备并且是可用的。</p><p>然后，用户就可以在 Container 规范中请求这类设备，但是有以下的限制:</p><ul><li>扩展资源仅可作为整数资源使用，且不能被过量使用</li><li>设备不能在容器之间共享</li></ul><p>假设 Kubernetes 集群正在运行一个 <strong>Device Plugin</strong>，ResourceName 为 <strong>hardware-vendor.example/foo</strong>。下面就是一个 Pod 示例，请求此资源以运行某演示负载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">demo-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause:2.0</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">hardware-vendor.example/foo:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># pod 需要两个 hardware-vendor.example/foo 设备</span></span><br><span class="line"><span class="comment"># 而且只能够调度到满足需求的 node 上</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果该节点中有2个以上的设备可用，剩余的设备可供其他 pod 使用</span></span><br></pre></td></tr></table></figure><h2 id="实现-Device-Plugin"><a href="#实现-Device-Plugin" class="headerlink" title="实现 Device Plugin"></a>实现 Device Plugin</h2><p>Device Plugin 的常规工作流程包括以下几个步骤：</p><ul><li><p>初始化。在这个阶段，Device Plugin 将执行供应商特定的初始化和设置，以确保设备处于就绪状态。</p></li><li><p>使用主机路径 /var/lib/kubelet/device-plugins/ 下的 Unix socket 启动一个 gRPC 服务，该服务实现以下接口：</p>  <figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">DevicePlugin</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GetDevicePluginOptions returns options to be communicated with Device Manager.</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> GetDevicePluginOptions(Empty) <span class="keyword">returns</span> (DevicePluginOptions) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // ListAndWatch <span class="keyword">returns</span> a stream of List of Devices</span></span><br><span class="line"><span class="function">    // Whenever a Device state change or a Device disappears, ListAndWatch</span></span><br><span class="line"><span class="function">    // <span class="keyword">returns</span> the new list</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> ListAndWatch(Empty) <span class="keyword">returns</span> (stream ListAndWatchResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // Allocate is called during container creation so that the Device</span></span><br><span class="line"><span class="function">    // Plugin can run device specific operations and instruct Kubelet</span></span><br><span class="line"><span class="function">    // of the steps to make the Device available in the container</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> Allocate(AllocateRequest) <span class="keyword">returns</span> (AllocateResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // GetPreferredAllocation <span class="keyword">returns</span> a preferred set of devices to allocate</span></span><br><span class="line"><span class="function">    // from a list of available ones. The resulting preferred allocation is not</span></span><br><span class="line"><span class="function">    // guaranteed to be the allocation ultimately performed by the</span></span><br><span class="line"><span class="function">    // devicemanager. It is only designed to help the devicemanager make a more</span></span><br><span class="line"><span class="function">    // informed allocation decision when possible.</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> GetPreferredAllocation(PreferredAllocationRequest) <span class="keyword">returns</span> (PreferredAllocationResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // PreStartContainer is called, if indicated by Device Plugin during registeration phase,</span></span><br><span class="line"><span class="function">    // before each container start. Device plugin can run device specific operations</span></span><br><span class="line"><span class="function">    // such as resetting the device before making devices available to the container.</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> PreStartContainer(PreStartContainerRequest) <span class="keyword">returns</span> (PreStartContainerResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>通过 Unix socket 在主机路径 /var/lib/kubelet/device-plugins/kubelet.sock 处向 kubelet 注册自身。</p></li><li><p>成功注册自身后，Device Plugin 将以服务模式运行，之后，它将持续监控设备运行状况，并在设备状态发生任何变化时报告 kubelet。它还负责响应 Allocate gRPC 请求。 在 Allocate 期间，Device Plugin 可能还会做一些设备特定的准备；例如清理 GPU 或初始化 QRNG。如果操作成功，则 Device Plugin 将返回 AllocateResponse，其中包含用于访问被分配的设备容器运行时的配置。 kubelet 将此信息传递到容器运行时。</p></li></ul><h3 id="处理-kubelet-重启"><a href="#处理-kubelet-重启" class="headerlink" title="处理 kubelet 重启"></a>处理 kubelet 重启</h3><p>Device Plugin 应能监测到 kubelet 重启，并且向新的 kubelet 实例来重新注册自己。在当前实现中，当 kubelet 重启的时候，新的 kubelet 实例会删除 /var/lib/kubelet/device-plugins 下所有已经存在的 Unix sockets。 Device Plugin 需要能够监控到它的 Unix socket 被删除，并且当发生此类事件时重新注册自己。</p><h2 id="部署-Device-Plugin"><a href="#部署-Device-Plugin" class="headerlink" title="部署 Device Plugin"></a>部署 Device Plugin</h2><p>用户可以将 Device Plugin 作为节点操作系统的软件包来部署、作为 DaemonSet 来部署或者手动部署。</p><p>规范目录 /var/lib/kubelet/device-plugins 是需要特权访问的，所以 Device Plugin 必须要在被授权的安全的上下文中运行。如果将 Device Plugin 部署为 DaemonSet，/var/lib/kubelet/device-plugins 目录必须要在 DevicePlugin 的 PodSpec 中声明作为 Volume 被 mount 到 Device Plugin 中。</p><p>若选择 DaemonSet 方法，用户可以通过 Kubernetes 进行以下操作: 将 Device Plugin 的 Pod 放置在节点上，在出现故障后重新启动守护进程 Pod，来进行自动升级。</p><h2 id="API-兼容性"><a href="#API-兼容性" class="headerlink" title="API 兼容性"></a>API 兼容性</h2><p>Kubernetes Device Plugin 还处于 beta 版本。所以在稳定版本出来之前 API 会以不兼容的方式进行更改。作为一个项目，Kubernetes 建议 Device Plugin 开发者:</p><ul><li>注意未来版本的更改</li><li>支持多个版本的 Device Plugin API，以实现向后/向前兼容性。</li></ul><p>如果你启用 DevicePlugins 功能，并在需要升级到 Kubernetes 版本来获得较新的 Device Plugin API 版本的节点上运行 Device Plugin，请在升级这些节点之前先升级 Device Plugin 以支持这两个版本。 采用该方法将确保升级期间设备分配的连续运行。</p><h2 id="监控-Device-Plugin"><a href="#监控-Device-Plugin" class="headerlink" title="监控 Device Plugin"></a>监控 Device Plugin</h2><p>为了监控 Device Plugin 提供的资源，监控代理程序需要能够发现节点上正在使用的设备，并获取元数据来描述哪个指标与容器相关联。 设备监控代理暴露给 <a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a> 的指标应该遵循 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/instrumentation.md" target="_blank" rel="noopener">Kubernetes Instrumentation Guidelines</a>，使用 pod、namespace 和 container 标签来标识容器。</p><p>kubelet 提供了 gRPC 服务来使得正在使用中的设备被发现，并且还未这些设备提供了元数据:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PodResourcesLister is a service provided by the kubelet that provides information about the</span></span><br><span class="line"><span class="comment">// node resources consumed by pods and containers on the node</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">PodResourcesLister</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> List(ListPodResourcesRequest) <span class="keyword">returns</span> (ListPodResourcesResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>gRPC 服务通过 /var/lib/kubelet/pod-resources/kubelet.sock 的 UNIX 套接字来提供服务。 Device Plugin资源的监控代理程序可以部署为守护进程或者 DaemonSet。 规范的路径 /var/lib/kubelet/pod-resources 需要特权来进入， 所以监控代理程序必须要在获得授权的安全的上下文中运行。 如果设备监控代理以 DaemonSet 形式运行，必须要在插件的 PodSpec 中声明将 /var/lib/kubelet/pod-resources 目录以 卷的形式被挂载到容器中。</p><p>对“PodResources 服务”的支持要求启用 KubeletPodResources 特性门控。 从 Kubernetes 1.15 开始默认启用。</p><h2 id="Device-Plugin-集成-The-Topology-Manager"><a href="#Device-Plugin-集成-The-Topology-Manager" class="headerlink" title="Device Plugin 集成 The Topology Manager"></a>Device Plugin 集成 The Topology Manager</h2><p>The Topology Manager 是 Kubelet 的一个组件，它允许以拓扑对齐方式来调度资源。 为了做到这一点，Device Plugin API 进行了扩展来包括一个 TopologyInfo 结构体。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">TopologyInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">repeated</span> NUMANode nodes = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">NUMANode</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int64</span> ID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Device Plugin 希望 The Topology Manager 可以将填充的 TopologyInfo 结构体作为设备注册的一部分以及设备 ID 和设备的运行状况发送回去。然后 The Topology Manager 将使用此信息来咨询拓扑管理器并做出资源分配决策。</p><p>TopologyInfo 支持定义 nodes 字段，允许为 nil（默认）或者是一个 NUMA 节点的列表。 这样就可以使Device Plugin可以跨越 NUMA 节点去发布。</p><p>下面是一个由 Device Plugin 为设备填充 TopologyInfo 结构体的示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pluginapi.Device&#123;ID: &quot;25102017&quot;, Health: pluginapi.Healthy, Topology:&amp;pluginapi.TopologyInfo&#123;Nodes: []*pluginapi.NUMANode&#123;&amp;pluginapi.NUMANode&#123;ID: 0,&#125;,&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/" target="_blank" rel="noopener">Kubernetes Device Plugin</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubernetes 提供 &lt;a href=&quot;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/device-plugi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nvidia Docker</title>
    <link href="http://divinerapier.github.io/2020/11/14/nvidia-docker/"/>
    <id>http://divinerapier.github.io/2020/11/14/nvidia-docker/</id>
    <published>2020-11-14T10:21:01.000Z</published>
    <updated>2020-12-08T05:23:13.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nvidia-docker/nvidia-container-toolkit.png" alt="nvidia-container-toolkit.png"></p><p>Nvidia Container Toolkit 包含容器运行时库和一些工具，用于自动配置容器使用 GPU 资源。并且，支持多种不同的容器引擎，如 Docker、LXC、Podman 等。用户根据需要可以自行选择使用哪种引擎。</p><h2 id="The-Architecture-Overview-of-Nvidia-Container-Toolkit"><a href="#The-Architecture-Overview-of-Nvidia-Container-Toolkit" class="headerlink" title="The Architecture Overview of Nvidia Container Toolkit"></a>The Architecture Overview of Nvidia Container Toolkit</h2><p>Nvidia Container Toolkit 的架构允许其支持任何容器运行时。若以 Docker 为例，其由以下组件，以从上到下的层次结构组成:</p><ul><li>nvidia-docker2</li><li>nvidia-container-runtime</li><li>nvidia-container-toolkit</li><li>libnvidia-container</li></ul><p>下图为各个组件的关系:</p><p><img src="/images/nvidia-docker/nvidia-docker-arch.png" alt="nvidia-docker-arch.png"></p><h3 id="Components-and-Packages"><a href="#Components-and-Packages" class="headerlink" title="Components and Packages"></a>Components and Packages</h3><h4 id="libnvidia-container"><a href="#libnvidia-container" class="headerlink" title="libnvidia-container"></a>libnvidia-container</h4><p>提供库与 CLI 程序，实现自动化配置 GNU/Linux 容器使用 NVIDIA GPU 资源，其实现依赖于内核基础功能，且在设计上与容器运行时解耦。</p><p>libnvidia-container 提供了一个定义良好的 API 和一个封装好的 CLI 程序(nvidia-container-cli)，任何容器运行时都可以调用它来支持 NVIDIA GPU。</p><h4 id="nvidia-container-toolkit"><a href="#nvidia-container-toolkit" class="headerlink" title="nvidia-container-toolkit"></a>nvidia-container-toolkit</h4><p>实现了 runC prestart hook 需要的接口的脚本。该脚本在容器被创建之后，启动之前被 runC 调用，且被赋予访问与容器相关联的 config.json 的权限。脚本根据 config.json 中的信息作为合适的命令行参数 (an appropriate set of flags) 来调用 libnvidia-container CLI。其中，“指定哪些 GPU 设备在容器中使用” 是最重要的参数。</p><p>该组件之前的名字是 nvidia-container-runtime-hook，现在系统上的 nvidia-container-runtime-hook 是 nvidia-container-toolkit 的符号链接。</p><h4 id="nvidia-container-runtime"><a href="#nvidia-container-runtime" class="headerlink" title="nvidia-container-runtime"></a>nvidia-container-runtime</h4><p>曾经，nvidia-container-runtime 以 runC 作为基础，添加了 NVIDIA 特定的代码。2019 年，更改为对宿主机上原生 runC 做简单的封装。nvidia-container-runtime 将 runC spec 作为输入，将 nvidia-container-toolkit 脚本作为 prestart hook 注入到 runC spec 中。然后，将修改后的带有该 hook set 的 runC spec 传递给原生 runC 并调用 runC。需要注意的是，该组件不一定是针对 docker 的(但它是针对runC的)。</p><p>当该 package 完成安装后，Docker 的 daemon.json 文件会被更新为指向这个二进制文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"default-runtime"</span>: <span class="string">"nvidia"</span>,</span><br><span class="line">  <span class="string">"runtimes"</span>: &#123;</span><br><span class="line">    <span class="string">"nvidia"</span>: &#123;</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"/usr/bin/nvidia-container-runtime"</span>,</span><br><span class="line">        <span class="string">"runtimeArgs"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nvidia-docker2"><a href="#nvidia-docker2" class="headerlink" title="nvidia-docker2"></a>nvidia-docker2</h4><p>这个 package 是架构中唯一的 docker 专用包。它采用与 nvidia-container-runtime 相关的脚本，并将其安装到 docker 的 /etc/docker/daemon.json 文件中。这样，使用者就可以运行 <strong>docker run –runtime=nvidia …</strong> 来自动为容器添加对 GPU 的支持。这个 package 还安装了一个封装了原生 docker CLI 的脚本，名为 nvidia-docker，避免每次都指定 –runtime=nvidia 来调用 docker。它还允许用户在宿主机上设置环境变量 NV_GPU 来指定将哪些 GPU 注入到容器中。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Pre-Requisites"><a href="#Pre-Requisites" class="headerlink" title="Pre-Requisites"></a>Pre-Requisites</h3><ul><li><a href="https://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener">NVIDIA Drivers</a></li><li>Platform Requirements:<ol><li>GNU/Linux x86_64 with kernel version &gt; 3.10</li><li>Docker &gt;= 19.03 (recommended, but some distributions may include older versions of Docker. The minimum supported version is 1.12)</li><li>NVIDIA GPU with Architecture &gt; Fermi (or compute capability 2.1)</li><li>NVIDIA drivers ~= 361.93 (untested on older versions)</li></ol></li><li>Docker CE</li></ul><h3 id="Setting-up-NVIDIA-Container-Toolkit"><a href="#Setting-up-NVIDIA-Container-Toolkit" class="headerlink" title="Setting up NVIDIA Container Toolkit"></a>Setting up NVIDIA Container Toolkit</h3><p>安装软件源与 GPG key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>) \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure><p>安装 nvidia-docker2 并重启 Docker Daemon:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update \</span><br><span class="line">   &amp;&amp; sudo apt-get install -y nvidia-docker2 \</span><br><span class="line">   &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>启动容器测试，如果得到类似如下的输出则安装成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                               |                      |               MIG M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |</span><br><span class="line">| N/A   34C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/index.html" target="_blank" rel="noopener">NVIDIA Cloud Native Technologies</a></li><li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html" target="_blank" rel="noopener">Container Toolkit Installation Guide</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/nvidia-docker/nvidia-container-toolkit.png&quot; alt=&quot;nvidia-container-toolkit.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nvidia Container Toolkit 包含容器运行时</summary>
      
    
    
    
    
    <category term="gpu" scheme="http://divinerapier.github.io/tags/gpu/"/>
    
    <category term="docker" scheme="http://divinerapier.github.io/tags/docker/"/>
    
    <category term="nvidia" scheme="http://divinerapier.github.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>为 Linux 增加新磁盘</title>
    <link href="http://divinerapier.github.io/2020/11/01/adding-a-new-hard-drive-for-linux/"/>
    <id>http://divinerapier.github.io/2020/11/01/adding-a-new-hard-drive-for-linux/</id>
    <published>2020-11-01T12:41:21.000Z</published>
    <updated>2020-11-01T14:22:45.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看设备文件"><a href="#查看设备文件" class="headerlink" title="查看设备文件"></a>查看设备文件</h2><p>将磁盘插入计算机后，在终端中查看:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lsblk -d -o name,serial</span><br><span class="line"></span><br><span class="line">NAME    SERIAL</span><br><span class="line">nvme0n1 200000000000</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/nvme0n1: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Disk model: WDS100T3X0C-00SJG0</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>可以确认设备文件为 <code>/dev/nvme0n1</code>。</p><h2 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h2><p>创建分区表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted /dev/nvme0n1 mklabel gpt</span><br><span class="line"></span><br><span class="line">Information: You may need to update /etc/fstab.</span><br></pre></td></tr></table></figure><p>创建主分区，并确认对齐:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted -s -m /dev/nvme0n1 mkpart primary ext4 1 100%</span><br><span class="line"></span><br><span class="line">$ sudo parted /dev/nvme0n1 align-check opt 1</span><br><span class="line">1 aligned</span><br></pre></td></tr></table></figure><p>查看分区详细信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted /dev/nvme0n1 <span class="built_in">print</span></span><br><span class="line">Model: WDS100T3X0C-00SJG0 (nvme)</span><br><span class="line">Disk /dev/nvme0n1: 1000GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name     Flags</span><br><span class="line"> 1      1049kB  1000GB  1000GB               primary</span><br></pre></td></tr></table></figure><h2 id="使用磁盘"><a href="#使用磁盘" class="headerlink" title="使用磁盘"></a>使用磁盘</h2><p>创建文件系统:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.ext4 /dev/nvme0n1p1</span><br><span class="line"></span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Discarding device blocks: <span class="keyword">done</span></span><br><span class="line">Creating filesystem with 244190208 4k blocks and 61054976 inodes</span><br><span class="line">Filesystem UUID: b5424944-2d8c-4c5f-8bb4-0e538db5592b</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,</span><br><span class="line">        102400000, 214990848</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span></span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (262144 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>挂载磁盘:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /nvme</span><br><span class="line"></span><br><span class="line">$ sudo mount /dev/nvme0n1p1 /nvme</span><br><span class="line"></span><br><span class="line">$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/nvme0n1p1  916G   77M  870G   1% /nvme</span><br></pre></td></tr></table></figure><h2 id="测试磁盘"><a href="#测试磁盘" class="headerlink" title="测试磁盘"></a>测试磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /nvme</span><br><span class="line"></span><br><span class="line"><span class="comment"># ioengine: 可以指定为 psync / libaio</span></span><br><span class="line"><span class="comment"># numjobs: 测试线程数，线程之间的测试相互独立，成倍占用 size 指定的大小</span></span><br><span class="line"><span class="comment"># rw: 读写方式</span></span><br><span class="line"><span class="comment">#     read: 顺序读</span></span><br><span class="line"><span class="comment">#     write: 顺序写</span></span><br><span class="line"><span class="comment">#     randread: 随机读</span></span><br><span class="line"><span class="comment">#     randwrite: 随机写</span></span><br><span class="line"><span class="comment"># bs: 每次读写块大小</span></span><br><span class="line">$ sudo fio -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=4k -size=100G -numjobs=4 -group_reporting -name=file</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看设备文件&quot;&gt;&lt;a href=&quot;#查看设备文件&quot; class=&quot;headerlink&quot; title=&quot;查看设备文件&quot;&gt;&lt;/a&gt;查看设备文件&lt;/h2&gt;&lt;p&gt;将磁盘插入计算机后，在终端中查看:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="hard drive" scheme="http://divinerapier.github.io/tags/hard-drive/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes DaemonSet</title>
    <link href="http://divinerapier.github.io/2020/10/28/kubernetes-daemonset/"/>
    <id>http://divinerapier.github.io/2020/10/28/kubernetes-daemonset/</id>
    <published>2020-10-28T06:41:29.000Z</published>
    <updated>2020-10-28T08:13:15.385Z</updated>
    
    <content type="html"><![CDATA[<p><strong>DaemonSet</strong> 确保全部 (或者某些) 节点上运行一个 Pod 的副本。 当有节点加入集群时，也会为他们新增一个 Pod 。当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p><p>DaemonSet 的一些典型用法:</p><ul><li>在每个节点上运行集群守护进程<ul><li>比如: 网络插件，存储插件</li></ul></li><li>在每个节点上运行日志收集守护进程</li><li>在每个节点上运行监控守护进程</li></ul><h2 id="创建-DaemonSet"><a href="#创建-DaemonSet" class="headerlink" title="创建 DaemonSet"></a>创建 DaemonSet</h2><p>下面的 <strong>daemonset.yaml</strong> 文件描述了一个运行 <strong>fluentd-elasticsearch</strong> Docker 镜像的 DaemonSet:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">fluentd-logging</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="comment"># this toleration is to have the daemonset runnable on master nodes</span></span><br><span class="line">      <span class="comment"># remove it if your masters can't run pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/fluentd_elasticsearch/fluentd:v2.5.2</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/docker/containers</span></span><br></pre></td></tr></table></figure><p>使用 <strong>yaml</strong> 文件创建 <strong>DaemonSet</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/controllers/daemonset.yaml</span><br></pre></td></tr></table></figure><h2 id="如何调度-Daemon-Pods"><a href="#如何调度-Daemon-Pods" class="headerlink" title="如何调度 Daemon Pods"></a>如何调度 Daemon Pods</h2><h3 id="通过默认调度器调度"><a href="#通过默认调度器调度" class="headerlink" title="通过默认调度器调度"></a>通过默认调度器调度</h3><p>DaemonSet 确保所有符合条件的节点都运行该 Pod 的一个副本。 通常，运行 Pod 的节点由 Kubernetes 调度器选择。不过，DaemonSet pods 由 DaemonSet 控制器创建和调度。这就带来了以下问题:</p><ul><li>Pod 行为的不一致性: 正常 Pod 在被创建后等待调度时处于 Pending 状态， DaemonSet Pods 创建后不会处于 Pending 状态下。这使用户感到困惑。</li><li><a href="https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/" target="_blank" rel="noopener">Pod 抢占</a> 由默认调度器处理。启用抢占后，DaemonSet 控制器将在不考虑 Pod 优先级和抢占 的情况下制定调度决策。</li></ul><p><strong>ScheduleDaemonSetPods</strong> 控制 Kubernetes 使用 <strong>默认调度器</strong> 而不是 <strong>DaemonSet 控制器</strong> 来调度 DaemonSets，通过将 <strong>yaml</strong> 配置文件中 <strong>Pod</strong> 部分的 <strong>.spec.nodeName</strong> 替换为 <strong>.spec.affinity.nodeAffinity</strong>。更多内容请点击 <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity" target="_blank" rel="noopener">Assigning Pods to Nodes: Affinity and anti-affinity</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/e2e-az-name</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az2</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">another-node-label-key</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">another-node-label-value</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause:2.0</span></span><br></pre></td></tr></table></figure><ul><li><strong>requiredDuringSchedulingIgnoredDuringExecution</strong>: 必须将 Pod 部署到满足条件的节点上，否则不断重试</li><li><strong>preferredDuringSchedulingIgnoredDuringExecution</strong>: 优先将 Pod 部署到满足条件的节点上，否则忽略该条件</li></ul><p>此外，系统会自动添加 <strong>node.kubernetes.io/unschedulable: NoSchedule</strong> 容忍度到 <strong>DaemonSet Pods</strong>。在调度 DaemonSet Pod 时，默认调度器会忽略 <strong>unschedulable</strong> 节点。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener">Kubernetes DaemonSet</a></li><li><a href="https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/" target="_blank" rel="noopener">Pod Priority and Preemption</a></li><li><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity" target="_blank" rel="noopener">Assigning Pods to Nodes: Affinity and anti-affinity</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;DaemonSet&lt;/strong&gt; 确保全部 (或者某些) 节点上运行一个 Pod 的副本。 当有节点加入集群时，也会为他们新增一个 Pod 。当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="controllers" scheme="http://divinerapier.github.io/tags/controllers/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes StatefulSet</title>
    <link href="http://divinerapier.github.io/2020/10/27/kubernetes-statefulset/"/>
    <id>http://divinerapier.github.io/2020/10/27/kubernetes-statefulset/</id>
    <published>2020-10-27T03:58:31.000Z</published>
    <updated>2020-10-27T07:30:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>StatefulSet 是用来管理有状态应用的工作负载 API 对象。</p><p>StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。</p><p>和 Deployment 相同的是，StatefulSet 管理了基于相同容器定义的一组 Pod。但和 Deployment 不同的是，StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。这些 Pod 是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，每个 Pod 都有一个永久不变的 ID。</p><p>StatefulSet 和其他控制器使用相同的工作模式。你在 StatefulSet 对象 中定义你期望的状态，然后 StatefulSet 的 控制器 就会通过各种更新来达到那种你想要的状态。</p><h2 id="使用-StatefulSets"><a href="#使用-StatefulSets" class="headerlink" title="使用 StatefulSets"></a>使用 StatefulSets</h2><p>StatefulSets 对于需要满足以下一个或多个需求的应用程序很有价值:</p><ul><li>稳定的、唯一的网络标识符。</li><li>稳定的、持久的存储。</li><li>有序的、优雅的部署和缩放。</li><li>有序的、自动的滚动更新。</li></ul><p>在上面，稳定意味着 Pod 调度或重调度的整个过程是有持久性的。如果应用程序不需要任何稳定的标识符或有序的部署、删除或伸缩，则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如 Deployment 或者 ReplicaSet 可能更适用于您的无状态应用部署需要。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>给定 Pod 的存储必须由 <a href="https://github.com/kubernetes/examples/tree/master/staging/persistent-volume-provisioning/README.md" target="_blank" rel="noopener">PersistentVolume</a> 驱动 基于所请求的 <strong>storage class</strong> 来提供，或者由管理员预先提供。</li><li>删除或者收缩 StatefulSet 并 <strong>不会删除</strong> 它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。</li><li>StatefulSet 当前需要 <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services" target="_blank" rel="noopener">Headless Services</a> 来负责 Pod 的网络标识。用户需要负责创建此服务。</li><li>当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。</li><li>在默认 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies" target="_blank" rel="noopener">Pod 管理策略</a>(<strong>OrderedReady</strong>) 时使用 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#rolling-updates" target="_blank" rel="noopener">滚动更新</a>，可能进入需要 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#forced-rollback" target="_blank" rel="noopener">人工干预</a> 才能修复的损坏状态。</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>下面的示例演示了 StatefulSet 的组件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.template.metadata.labels</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">"nginx"</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># by default is 1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/nginx-slim:0.8</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">"my-storage-class"</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><ul><li>名为 <strong>nginx</strong> 的 Headless Service 用来控制网络域名。</li><li>名为 <strong>web</strong> 的 StatefulSet 有一个 Spec，它表明将在独立的 3 个 Pod 副本中启动 nginx 容器。</li><li><strong>volumeClaimTemplates</strong> 将通过 PersistentVolumes 驱动提供的 <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">PersistentVolumes</a> 来提供稳定的存储。</li></ul><p>StatefulSet 对象的 <strong>name</strong> 必须是合法的 <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names#dns-subdomain-names" target="_blank" rel="noopener">DNS 域名</a>。</p><h2 id="Pod-Selector"><a href="#Pod-Selector" class="headerlink" title="Pod Selector"></a>Pod Selector</h2><p>必须将 StatefullSet 的 <strong>.spec.selector</strong> 字段与 <strong>.spec.template.metadata.labels</strong> 设置相同的值。</p><p>在 Kubernetes 1.8 版本之前，忽略 <strong>.spec.selector</strong> 字段会获得默认设置值。在 1.8 及以后的版本中，未指定匹配的 Pod Selector 将在创建 StatefulSet 期间导致验证错误。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">Kubernetes StatefulSet</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;StatefulSet 是用来管理有状态应用的工作负载 API 对象。&lt;/p&gt;
&lt;p&gt;StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。&lt;/p&gt;
&lt;p&gt;和 Deployment 相同的是，Stateful</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="controllers" scheme="http://divinerapier.github.io/tags/controllers/"/>
    
  </entry>
  
</feed>
