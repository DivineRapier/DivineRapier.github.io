<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>お可愛いこと</title>
  
  
  <link href="http://divinerapier.github.io/atom.xml" rel="self"/>
  
  <link href="http://divinerapier.github.io/"/>
  <updated>2021-03-17T07:25:22.830Z</updated>
  <id>http://divinerapier.github.io/</id>
  
  <author>
    <name>divinerapier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubectl Exec 无响应</title>
    <link href="http://divinerapier.github.io/2021/03/16/kubectl-exec-hangs/"/>
    <id>http://divinerapier.github.io/2021/03/16/kubectl-exec-hangs/</id>
    <published>2021-03-16T06:15:29.000Z</published>
    <updated>2021-03-17T07:25:22.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在使用 <code>kubectl exec</code> 进入到 <code>pod</code> 时，进程会停止响应。</p><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><h3 id="确认-kubelet-问题"><a href="#确认-kubelet-问题" class="headerlink" title="确认 kubelet 问题"></a>确认 kubelet 问题</h3><p>由于 <code>kubectl exec</code> 这个命令的实际执行链路非常长，所以，先简单粗暴的确认一下问题是否与 <code>kubelet</code> 有关。</p><p>登录到异常 <code>pod</code> 所在的节点，查看问题容器的 <code>container id</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE                      COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">0253de11b8f1   nvidia/k8s-device-plugin   <span class="string">"nvidia-device-plugi…"</span>   10 hours ago   Up 10 hours             k8s_nvidia-device-plugin-ctr_nvidia-device-plugin-daemonset-jzrz7_kube-system_164ea21a-cc71-4cb0-8f83-6d160a720163_0</span><br><span class="line">ecaa1fd07ce8   k8s.gcr.io/pause:3.1       <span class="string">"/pause"</span>                 10 hours ago   Up 10 hours             k8s_POD_nvidia-device-plugin-daemonset-jzrz7_kube-system_164ea21a-cc71-4cb0-8f83-6d160a720163_0</span><br><span class="line">e318f67bce5c   bdb21b3e4fdf               <span class="string">"/bin/bash -c 'sleep…"</span>   15 hours ago   Up 15 hours             k8s_namespace-job_pod-w9lsq_xxxx_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_0</span><br><span class="line">c8d5fa9327ab   k8s.gcr.io/pause:3.1       <span class="string">"/pause"</span>                 15 hours ago   Up 15 hours             k8s_POD_job-w9lsq_xxxx_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_0</span><br></pre></td></tr></table></figure><p>确认异常容器为 <code>e318f67bce5c</code>。</p><p>验证是否可以进入容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -ti e318f67bce5c /bin/bash</span><br><span class="line"><span class="comment"># 无响应</span></span><br></pre></td></tr></table></figure><p>此处的现象与 <code>kubectl exec</code> 如出一辙。因此，可以确定 <code>docker</code> 之后的链路一定有问题，所以先忽略 <code>kubelet</code>。</p><h3 id="查看-Docker-Daemon-Profile"><a href="#查看-Docker-Daemon-Profile" class="headerlink" title="查看 Docker Daemon Profile"></a>查看 Docker Daemon Profile</h3><p><code>Docker Daemon</code> 进程监听的是 <code>UNIX Socket</code>，通过 <code>socat</code> 转为 <code>TCP</code> 流量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ socat -d -d TCP-LISTEN:8080,fork,<span class="built_in">bind</span>=10.31.200.27 UNIX:/var/run/docker.sock</span><br></pre></td></tr></table></figure><p>访问 <code>pprof</code> 的接口下载 <code>goroutine</code> 信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O all_goroutines http://10.31.200.27:8080/debug/pprof/goroutine?debug=2</span><br></pre></td></tr></table></figure><p>精简之后，得到如下重要信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">$ cat all_goroutines</span><br><span class="line"></span><br><span class="line">goroutine 87725 [select, 635 minutes]:</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/fifo.(*fifo).Write(0xc001768000, 0xc001282000, 0x1, 0x8000, 0x1, 0x0, 0x0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/fifo/fifo.go:195 +0xdb</span><br><span class="line">io.copyBuffer(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc001282000, 0x8000, 0x8000, 0x0, 0x1, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:404 +0x1fd</span><br><span class="line">io.CopyBuffer(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc001282000, 0x8000, 0x8000, 0xc0011e4f90, 0xc0011e4f50, 0x563d465a9277)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:375 +0x84</span><br><span class="line">github.com/docker/docker/pkg/pools.Copy(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc0019983b0, 0x1, 0x563d465d6bd8)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/pools/pools.go:81 +0xa6</span><br><span class="line">github.com/docker/docker/container/stream.(*Config).CopyToPipe.func2(0xc001092c60, 0x563d4954ce80, 0xc0019983b0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:142 +0xad</span><br><span class="line">created by github.com/docker/docker/container/stream.(*Config).CopyToPipe</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:141 +0xbb</span><br><span class="line"></span><br><span class="line">goroutine 87733 [select, 777 minutes]:</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc/internal/transport.(*Stream).waitOnHeader(0xc000a35a00)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/internal/transport/transport.go:318 +0xce</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc/internal/transport.(*Stream).RecvCompress(...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/internal/transport/transport.go:333</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.(*csAttempt).recvMsg(0xc000b12e00, 0x563d4934b1a0, 0xc001e683c0, 0x0, 0xc0012f0360, 0x84)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:871 +0x755</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.(*clientStream).RecvMsg.func1(0xc000b12e00, 0x84, 0x84)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:736 +0x48</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.(*clientStream).withRetry(0xc0013eeea0, 0xc000adab30, 0xc000adab00, 0xc0012f0360, 0xc0016eedb8)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:594 +0x9e</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.(*clientStream).RecvMsg(0xc0013eeea0, 0x563d4934b1a0, 0xc001e683c0, 0x0, 0x0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:735 +0x105</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.invoke(0x563d495784c0, 0xc001e684b0, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, 0xc000968380, 0xc0009fdda0, ...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/call.go:73 +0x13d</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/containerd.namespaceInterceptor.unary(0x563d4816cc49, 0x4, 0x563d49578440, 0xc000052038, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, ...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/grpc.go:35 +0xf4</span><br><span class="line">github.com/docker/docker/vendor/google.golang.org/grpc.(*ClientConn).Invoke(0xc000968380, 0x563d49578440, 0xc000052038, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, 0x0, ...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/call.go:35 +0x10b</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/containerd/api/services/tasks/v1.(*tasksClient).Start(0xc001574758, 0x563d49578440, 0xc000052038, 0xc00157aa40, 0x0, 0x0, 0x0, 0x1, 0xc0018b4210, 0xa2)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:1309 +0xd1</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/containerd.(*process).Start(0xc001e68390, 0x563d49578440, 0xc000052038, 0xc001634f40, 0x40)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/process.go:118 +0xef</span><br><span class="line">github.com/docker/docker/libcontainerd/remote.(*client).Exec(0xc0001ee0e0, 0x563d49578440, 0xc000052038, 0xc00098bb80, 0x40, 0xc001634f40, 0x40, 0xc0009a4690, 0x1, 0xc001df0b00, ...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/libcontainerd/remote/client.go:324 +0x8cc</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).ContainerExecStart(0xc00000c1e0, 0x563d49578440, 0xc000052038, 0xc000f5200b, 0x40, 0x563d495141e0, 0xc001998398, 0x7f72d86f9198, 0xc001998398, 0x0, ...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:263 +0xd51</span><br><span class="line">github.com/docker/docker/api/server/router/container.(*containerRouter).postContainerExecStart(0xc001516d40, 0x563d495784c0, 0xc001ca0f30, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x0, 0x0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/exec.go:132 +0x42a</span><br><span class="line">github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1(0x563d495784c0, 0xc001ca0f30, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x563d495784c0, 0xc001ca0f30)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26 +0x177</span><br><span class="line">github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1(0x563d495784c0, 0xc001ca0f00, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x203000, 0x203000)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62 +0x5fb</span><br><span class="line">github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1(0x563d495784c0, 0xc001ca0f00, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x563d495784c0, 0xc001ca0f00)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59 +0x826</span><br><span class="line">github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1(0x563d495683c0, 0xc000284d20, 0xc001fb6800)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141 +0x241</span><br><span class="line">net/http.HandlerFunc.ServeHTTP(0xc000afa820, 0x563d495683c0, 0xc000284d20, 0xc001fb6800)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2036 +0x46</span><br><span class="line">github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc00143c0c0, 0x563d495683c0, 0xc000284d20, 0xc001fb6600)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:210 +0xe4</span><br><span class="line">net/http.serverHandler.ServeHTTP(0xc000b6e000, 0x563d495683c0, 0xc000284d20, 0xc001fb6600)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2831 +0xa6</span><br><span class="line">net/http.(*conn).serve(0xc00140a0a0, 0x563d49578400, 0xc00190b3c0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:1919 +0x877</span><br><span class="line">created by net/http.(*Server).Serve</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2957 +0x386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goroutine 87735 [select, 773 minutes]:</span><br><span class="line">io.(*pipe).Write(0xc000456640, 0xc0011be000, 0x1, 0x8000, 0x0, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/pipe.go:87 +0x1fd</span><br><span class="line">io.(*PipeWriter).Write(0xc0019983a8, 0xc0011be000, 0x1, 0x8000, 0x1, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/pipe.go:153 +0x4e</span><br><span class="line">io.copyBuffer(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0xc0011be000, 0x8000, 0x8000, 0x0, 0x2, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:404 +0x1fd</span><br><span class="line">io.CopyBuffer(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0xc0011be000, 0x8000, 0x8000, 0xc000a32600, 0xc0001aca80, 0x7f72fccad008)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:375 +0x84</span><br><span class="line">github.com/docker/docker/pkg/pools.Copy(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0x4, 0xc0017e7f40, 0x563d465e2671)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/pools/pools.go:81 +0xa6</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).ContainerExecStart.func2(0xc0019983a8, 0x563d495141e0, 0xc001998398)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:204 +0x119</span><br><span class="line">created by github.com/docker/docker/daemon.(*Daemon).ContainerExecStart</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:201 +0x1a8c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goroutine 1428 [IO <span class="built_in">wait</span>, 990 minutes]:</span><br><span class="line">internal/poll.runtime_pollWait(0x7f72fcc11230, 0x72, 0xffffffffffffffff)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/runtime/netpoll.go:184 +0x57</span><br><span class="line">internal/poll.(*pollDesc).<span class="built_in">wait</span>(0xc001654d98, 0x72, 0x8001, 0x8000, 0xffffffffffffffff)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_poll_runtime.go:87 +0x47</span><br><span class="line">internal/poll.(*pollDesc).waitRead(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_poll_runtime.go:92</span><br><span class="line">internal/poll.(*FD).Read(0xc001654d80, 0xc001820000, 0x8000, 0x8000, 0x0, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_unix.go:169 +0x1d1</span><br><span class="line">os.(*File).<span class="built_in">read</span>(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/os/file_unix.go:259</span><br><span class="line">os.(*File).Read(0xc000a74130, 0xc001820000, 0x8000, 0x8000, 0xc00003c000, 0x563d490e5d40, 0x563d49134140)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/os/file.go:116 +0x73</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/fifo.(*fifo).Read(0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0x0, 0xc0004cfe00, 0x563d4661ce19)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/fifo/fifo.go:179 +0x165</span><br><span class="line">io.copyBuffer(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0x563d48efedc0, 0x0, 0xc000e90ce0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:402 +0x124</span><br><span class="line">io.CopyBuffer(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0xc000d50fc0, 0xc0004cff50, 0x563d465a9277)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:375 +0x84</span><br><span class="line">github.com/docker/docker/pkg/pools.Copy(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001149d40, 0xc00194d2c0, 0x7f72fcbc9c50)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/pools/pools.go:81 +0xa6</span><br><span class="line">github.com/docker/docker/container/stream.(*Config).CopyToPipe.func1.1(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc5e830, 0xc001149d40, 0xc000f09810)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:124 +0x73</span><br><span class="line">created by github.com/docker/docker/container/stream.(*Config).CopyToPipe.func1</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:123 +0x86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goroutine 364 [IO <span class="built_in">wait</span>, 990 minutes]:</span><br><span class="line">internal/poll.runtime_pollWait(0x7f72fcc11090, 0x72, 0xffffffffffffffff)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/runtime/netpoll.go:184 +0x57</span><br><span class="line">internal/poll.(*pollDesc).<span class="built_in">wait</span>(0xc00131c1f8, 0x72, 0x8001, 0x8000, 0xffffffffffffffff)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_poll_runtime.go:87 +0x47</span><br><span class="line">internal/poll.(*pollDesc).waitRead(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_poll_runtime.go:92</span><br><span class="line">internal/poll.(*FD).Read(0xc00131c1e0, 0xc00173c000, 0x8000, 0x8000, 0x0, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/internal/poll/fd_unix.go:169 +0x1d1</span><br><span class="line">os.(*File).<span class="built_in">read</span>(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/os/file_unix.go:259</span><br><span class="line">os.(*File).Read(0xc001998040, 0xc00173c000, 0x8000, 0x8000, 0x2b, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/os/file.go:116 +0x73</span><br><span class="line">github.com/docker/docker/vendor/github.com/containerd/fifo.(*fifo).Read(0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0x2b, 0x0, 0x0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/fifo/fifo.go:174 +0x1d8</span><br><span class="line">io.copyBuffer(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0x0, 0x0, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:402 +0x124</span><br><span class="line">io.CopyBuffer(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0xc000a8d790, 0xc000a8d750, 0x563d465a9277)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/io/io.go:375 +0x84</span><br><span class="line">github.com/docker/docker/pkg/pools.Copy(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc000f30660, 0x1, 0x563d465d6bd8)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/pools/pools.go:81 +0xa6</span><br><span class="line">github.com/docker/docker/container/stream.(*Config).CopyToPipe.func1.1(0x563d49510a40, 0xc0012ce520, 0x7f72fcc5e830, 0xc000f30660, 0xc000e93860)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:124 +0x73</span><br><span class="line">created by github.com/docker/docker/container/stream.(*Config).CopyToPipe.func1</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/stream/streams.go:123 +0x86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goroutine 101639 [semacquire, 120 minutes]:</span><br><span class="line">sync.runtime_SemacquireMutex(0xc000b3a1f4, 0xc00255f600, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/runtime/sema.go:71 +0x49</span><br><span class="line">sync.(*RWMutex).RLock(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/sync/rwmutex.go:50</span><br><span class="line">github.com/docker/docker/daemon/<span class="built_in">exec</span>.(*Store).List(0xc000b3a1e0, 0xed7e1415b, 0x0, 0x563d481ba268)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/<span class="built_in">exec</span>/exec.go:141 +0x1eb</span><br><span class="line">github.com/docker/docker/container.(*Container).GetExecIDs(...)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/container.go:464</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).getInspectData(0xc00000c1e0, 0xc001a1a280, 0x40, 0xc001a1a280, 0x0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:178 +0x5d2</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).ContainerInspectCurrent(0xc00000c1e0, 0xc000a9d390, 0x40, 0x0, 0x1, 0xc000c5f8c8, 0xc00055ddc0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:42 +0xb4</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).ContainerInspect(0xc00000c1e0, 0xc000a9d390, 0x40, 0x0, 0x563d4816c341, 0x4, 0xc000e0a700, 0x563d466a4f34, 0x8, 0x10)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:29 +0x11b</span><br><span class="line">github.com/docker/docker/api/server/router/container.(*containerRouter).getContainersByName(0xc001516d40, 0x563d495784c0, 0xc0014d4e40, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0xc000e0a701, 0xc00239a160)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/inspect.go:15 +0x116</span><br><span class="line">github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1(0x563d495784c0, 0xc0014d4e40, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x563d495784c0, 0xc0014d4e40)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26 +0x177</span><br><span class="line">github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1(0x563d495784c0, 0xc0014d4e10, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x203000, 0x203000)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62 +0x5fb</span><br><span class="line">github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1(0x563d495784c0, 0xc0014d4e10, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x563d495784c0, 0xc0014d4e10)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59 +0x826</span><br><span class="line">github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1(0x563d495683c0, 0xc0021d37a0, 0xc000a35d00)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141 +0x241</span><br><span class="line">net/http.HandlerFunc.ServeHTTP(0xc0013cf660, 0x563d495683c0, 0xc0021d37a0, 0xc000a35d00)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2036 +0x46</span><br><span class="line">github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc00143c0c0, 0x563d495683c0, 0xc0021d37a0, 0xc000a53400)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:210 +0xe4</span><br><span class="line">net/http.serverHandler.ServeHTTP(0xc000b6e000, 0x563d495683c0, 0xc0021d37a0, 0xc000a53400)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2831 +0xa6</span><br><span class="line">net/http.(*conn).serve(0xc001693c20, 0x563d49578400, 0xc0014a2480)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:1919 +0x877</span><br><span class="line">created by net/http.(*Server).Serve</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/net/http/server.go:2957 +0x386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goroutine 65 [semacquire, 776 minutes]:</span><br><span class="line">sync.runtime_SemacquireMutex(0xc000b3a1f4, 0xc002094d00, 0x0)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/runtime/sema.go:71 +0x49</span><br><span class="line">sync.(*RWMutex).RLock(...)</span><br><span class="line">  /usr/<span class="built_in">local</span>/go/src/sync/rwmutex.go:50</span><br><span class="line">github.com/docker/docker/daemon/<span class="built_in">exec</span>.(*Store).List(0xc000b3a1e0, 0xc0009a4a50, 0x1d, 0x1d)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/<span class="built_in">exec</span>/exec.go:141 +0x1eb</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).containerExecIds(0xc00000c1e0, 0xc002094f50)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:335 +0x95</span><br><span class="line">github.com/docker/docker/daemon.(*Daemon).execCommandGC(0xc00000c1e0)</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:312 +0x178</span><br><span class="line">created by github.com/docker/docker/daemon.NewDaemon</span><br><span class="line">  /root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/daemon.go:1136 +0x2aa0</span><br></pre></td></tr></table></figure><p>通过 <code>kubectl</code> 得到 <code>docker</code> 版本信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get node -o wide</span><br><span class="line"></span><br><span class="line">NAME                          STATUS   ROLES    AGE    VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">ai-k8s-n017.bj-sjs.btpoc.cn   Ready    &lt;none&gt;   39d    v1.16.15   10.31.200.27   &lt;none&gt;        CentOS Linux 7 (Core)   4.19.12-1.el7.elrepo.x86_64   docker://20.10.3</span><br></pre></td></tr></table></figure><p>下载 <code>docker</code> 源码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/github.com/docker/docker; <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/github.com/docker/docker</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/moby/moby.git .</span><br><span class="line"></span><br><span class="line">$ git checkout v20.10.3</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="goroutine-87725"><a href="#goroutine-87725" class="headerlink" title="goroutine 87725"></a>goroutine 87725</h5><p>根据栈信息，可以得到调用链为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// docker/container/stream/streams.go</span></span><br><span class="line"><span class="comment">// CopyToPipe connects streamconfig with a libcontainerd.IOPipe</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Config)</span> <span class="title">CopyToPipe</span><span class="params">(iop *cio.DirectIO)</span></span> &#123;</span><br><span class="line">  c.dio = iop</span><br><span class="line">  copyFunc := <span class="function"><span class="keyword">func</span><span class="params">(w io.Writer, r io.ReadCloser)</span></span> &#123;</span><br><span class="line">    c.wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> _, err := pools.Copy(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logrus.Errorf(<span class="string">"stream copy error: %v"</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">      r.Close()</span><br><span class="line">      c.wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> iop.Stdout != <span class="literal">nil</span> &#123;</span><br><span class="line">    copyFunc(c.Stdout(), iop.Stdout)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> iop.Stderr != <span class="literal">nil</span> &#123;</span><br><span class="line">    copyFunc(c.Stderr(), iop.Stderr)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> stdin := c.Stdin(); stdin != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> iop.Stdin != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        pools.Copy(iop.Stdin, stdin)</span><br><span class="line">        <span class="keyword">if</span> err := iop.Stdin.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">          logrus.Warnf(<span class="string">"failed to close stdin: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// docker/pkg/pools/pools.go</span></span><br><span class="line"><span class="comment">// Copy is a convenience wrapper which uses a buffer to avoid allocation in io.Copy.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst io.Writer, src io.Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">  buf := buffer32KPool.Get()</span><br><span class="line">  written, err = io.CopyBuffer(dst, src, *buf)</span><br><span class="line">  buffer32KPool.Put(buf)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// io/io.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyBuffer</span><span class="params">(dst Writer, src Reader, buf []<span class="keyword">byte</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> buf != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(buf) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"empty buffer in CopyBuffer"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copyBuffer(dst, src, buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copyBuffer</span><span class="params">(dst Writer, src Reader, buf []<span class="keyword">byte</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// If the reader has a WriteTo method, use it to do the copy.</span></span><br><span class="line">  <span class="comment">// Avoids an allocation and a copy.</span></span><br><span class="line">  <span class="keyword">if</span> wt, ok := src.(WriterTo); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> wt.WriteTo(dst)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> written, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write from byte array to a fifo.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *fifo)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> f.flag&amp;(syscall.O_WRONLY|syscall.O_RDWR) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, ErrWrToRDONLY</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-f.opened:</span><br><span class="line">    <span class="keyword">return</span> f.file.Write(b)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">select</span> &#123; <span class="comment">// 阻塞在这里</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-f.opened:</span><br><span class="line">    <span class="keyword">return</span> f.file.Write(b)</span><br><span class="line">  <span class="keyword">case</span> &lt;-f.closed:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, ErrWriteClosed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>goroutine</code> 阻塞在 <code>*fifo.Write</code> 函数中，只有当 <code>fifo.opened</code> 可读时，可以写入数据，当 <code>fifo.closed</code> 可读时，返回一个错误。</p><p>因此，找到有哪些情况 <code>fifo.opened</code> 可读，最后只找到了一种情况:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// docker/vendor/github.com/containerd/fifo/fifo.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OpenFifo opens a fifo. Returns io.ReadWriteCloser.</span></span><br><span class="line"><span class="comment">// Context can be used to cancel this function until open(2) has not returned.</span></span><br><span class="line"><span class="comment">// Accepted flags:</span></span><br><span class="line"><span class="comment">// - syscall.O_CREAT - create new fifo if one doesn't exist</span></span><br><span class="line"><span class="comment">// - syscall.O_RDONLY - open fifo only from reader side</span></span><br><span class="line"><span class="comment">// - syscall.O_WRONLY - open fifo only from writer side</span></span><br><span class="line"><span class="comment">// - syscall.O_RDWR - open fifo from both sides, never block on syscall level</span></span><br><span class="line"><span class="comment">// - syscall.O_NONBLOCK - return io.ReadWriteCloser even if other side of the</span></span><br><span class="line"><span class="comment">//     fifo isn't open. read/write will be connected after the actual fifo is</span></span><br><span class="line"><span class="comment">//     open or after fifo is closed.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意 fn 表示 filename，不是 function...</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFifo</span><span class="params">(ctx context.Context, fn <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm os.FileMode)</span> <span class="params">(io.ReadWriteCloser, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> openFifo(ctx, fn, flag, perm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openFifo</span><span class="params">(ctx context.Context, fn <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm os.FileMode)</span> <span class="params">(*fifo, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> _, err := os.Stat(fn); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> os.IsNotExist(err) &amp;&amp; flag&amp;syscall.O_CREAT != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> err := mkfifo(fn, <span class="keyword">uint32</span>(perm&amp;os.ModePerm)); err != <span class="literal">nil</span> &amp;&amp; !os.IsExist(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"error creating fifo %v"</span>, fn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  block := flag&amp;syscall.O_NONBLOCK == <span class="number">0</span> || flag&amp;syscall.O_RDWR != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  flag &amp;= ^syscall.O_CREAT</span><br><span class="line">  flag &amp;= ^syscall.O_NONBLOCK</span><br><span class="line"></span><br><span class="line">  h, err := getHandle(fn)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f := &amp;fifo&#123;</span><br><span class="line">    handle:  h,</span><br><span class="line">    flag:    flag,</span><br><span class="line">    opened:  <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    closed:  <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    closing: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  wg := leakCheckWg</span><br><span class="line">  <span class="keyword">if</span> wg != <span class="literal">nil</span> &#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> wg != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-f.opened:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        f.Close()</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-f.opened:</span><br><span class="line">    <span class="keyword">case</span> &lt;-f.closed:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 这个 goroutine 中执行打开文件操作</span></span><br><span class="line">    <span class="keyword">if</span> wg != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> file *os.File</span><br><span class="line">    fn, err := h.Path()</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">      file, err = os.OpenFile(fn, flag, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-f.closing:</span><br><span class="line">      <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">          err = ctx.Err()</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          err = errors.Errorf(<span class="string">"fifo %v was closed before opening"</span>, h.Name())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> file != <span class="literal">nil</span> &#123;</span><br><span class="line">          file.Close()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      f.closedOnce.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        f.err = err</span><br><span class="line">        <span class="built_in">close</span>(f.closed)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    f.file = file</span><br><span class="line">    <span class="built_in">close</span>(f.opened) <span class="comment">// 有且仅有一处可以触发 fifo.opened</span></span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">if</span> block &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-f.opened:</span><br><span class="line">    <span class="keyword">case</span> &lt;-f.closed:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, f.err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OpenFifo</code> 与 <code>fifo.Write</code> 两个函数的调用一定是序列化的。因此，当成功获得一个 <code>fifo</code> 对象时，<code>fifo.opened</code> 就已经处于被关闭状态。并且，<code>fifo.opened</code> 是通过 <code>close(fifo.opened)</code> 的方式触发可读操作，所以，可以确认 <code>fifo.Write</code> 函数只可以写入一次:</p><ul><li>首次调用 <code>fifo.Write</code> 时，在第一个 <code>select</code> 中执行 <code>case &lt;-f.opened:</code> 语句，向 <code>fifo</code> 中写入数据。</li><li>再次调用 <code>fifo.Write</code> 时，在第二个 <code>select</code> 中执行 <code>default:</code> 语句，等待 <code>fifo.closed</code> 可读事件。</li></ul><p>综上，当前 <code>goroutine</code> 在等待 <code>fifo.Close</code>。</p><h5 id="goroutine-87733"><a href="#goroutine-87733" class="headerlink" title="goroutine 87733"></a>goroutine 87733</h5><p>根据堆栈信息，从下往上阅读，第一个重要的函数调用为 <code>docker/api/server/router/container/exec.go:132</code>，其中核心的逻辑如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// docker/api/server/router/container/exec.go:132</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO(vishh): Refactor the code to avoid having to specify stream config as part of both create and start.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *containerRouter)</span> <span class="title">postContainerExecStart</span><span class="params">(ctx context.Context, w http.ResponseWriter, r *http.Request, vars <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    execName                  = vars[<span class="string">"name"</span>]</span><br><span class="line">    stdin, inStream           io.ReadCloser</span><br><span class="line">    stdout, stderr, outStream io.Writer</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> !execStartCheck.Detach &#123;</span><br><span class="line">    inStream, outStream, _ = httputils.HijackConnection(w)</span><br><span class="line"></span><br><span class="line">    stdin = inStream</span><br><span class="line">    stdout = outStream</span><br><span class="line">    <span class="keyword">if</span> !execStartCheck.Tty &#123;</span><br><span class="line">      stderr = stdcopy.NewStdWriter(outStream, stdcopy.Stderr)</span><br><span class="line">      stdout = stdcopy.NewStdWriter(outStream, stdcopy.Stdout)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now run the user process in container.</span></span><br><span class="line">  <span class="comment">// Maybe we should we pass ctx here if we're not detaching?</span></span><br><span class="line">  <span class="keyword">if</span> err := s.backend.ContainerExecStart(context.Background(), execName, stdin, stdout, stderr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> execStartCheck.Detach &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>s.backend.ContainerExecStart</code> 开启 <code>exec</code> 命令。</p><p><code>s.backend</code> 的类型是一个接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Backend <span class="keyword">interface</span> &#123;</span><br><span class="line">  commitBackend</span><br><span class="line">  execBackend</span><br><span class="line">  copyBackend</span><br><span class="line">  stateBackend</span><br><span class="line">  monitorBackend</span><br><span class="line">  attachBackend</span><br><span class="line">  systemBackend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其只有一个具体实现 <code>docker/daemon/daemon.go#Daemon</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContainerExecStart starts a previously set up exec instance. The</span></span><br><span class="line"><span class="comment">// std streams are set up.</span></span><br><span class="line"><span class="comment">// If ctx is cancelled, the process is terminated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(daemon *Daemon)</span> <span class="title">ContainerExecStart</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>, stdin io.Reader, stdout io.Writer, stderr io.Writer)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    cStdin           io.ReadCloser</span><br><span class="line">    cStdout, cStderr io.Writer</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  ec, err := daemon.getExecConfig(name)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errExecNotFound(name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ec.Lock()</span><br><span class="line">  <span class="keyword">if</span> ec.ExitCode != <span class="literal">nil</span> &#123;</span><br><span class="line">    ec.Unlock()</span><br><span class="line">    err := fmt.Errorf(<span class="string">"Error: Exec command %s has already run"</span>, ec.ID)</span><br><span class="line">    <span class="keyword">return</span> errdefs.Conflict(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ec.Running &#123;</span><br><span class="line">    ec.Unlock()</span><br><span class="line">    <span class="keyword">return</span> errdefs.Conflict(fmt.Errorf(<span class="string">"Error: Exec command %s is already running"</span>, ec.ID))</span><br><span class="line">  &#125;</span><br><span class="line">  ec.Running = <span class="literal">true</span></span><br><span class="line">  ec.Unlock()</span><br><span class="line"></span><br><span class="line">  c := daemon.containers.Get(ec.ContainerID)</span><br><span class="line">  logrus.Debugf(<span class="string">"starting exec command %s in container %s"</span>, ec.ID, c.ID)</span><br><span class="line">  attributes := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">"execID"</span>: ec.ID,</span><br><span class="line">  &#125;</span><br><span class="line">  daemon.LogContainerEventWithAttributes(c, <span class="string">"exec_start: "</span>+ec.Entrypoint+<span class="string">" "</span>+strings.Join(ec.Args, <span class="string">" "</span>), attributes)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      ec.Lock()</span><br><span class="line">      ec.Running = <span class="literal">false</span></span><br><span class="line">      exitCode := <span class="number">126</span></span><br><span class="line">      ec.ExitCode = &amp;exitCode</span><br><span class="line">      <span class="keyword">if</span> err := ec.CloseStreams(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logrus.Errorf(<span class="string">"failed to cleanup exec %s streams: %s"</span>, c.ID, err)</span><br><span class="line">      &#125;</span><br><span class="line">      ec.Unlock()</span><br><span class="line">      c.ExecCommands.Delete(ec.ID, ec.Pid)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ec.OpenStdin &amp;&amp; stdin != <span class="literal">nil</span> &#123;</span><br><span class="line">    r, w := io.Pipe()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> w.Close()</span><br><span class="line">      <span class="keyword">defer</span> logrus.Debug(<span class="string">"Closing buffered stdin pipe"</span>)</span><br><span class="line">      pools.Copy(w, stdin)</span><br><span class="line">    &#125;()</span><br><span class="line">    cStdin = r</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ec.OpenStdout &#123;</span><br><span class="line">    cStdout = stdout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ec.OpenStderr &#123;</span><br><span class="line">    cStderr = stderr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ec.OpenStdin &#123;</span><br><span class="line">    ec.StreamConfig.NewInputPipes()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ec.StreamConfig.NewNopInputPipe()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p := &amp;specs.Process&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> runtime.GOOS != <span class="string">"windows"</span> &#123;</span><br><span class="line">    ctr, err := daemon.containerdCli.LoadContainer(ctx, ec.ContainerID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    spec, err := ctr.Spec(ctx)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    p = spec.Process</span><br><span class="line">  &#125;</span><br><span class="line">  p.Args = <span class="built_in">append</span>([]<span class="keyword">string</span>&#123;ec.Entrypoint&#125;, ec.Args...)</span><br><span class="line">  p.Env = ec.Env</span><br><span class="line">  p.Cwd = ec.WorkingDir</span><br><span class="line">  p.Terminal = ec.Tty</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p.Cwd == <span class="string">""</span> &#123;</span><br><span class="line">    p.Cwd = <span class="string">"/"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := daemon.execSetPlatformOpt(c, ec, p); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  attachConfig := stream.AttachConfig&#123;</span><br><span class="line">    TTY:        ec.Tty,</span><br><span class="line">    UseStdin:   cStdin != <span class="literal">nil</span>,</span><br><span class="line">    UseStdout:  cStdout != <span class="literal">nil</span>,</span><br><span class="line">    UseStderr:  cStderr != <span class="literal">nil</span>,</span><br><span class="line">    Stdin:      cStdin,</span><br><span class="line">    Stdout:     cStdout,</span><br><span class="line">    Stderr:     cStderr,</span><br><span class="line">    DetachKeys: ec.DetachKeys,</span><br><span class="line">    CloseStdin: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  ec.StreamConfig.AttachStreams(&amp;attachConfig)</span><br><span class="line">  attachErr := ec.StreamConfig.CopyStreams(ctx, &amp;attachConfig)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Synchronize with libcontainerd event loop</span></span><br><span class="line">  ec.Lock()</span><br><span class="line">  c.ExecCommands.Lock()</span><br><span class="line">  systemPid, err := daemon.containerd.Exec(ctx, c.ID, ec.ID, p, cStdin != <span class="literal">nil</span>, ec.InitializeStdio)</span><br><span class="line">  <span class="comment">// the exec context should be ready, or error happened.</span></span><br><span class="line">  <span class="comment">// close the chan to notify readiness</span></span><br><span class="line">  <span class="built_in">close</span>(ec.Started)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    c.ExecCommands.Unlock()</span><br><span class="line">    ec.Unlock()</span><br><span class="line">    <span class="keyword">return</span> translateContainerdStartErr(ec.Entrypoint, ec.SetExitCode, err)</span><br><span class="line">  &#125;</span><br><span class="line">  ec.Pid = systemPid</span><br><span class="line">  c.ExecCommands.Unlock()</span><br><span class="line">  ec.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    logrus.Debugf(<span class="string">"Sending TERM signal to process %v in container %v"</span>, name, c.ID)</span><br><span class="line">    daemon.containerd.SignalProcess(ctx, c.ID, name, <span class="keyword">int</span>(signal.SignalMap[<span class="string">"TERM"</span>]))</span><br><span class="line"></span><br><span class="line">    timeout := time.NewTimer(termProcessTimeout)</span><br><span class="line">    <span class="keyword">defer</span> timeout.Stop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-timeout.C:</span><br><span class="line">      logrus.Infof(<span class="string">"Container %v, process %v failed to exit within %v of signal TERM - using the force"</span>, c.ID, name, termProcessTimeout)</span><br><span class="line">      daemon.containerd.SignalProcess(ctx, c.ID, name, <span class="keyword">int</span>(signal.SignalMap[<span class="string">"KILL"</span>]))</span><br><span class="line">    <span class="keyword">case</span> &lt;-attachErr:</span><br><span class="line">      <span class="comment">// TERM signal worked</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx.Err()</span><br><span class="line">  <span class="keyword">case</span> err := &lt;-attachErr:</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> _, ok := err.(term.EscapeError); !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> errdefs.System(errors.Wrap(err, <span class="string">"exec attach failed"</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      attributes := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"execID"</span>: ec.ID,</span><br><span class="line">      &#125;</span><br><span class="line">      daemon.LogContainerEventWithAttributes(c, <span class="string">"exec_detach"</span>, attributes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据调用栈可以看到，接下来会执行到 <code>daemon.containerd.Exec</code> 函数调用。首先将上述代码精简:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getExecConfig looks up the exec instance by name. If the container associated</span></span><br><span class="line"><span class="comment">// with the exec instance is stopped or paused, it will return an error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(daemon *Daemon)</span> <span class="title">getExecConfig</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(*exec.Config, error)</span></span> &#123;</span><br><span class="line">  ec := daemon.execCommands.Get(name)</span><br><span class="line"></span><br><span class="line">  ctr := daemon.containers.Get(ec.ContainerID)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> ec, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(daemon *Daemon)</span> <span class="title">ContainerExecStart</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>, stdin io.Reader, stdout io.Writer, stderr io.Writer)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  ec, _ := daemon.getExecConfig(name)</span><br><span class="line">  c := daemon.containers.Get(ec.ContainerID)</span><br><span class="line">  <span class="comment">// Synchronize with libcontainerd event loop</span></span><br><span class="line">  ec.Lock()</span><br><span class="line">  c.ExecCommands.Lock()</span><br><span class="line">  systemPid, err := daemon.containerd.Exec(ctx, c.ID, ec.ID, p, cStdin != <span class="literal">nil</span>, ec.InitializeStdio)</span><br><span class="line">  <span class="comment">// the exec context should be ready, or error happened.</span></span><br><span class="line">  <span class="comment">// close the chan to notify readiness</span></span><br><span class="line">  <span class="built_in">close</span>(ec.Started)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    c.ExecCommands.Unlock()</span><br><span class="line">    ec.Unlock()</span><br><span class="line">    <span class="keyword">return</span> translateContainerdStartErr(ec.Entrypoint, ec.SetExitCode, err)</span><br><span class="line">  &#125;</span><br><span class="line">  ec.Pid = systemPid</span><br><span class="line">  c.ExecCommands.Unlock()</span><br><span class="line">  ec.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，通过 <code>name</code> 获取到了一个 <code>ec</code>，通过 <code>ec.ContainerID</code> 获取到了 <code>container</code>，然后对 <code>ec</code> 与 <code>container.ExecCommands</code> 加锁。</p><p>根据调用链可知当前 <code>goroutine</code> 执行进入了 <code>daemon.containerd.Exec</code>，所以执行函数之前锁住的两把锁都没有被释放，那么现在就有一个问题: 锁的粒度有多大？</p><p>为了解决这个疑问，就需要找到锁的源头: <code>name</code> 的来源，因为 <code>name</code> -&gt; <code>ec</code> -&gt; <code>Lock</code> / <code>Container</code> -&gt; <code>Lock</code>。</p><p>回溯调用关系，<code>*Daemon.ContainerExecStart</code> 的调用者是路由回调函数 <code>*containerRouter.postContainerExecStart</code>，<code>*Daemon.ContainerExecStart</code> 的入参 <code>name</code> 是 <code>*containerRouter.postContainerExecStart</code> 的局部变量 <code>execName</code>。近一步回溯，<code>execName</code> 的来源是路由变量 <code>:name</code>，路由如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.NewPostRoute(<span class="string">"/exec/&#123;name:.*&#125;/start"</span>, r.postContainerExecStart)</span><br></pre></td></tr></table></figure><p>为了知道 <code>name</code> 是什么，则需要查看 <code>Docker</code> 的 <code>API</code> 文档。</p><p>首先，通过命令 <code>docker version</code> 可以确定 <code>docker v20.10.3</code> 使用的 <code>API</code> 版本如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.3</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        48d30b5</span><br><span class="line"> Built:             Fri Jan 29 14:34:14 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.3</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       46229ca</span><br><span class="line">  Built:            Fri Jan 29 14:32:37 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.3</span><br><span class="line">  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b</span><br><span class="line"> nvidia:</span><br><span class="line">  Version:          1.0.0-rc92</span><br><span class="line">  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>即版本是 <code>API version: 1.41 (minimum version 1.12)</code>。</p><p>通过查阅 <a href="https://docs.docker.com/engine/api" target="_blank" rel="noopener">Docker API Reference</a> 获取具体的 <a href="https://docs.docker.com/engine/api/v1.41/#operation/ExecStart" target="_blank" rel="noopener"><code>API</code></a>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /exec/&#123;id&#125;/start</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "Detach": false,</span><br><span class="line">  "Tty": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Path Parameters:</p><ul><li>id<ul><li>string Required</li><li>Exec instance ID</li></ul></li></ul></blockquote><p>易得，<code>API</code> 文档中的 <code>id</code> 就是代码中的 <code>name</code>。</p><p>而 <code>exec id</code> 是通过如下 <a href="https://docs.docker.com/engine/api/v1.41/#operation/ContainerExec" target="_blank" rel="noopener"><code>API</code></a> 获得(当然，这个属于盲猜，应该可以通过查阅 <code>docker client</code> 的 <code>exec</code> 命令部分的源码就能确定):</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /containers/&#123;id&#125;/exec</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "AttachStdin": false,</span><br><span class="line">  "AttachStdout": true,</span><br><span class="line">  "AttachStderr": true,</span><br><span class="line">  "DetachKeys": "ctrl-p,ctrl-q",</span><br><span class="line">  "Tty": false,</span><br><span class="line">  "Cmd": [</span><br><span class="line">    "date"</span><br><span class="line">  ],</span><br><span class="line">  "Env": [</span><br><span class="line">    "FOO=bar",</span><br><span class="line">    "BAZ=quux"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Path Parameters:</p><ul><li>id<ul><li>string Required</li><li>ID or name of container</li></ul></li></ul></blockquote><p>因此，可以得出结论，先调用 <code>ContainerExec</code> 通过 <code>container id</code> 获取 <code>exec id</code>，然后使用上面获得的 <code>exec id</code>调用 <code>ExecStart</code>。</p><p>但是，到此为止只是清楚了逻辑关系，还无法解答锁的粒度，或许应该看一下 <code>ContainerExec</code> 的逻辑。</p><p>根据路由信息 <code>router.NewPostRoute(&quot;/containers/{name:.*}/exec&quot;, r.postContainerExecCreate)</code>，找到 <code>ContainerExec</code> 的处理函数 <code>postContainerExecCreate</code> 中关于 <code>exec id</code> 部分的逻辑:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *containerRouter)</span> <span class="title">postContainerExecCreate</span><span class="params">(ctx context.Context, w http.ResponseWriter, r *http.Request, vars <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  name := vars[<span class="string">"name"</span>]</span><br><span class="line"></span><br><span class="line">  execConfig := &amp;types.ExecConfig&#123;&#125;</span><br><span class="line">  json.NewDecoder(r.Body).Decode(execConfig)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register an instance of Exec in container.</span></span><br><span class="line">  id, err := s.backend.ContainerExecCreate(name, execConfig)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    logrus.Errorf(<span class="string">"Error setting up exec command in container %s: %v"</span>, name, err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> httputils.WriteJSON(w, http.StatusCreated, &amp;types.IDResponse&#123;</span><br><span class="line">    ID: id,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContainerExecCreate sets up an exec in a running container.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(daemon *Daemon)</span> <span class="title">ContainerExecCreate</span><span class="params">(name <span class="keyword">string</span>, config *types.ExecConfig)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 通过 container name 获取当前处于活跃状态的 container</span></span><br><span class="line">  cntr, _ := daemon.getActiveContainer(name)</span><br><span class="line"></span><br><span class="line">  cmd := strslice.StrSlice(config.Cmd)</span><br><span class="line">  entrypoint, args := daemon.getEntrypointAndArgs(strslice.StrSlice&#123;&#125;, cmd)</span><br><span class="line"></span><br><span class="line">  keys := []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> config.DetachKeys != <span class="string">""</span> &#123;</span><br><span class="line">    keys, _ = term.ToBytes(config.DetachKeys)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execConfig := exec.NewConfig()</span><br><span class="line">  execConfig.OpenStdin = config.AttachStdin</span><br><span class="line">  execConfig.OpenStdout = config.AttachStdout</span><br><span class="line">  execConfig.OpenStderr = config.AttachStderr</span><br><span class="line">  <span class="comment">// config 的 container id 就是 container.ID 即容器的 ID</span></span><br><span class="line">  execConfig.ContainerID = cntr.ID</span><br><span class="line">  execConfig.DetachKeys = keys</span><br><span class="line">  execConfig.Entrypoint = entrypoint</span><br><span class="line">  execConfig.Args = args</span><br><span class="line">  execConfig.Tty = config.Tty</span><br><span class="line">  execConfig.Privileged = config.Privileged</span><br><span class="line">  execConfig.User = config.User</span><br><span class="line">  execConfig.WorkingDir = config.WorkingDir</span><br><span class="line"></span><br><span class="line">  daemon.registerExecCommand(cntr, execConfig)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> execConfig.ID, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewConfig initializes the a new exec configuration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConfig</span><span class="params">()</span> *<span class="title">Config</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Config&#123;</span><br><span class="line">      ID:           stringid.GenerateRandomID(),</span><br><span class="line">      StreamConfig: stream.NewConfig(),</span><br><span class="line">      Started:      <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(daemon *Daemon)</span> <span class="title">registerExecCommand</span><span class="params">(container *container.Container, config *exec.Config)</span></span> &#123;</span><br><span class="line">  <span class="comment">// Storing execs in container in order to kill them gracefully whenever the container is stopped or removed.</span></span><br><span class="line">  container.ExecCommands.Add(config.ID, config)</span><br><span class="line">  <span class="comment">// Storing execs in daemon for easy access via Engine API.</span></span><br><span class="line">  daemon.execCommands.Add(config.ID, config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，逻辑关系就比较清晰了。<code>postContainerExecCreate</code> 的路由参数 <code>name</code> 就是 <code>container id</code>。<code>*Daemon.ContainerExecCreate</code> 内部创建了一个随机的 <code>exec id</code> 保存在 <code>execConfig</code> 中，同时在 <code>execConfig</code> 持有了 <code>container id</code>。所以，对于一个 <code>container</code> 的多次 <code>exec</code> 命令使用不同的 <code>exec id</code>，但他们共同持有相同的 <code>container id</code>。而后调用 <code>*Daemon.registerExecCommand</code> 将 <code>execConfig</code> 以 <code>exec id</code> 作为索引添加到缓存中。</p><p>回到函数 <code>func (daemon *Daemon) ContainerExecStart</code>，通过 <code>exec id</code> 可以获取到不同的 <code>ec</code> 对象，调用 <code>ec.Lock()</code> 的锁粒度为 <code>exec id</code>，对于同一个 <code>container</code> 的多次执行 <code>exec</code>，他们持有的 <code>container id</code> 是相同的，因此 <code>c.ExecCommands.Lock()</code> 的锁粒度是 <code>container</code> 级别。</p><p>综上所述，可以确定当前 <code>goroutine</code> 未释放两把锁资源，会导致之后的 <code>exec</code> 操作是一定会失败的。但阻塞在这里的原因还不清晰。从函数调用栈可以看到当前 <code>goroutine</code> 在等待 <code>gRPC</code> 的响应。</p><p><code>daemon.containerd</code> 的类型是接口 <code>github.com/docker/docker/libcontainerd/types.Client</code>，其实现者是位于 <code>docker/libcontainerd/remote/client.go</code> 的 <code>struct client</code> 类型:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> client <span class="keyword">struct</span> &#123;</span><br><span class="line">  client   *containerd.Client</span><br><span class="line">  stateDir <span class="keyword">string</span></span><br><span class="line">  logger   *logrus.Entry</span><br><span class="line">  ns       <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">  backend         libcontainerdtypes.Backend</span><br><span class="line">  eventQ          queue.Queue</span><br><span class="line">  oomMu           sync.Mutex</span><br><span class="line">  oom             <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span></span><br><span class="line">  v2runcoptionsMu sync.Mutex</span><br><span class="line">  <span class="comment">// v2runcoptions is used for copying options specified on Create() to Start()</span></span><br><span class="line">  v2runcoptions <span class="keyword">map</span>[<span class="keyword">string</span>]v2runcoptions.Options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其内部包含字段 <code>client</code> 是 <code>github.com/containerd/containerd/client.go</code> 的 <code>Client</code> 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// docker/libcontainerd/remote/client.go:L265</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exec creates exec process.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The containerd client calls Exec to register the exec config in the shim side.</span></span><br><span class="line"><span class="comment">// When the client calls Start, the shim will create stdin fifo if needs. But</span></span><br><span class="line"><span class="comment">// for the container main process, the stdin fifo will be created in Create not</span></span><br><span class="line"><span class="comment">// the Start call. stdinCloseSync channel should be closed after Start exec</span></span><br><span class="line"><span class="comment">// process.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, containerID, processID <span class="keyword">string</span>, spec *specs.Process, withStdin <span class="keyword">bool</span>, attachStdio libcontainerdtypes.StdioCallback)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 根据 containerID，获取到对应的 container 对象，</span></span><br><span class="line">  <span class="comment">// ctr 的类型是接口 github.com/containerd/containerd.Container</span></span><br><span class="line">  <span class="comment">// 其具体实现者是类型 *github.com/containerd/containerd.container</span></span><br><span class="line">  ctr, err := c.getContainer(ctx, containerID)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Task is the executable object within containerd</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 通过 container 创建一个 github.com/containerd/containerd.task 类型，其实现了 Task 接口</span></span><br><span class="line">  <span class="comment">// 对 container 的每一次操作，都是一个 Task</span></span><br><span class="line">  t, err := ctr.Task(ctx, <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> containerderrors.IsNotFound(err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>, errors.WithStack(errdefs.InvalidParameter(errors.New(<span class="string">"container is not running"</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, wrapError(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    p              containerd.Process</span><br><span class="line">    rio            cio.IO</span><br><span class="line">    stdinCloseSync = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  labels, err := ctr.Labels(ctx)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, wrapError(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fifos := newFIFOSet(labels[DockerContainerBundlePath], processID, withStdin, spec.Terminal)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> rio != <span class="literal">nil</span> &#123;</span><br><span class="line">        rio.Cancel()</span><br><span class="line">        rio.Close()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Exec creates a new process inside the task</span></span><br><span class="line"></span><br><span class="line">  p, err = t.Exec(ctx, processID, spec, <span class="function"><span class="keyword">func</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(cio.IO, error)</span></span> &#123;</span><br><span class="line">    rio, err = c.createIO(fifos, containerID, processID, stdinCloseSync, attachStdio)</span><br><span class="line">    <span class="keyword">return</span> rio, err</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">close</span>(stdinCloseSync)</span><br><span class="line">    <span class="keyword">if</span> containerderrors.IsAlreadyExists(err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>, errors.WithStack(errdefs.Conflict(errors.New(<span class="string">"id already in use"</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, wrapError(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Signal c.createIO that it can call CloseIO</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// the stdin of exec process will be created after p.Start in containerd</span></span><br><span class="line">  <span class="keyword">defer</span> <span class="built_in">close</span>(stdinCloseSync)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err = p.Start(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// use new context for cleanup because old one may be cancelled by user, but leave a timeout to make sure</span></span><br><span class="line">    <span class="comment">// we are not waiting forever if containerd is unresponsive or to work around fifo cancelling issues in</span></span><br><span class="line">    <span class="comment">// older containerd-shim</span></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">45</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line">    p.Delete(ctx)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, wrapError(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">int</span>(p.Pid()), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下是函数 <code>task.Exec</code>，其内部调用了 <code>github.com/containerd/containerd.Client.TaskService().Exec</code> 函数执行 <code>Exec</code> 操作:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *task)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, id <span class="keyword">string</span>, spec *specs.Process, ioCreate cio.Creator)</span> <span class="params">(_ Process, err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> id == <span class="string">""</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(errdefs.ErrInvalidArgument, <span class="string">"exec id must not be empty"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  i, err := ioCreate(id)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; i != <span class="literal">nil</span> &#123;</span><br><span class="line">      i.Cancel()</span><br><span class="line">      i.Close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  any, err := typeurl.MarshalAny(spec)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  cfg := i.Config()</span><br><span class="line">  request := &amp;tasks.ExecProcessRequest&#123;</span><br><span class="line">    ContainerID: t.id,</span><br><span class="line">    ExecID:      id,</span><br><span class="line">    Terminal:    cfg.Terminal,</span><br><span class="line">    Stdin:       cfg.Stdin,</span><br><span class="line">    Stdout:      cfg.Stdout,</span><br><span class="line">    Stderr:      cfg.Stderr,</span><br><span class="line">    Spec:        any,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这是一个 gRPC  请求</span></span><br><span class="line">  <span class="keyword">if</span> _, err := t.client.TaskService().Exec(ctx, request); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    i.Cancel()</span><br><span class="line">    i.Wait()</span><br><span class="line">    i.Close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errdefs.FromGRPC(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &amp;process&#123;</span><br><span class="line">    id:   id,</span><br><span class="line">    task: t,</span><br><span class="line">    io:   i,</span><br><span class="line">  &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start starts the exec process</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *process)</span> <span class="title">Start</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  r, err := p.task.client.TaskService().Start(ctx, &amp;tasks.StartRequest&#123;</span><br><span class="line">    ContainerID: p.task.id,</span><br><span class="line">    ExecID:      p.id,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p.io != <span class="literal">nil</span> &#123;</span><br><span class="line">      p.io.Cancel()</span><br><span class="line">      p.io.Wait()</span><br><span class="line">      p.io.Close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errdefs.FromGRPC(err)</span><br><span class="line">  &#125;</span><br><span class="line">  p.pid = r.Pid</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h3><p>查看容器的 <code>pid</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect -f &#123;&#123;.State.Pid&#125;&#125; e318f67bce5c</span><br><span class="line"></span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>但很遗憾，当前无法执行 <code>docker inspect</code>。尝试根据 <code>container id</code> 获取 <code>pid</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep e318f67bce5c</span><br><span class="line">root      2645 12397  0 3月15 ?       00:00:00 /usr/bin/runc --root /var/run/docker/runtime-runc/moby --<span class="built_in">log</span> /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/log.json --<span class="built_in">log</span>-format json <span class="built_in">exec</span> --process /tmp/runc-process256765632 --console-socket /tmp/pty518048165/pty.sock --detach --pid-file /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/12895df315fe38432c96579dd329ac4468f373781ba36bf272bbe3829a4afbd6.pid e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b</span><br><span class="line">root     12397     1  0 3月15 ?       00:00:08 /usr/bin/containerd-shim-runc-v2 -namespace moby -id e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b -address /run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line">$ ps aux | grep e318f67bce5c</span><br><span class="line">root      2645  0.0  0.0 239068 18704 ?        Sl   3月15   0:00 /usr/bin/runc --root /var/run/docker/runtime-runc/moby --<span class="built_in">log</span> /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/log.json --<span class="built_in">log</span>-format json <span class="built_in">exec</span> --process /tmp/runc-process256765632 --console-socket /tmp/pty518048165/pty.sock --detach --pid-file /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/12895df315fe38432c96579dd329ac4468f373781ba36bf272bbe3829a4afbd6.pid e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b</span><br><span class="line">root     12397  0.0  0.0 111976 11632 ?        Sl   3月15   0:08 /usr/bin/containerd-shim-runc-v2 -namespace moby -id e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b -address /run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>果然可行，可以看到进程关系为 <code>pid 1</code> -&gt; <code>pid 12397</code> -&gt; <code>pid 2645</code>，即 <code>init</code> -&gt; <code>containerd-shim-runc-v2</code> -&gt; <code>runc</code>。</p><p>查看容器进程组:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ pstree -ap 2645</span><br><span class="line">runc,2645 --root /var/run/docker/runtime-runc/moby --<span class="built_in">log</span> /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/log.json --<span class="built_in">log</span>-format json <span class="built_in">exec</span> --process /tmp/runc-process256765632 --console-socket/tmp/pt</span><br><span class="line">  ├─runc:[2:INIT],2658 init</span><br><span class="line">  │   ├─&#123;runc:[2:INIT]&#125;,2659</span><br><span class="line">  │   ├─&#123;runc:[2:INIT]&#125;,2660</span><br><span class="line">  │   ├─&#123;runc:[2:INIT]&#125;,2661</span><br><span class="line">  │   ├─&#123;runc:[2:INIT]&#125;,2662</span><br><span class="line">  │   └─&#123;runc:[2:INIT]&#125;,2663</span><br><span class="line">  ├─&#123;runc&#125;,2650</span><br><span class="line">  ├─&#123;runc&#125;,2651</span><br><span class="line">  ├─&#123;runc&#125;,2652</span><br><span class="line">  ├─&#123;runc&#125;,2653</span><br><span class="line">  ├─&#123;runc&#125;,2654</span><br><span class="line">  └─&#123;runc&#125;,2655</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al /proc/2645/fd</span><br><span class="line">总用量 0</span><br><span class="line">dr-x------ 2 root root  0 3月  16 12:46 .</span><br><span class="line">dr-xr-xr-x 9 root root  0 3月  15 23:20 ..</span><br><span class="line">lr-x------ 1 root root 64 3月  16 12:46 0 -&gt; /dev/null</span><br><span class="line">l-wx------ 1 root root 64 3月  16 12:46 1 -&gt; pipe:[1658705]</span><br><span class="line">l-wx------ 1 root root 64 3月  16 12:46 2 -&gt; pipe:[1658705]</span><br><span class="line">lrwx------ 1 root root 64 3月  16 12:46 27 -&gt; /dev/pts/ptmx</span><br><span class="line">l-wx------ 1 root root 64 3月  16 12:46 3 -&gt; /run/containerd/io.containerd.runtime.v2.task/moby/e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b/log.json</span><br><span class="line">lrwx------ 1 root root 64 3月  16 12:46 4 -&gt; anon_inode:[eventpoll]</span><br><span class="line">lrwx------ 1 root root 64 3月  16 12:46 5 -&gt; socket:[1727233]</span><br><span class="line">lrwx------ 1 root root 64 3月  16 12:46 6 -&gt; socket:[1727233]</span><br><span class="line">lrwx------ 1 root root 64 3月  16 12:46 8 -&gt; socket:[1727235]</span><br><span class="line">lr-x------ 1 root root 64 3月  16 12:46 9 -&gt; pipe:[1727236]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">$ pstack 2645</span><br><span class="line">Thread 7 (Thread 0x7fdd5f98b700 (LWP 2650)):</span><br><span class="line"><span class="comment">#0  runtime.futex () at /usr/local/go/src/runtime/sys_linux_amd64.s:536</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afd34 in runtime.futexsleep (addr=0x55dcafe6eb10 &lt;runtime.sched+272&gt;, val=0, ns=60000000000) at /usr/local/go/src/runtime/os_linux.go:50</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf18f3b0 in runtime.notetsleep_internal (n=0x55dcafe6eb10 &lt;runtime.sched+272&gt;, ns=60000000000, ~r2=&lt;optimized out&gt;) at /usr/local/go/src/runtime/lock_futex.go:193</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf18f485 in runtime.notetsleep (n=0x55dcafe6eb10 &lt;runtime.sched+272&gt;, ns=60000000000, ~r2=&lt;optimized out&gt;) at /usr/local/go/src/runtime/lock_futex.go:216</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1bebf0 in runtime.sysmon () at /usr/local/go/src/runtime/proc.go:4322</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf1b6eb7 in runtime.mstart1 () at /usr/local/go/src/runtime/proc.go:1201</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf1b6dd0 in runtime.mstart () at /usr/local/go/src/runtime/proc.go:1167</span></span><br><span class="line"><span class="comment">#7  0x000055dcaf63ef13 in crosscall_amd64 () at gcc_amd64.S:35</span></span><br><span class="line"><span class="comment">#8  0x00007fdd5f98b700 in ?? ()</span></span><br><span class="line"><span class="comment">#9  0x0000000000000000 in ?? ()</span></span><br><span class="line">Thread 6 (Thread 0x7fdd5f18a700 (LWP 2651)):</span><br><span class="line"><span class="comment">#0  runtime.futex () at /usr/local/go/src/runtime/sys_linux_amd64.s:536</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0xc000042848, val=0, ns=-1) at /usr/local/go/src/runtime/os_linux.go:44</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf18f223 in runtime.notesleep (n=0xc000042848) at /usr/local/go/src/runtime/lock_futex.go:151</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf1b8404 in runtime.stopm () at /usr/local/go/src/runtime/proc.go:1934</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1b9535 in runtime.findrunnable (gp=0xc00002c000, inheritTime=false) at /usr/local/go/src/runtime/proc.go:2397</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf1ba1f2 in runtime.schedule () at /usr/local/go/src/runtime/proc.go:2530</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf1ba533 in runtime.park_m (gp=0xc000000180) at /usr/local/go/src/runtime/proc.go:2616</span></span><br><span class="line"><span class="comment">#7  0x000055dcaf1de0e3 in runtime.mcall () at /usr/local/go/src/runtime/asm_amd64.s:318</span></span><br><span class="line"><span class="comment">#8  0x0000000000000000 in ?? ()</span></span><br><span class="line">Thread 5 (Thread 0x7fdd5e989700 (LWP 2652)):</span><br><span class="line"><span class="comment">#0  runtime.futex () at /usr/local/go/src/runtime/sys_linux_amd64.s:536</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe8b560 &lt;runtime.sig&gt;, val=0, ns=-1) at /usr/local/go/src/runtime/os_linux.go:44</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf18f308 in runtime.notetsleep_internal (n=0x55dcafe8b560 &lt;runtime.sig&gt;, ns=-1, ~r2=&lt;optimized out&gt;) at /usr/local/go/src/runtime/lock_futex.go:174</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf18f510 in runtime.notetsleepg (n=0x55dcafe8b560 &lt;runtime.sig&gt;, ns=-1, ~r2=&lt;optimized out&gt;) at /usr/local/go/src/runtime/lock_futex.go:228</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1c85be in os/signal.signal_recv (~r0=&lt;optimized out&gt;) at /usr/local/go/src/runtime/sigqueue.go:147</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf60ee84 in os/signal.loop () at /usr/local/go/src/os/signal/signal_unix.go:23</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf1e01f1 in runtime.goexit () at /usr/local/go/src/runtime/asm_amd64.s:1357</span></span><br><span class="line"><span class="comment">#7  0x0000000000000000 in ?? ()</span></span><br><span class="line">Thread 4 (Thread 0x7fdd5e188700 (LWP 2653)):</span><br><span class="line"><span class="comment">#0  runtime.epollwait () at /usr/local/go/src/runtime/sys_linux_amd64.s:673</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afb72 in runtime.netpoll (block=true, ~r1=...) at /usr/local/go/src/runtime/netpoll_epoll.go:71</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf1b950b in runtime.findrunnable (gp=0xc000030a00, inheritTime=false) at /usr/local/go/src/runtime/proc.go:2378</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf1ba1f2 in runtime.schedule () at /usr/local/go/src/runtime/proc.go:2530</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1ba533 in runtime.park_m (gp=0xc0001ba480) at /usr/local/go/src/runtime/proc.go:2616</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf1de0e3 in runtime.mcall () at /usr/local/go/src/runtime/asm_amd64.s:318</span></span><br><span class="line"><span class="comment">#6  0x0000000000000000 in ?? ()</span></span><br><span class="line">Thread 3 (Thread 0x7fdd5d987700 (LWP 2654)):</span><br><span class="line"><span class="comment">#0  runtime.futex () at /usr/local/go/src/runtime/sys_linux_amd64.s:536</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe8b478 &lt;runtime.newmHandoff+24&gt;, val=0, ns=-1) at /usr/local/go/src/runtime/os_linux.go:44</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf18f223 in runtime.notesleep (n=0x55dcafe8b478 &lt;runtime.newmHandoff+24&gt;) at /usr/local/go/src/runtime/lock_futex.go:151</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf1b8324 in runtime.templateThread () at /usr/local/go/src/runtime/proc.go:1912</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1b6eb7 in runtime.mstart1 () at /usr/local/go/src/runtime/proc.go:1201</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf1b6dd0 in runtime.mstart () at /usr/local/go/src/runtime/proc.go:1167</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf63ef13 in crosscall_amd64 () at gcc_amd64.S:35</span></span><br><span class="line"><span class="comment">#7  0x00007fdd5d987700 in ?? ()</span></span><br><span class="line"><span class="comment">#8  0x0000000000000000 in ?? ()</span></span><br><span class="line">Thread 2 (Thread 0x7fdd5d186700 (LWP 2655)):</span><br><span class="line"><span class="comment">#0  syscall.Syscall () at /usr/local/go/src/syscall/asm_linux_amd64.s:27</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf233f4c in syscall.read (fd=8, p=&lt;error reading variable: access outside bounds of object referenced via synthetic pointer&gt;, n=&lt;optimized out&gt;, err=...) at /usr/local/go/src/syscall/zsyscall_linux_amd64.go:732</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf24c986 in syscall.Read (fd=&lt;optimized out&gt;, p=..., n=&lt;optimized out&gt;, err=...) at /usr/local/go/src/syscall/syscall_unix.go:183</span></span><br><span class="line"><span class="comment">#3  internal/poll.(*FD).Read (fd=0xc00014f080, p=..., ~r1=&lt;optimized out&gt;, ~r2=...) at /usr/local/go/src/internal/poll/fd_unix.go:165</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf254813 in os.(*File).read (f=0xc000154818, b=..., n=&lt;optimized out&gt;, err=...) at /usr/local/go/src/os/file_unix.go:259</span></span><br><span class="line"><span class="comment">#5  os.(*File).Read (f=0xc000154818, b=..., n=&lt;optimized out&gt;, err=...) at /usr/local/go/src/os/file.go:116</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf37a54d in encoding/json.(*Decoder).refill (dec=0xc0001cec60, ~r0=...) at /usr/local/go/src/encoding/json/stream.go:161</span></span><br><span class="line"><span class="comment">#7  0x000055dcaf37a2de in encoding/json.(*Decoder).readValue (dec=0xc0001cec60, ~r0=&lt;optimized out&gt;, ~r1=...) at /usr/local/go/src/encoding/json/stream.go:136</span></span><br><span class="line"><span class="comment">#8  0x000055dcaf379dab in encoding/json.(*Decoder).Decode (dec=0xc0001cec60, v=..., ~r1=...) at /usr/local/go/src/encoding/json/stream.go:63</span></span><br><span class="line"><span class="comment">#9  0x000055dcaf5ca997 in github.com/opencontainers/runc/libcontainer.parseSync (pipe=..., fn=&#123;void (github.com/opencontainers/runc/libcontainer.syncT *, error *)&#125; 0xc0001a28f8, ~r2=...) at /go/src/github.com/opencontainers/runc/libcontainer/sync.go:76</span></span><br><span class="line"><span class="comment">#10 0x000055dcaf5bc1ff in github.com/opencontainers/runc/libcontainer.(*setnsProcess).start (p=0xc00022e6c0, err=...) at /go/src/github.com/opencontainers/runc/libcontainer/process_linux.go:146</span></span><br><span class="line"><span class="comment">#11 0x000055dcaf5a3564 in github.com/opencontainers/runc/libcontainer.(*linuxContainer).start (c=0xc00020c000, process=0xc00017d540, ~r1=...) at /go/src/github.com/opencontainers/runc/libcontainer/container_linux.go:365</span></span><br><span class="line"><span class="comment">#12 0x000055dcaf5a2a8d in github.com/opencontainers/runc/libcontainer.(*linuxContainer).Start (c=0xc00020c000, process=0xc00017d540, ~r1=...) at /go/src/github.com/opencontainers/runc/libcontainer/container_linux.go:262</span></span><br><span class="line"><span class="comment">#13 0x000055dcaf5a2c6b in github.com/opencontainers/runc/libcontainer.(*linuxContainer).Run (c=0xc00020c000, process=0xc00017d540, ~r1=...) at /go/src/github.com/opencontainers/runc/libcontainer/container_linux.go:272</span></span><br><span class="line"><span class="comment">#14 0x000055dcaf633fb8 in main.(*runner).run (r=0xc0001a3490, config=0xc00020c0f0, ~r1=&lt;optimized out&gt;, ~r2=...) at /go/src/github.com/opencontainers/runc/utils_linux.go:322</span></span><br><span class="line"><span class="comment">#15 0x000055dcaf629394 in main.execProcess (context=0xc0001ce160, ~r1=&lt;optimized out&gt;, ~r2=...) at /go/src/github.com/opencontainers/runc/exec.go:157</span></span><br><span class="line"><span class="comment">#16 0x000055dcaf636635 in main.glob..func5 (context=0xc0001ce160, ~r1=...) at /go/src/github.com/opencontainers/runc/exec.go:104</span></span><br><span class="line"><span class="comment">#17 0x000055dcaf5f3180 in github.com/urfave/cli.HandleAction (action=..., context=0xc0001ce160, err=...) at /go/src/github.com/opencontainers/runc/vendor/github.com/urfave/cli/app.go:523</span></span><br><span class="line"><span class="comment">#18 0x000055dcaf5f3eee in github.com/urfave/cli.Command.Run (c=..., ctx=0xc0001ce000, err=...) at /go/src/github.com/opencontainers/runc/vendor/github.com/urfave/cli/command.go:174</span></span><br><span class="line"><span class="comment">#19 0x000055dcaf5f122a in github.com/urfave/cli.(*App).Run (a=0xc0001c2000, arguments=..., err=...) at /go/src/github.com/opencontainers/runc/vendor/github.com/urfave/cli/app.go:276</span></span><br><span class="line"><span class="comment">#20 0x000055dcaf62c4b9 in main.main () at /go/src/github.com/opencontainers/runc/main.go:151</span></span><br><span class="line">Thread 1 (Thread 0x7fdd625dc740 (LWP 2645)):</span><br><span class="line"><span class="comment">#0  runtime.futex () at /usr/local/go/src/runtime/sys_linux_amd64.s:536</span></span><br><span class="line"><span class="comment">#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe6f448 &lt;runtime.m0+328&gt;, val=0, ns=-1) at /usr/local/go/src/runtime/os_linux.go:44</span></span><br><span class="line"><span class="comment">#2  0x000055dcaf18f223 in runtime.notesleep (n=0x55dcafe6f448 &lt;runtime.m0+328&gt;) at /usr/local/go/src/runtime/lock_futex.go:151</span></span><br><span class="line"><span class="comment">#3  0x000055dcaf1b8a6c in runtime.stoplockedm () at /usr/local/go/src/runtime/proc.go:2074</span></span><br><span class="line"><span class="comment">#4  0x000055dcaf1ba3b9 in runtime.schedule () at /usr/local/go/src/runtime/proc.go:2475</span></span><br><span class="line"><span class="comment">#5  0x000055dcaf1ba533 in runtime.park_m (gp=0xc0001ba300) at /usr/local/go/src/runtime/proc.go:2616</span></span><br><span class="line"><span class="comment">#6  0x000055dcaf1de0e3 in runtime.mcall () at /usr/local/go/src/runtime/asm_amd64.s:318</span></span><br><span class="line"><span class="comment">#7  0x000055dcaf1de008 in runtime.rt0_go () at /usr/local/go/src/runtime/asm_amd64.s:220</span></span><br><span class="line"><span class="comment">#8  0x0000000000000000 in ?? ()</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pstack 2658</span><br><span class="line"><span class="comment"># 此处无响应</span></span><br><span class="line"><span class="comment"># killall -9 pstack</span></span><br><span class="line"><span class="comment"># killall -9 gdb</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/2658/stack</span><br><span class="line">[&lt;0&gt;] ceph_mdsc_do_request+0x186/0x240 [ceph]</span><br><span class="line">[&lt;0&gt;] __ceph_do_getattr+0x9d/0x200 [ceph]</span><br><span class="line">[&lt;0&gt;] ceph_permission+0x2a/0x50 [ceph]</span><br><span class="line">[&lt;0&gt;] inode_permission+0xc0/0x150</span><br><span class="line">[&lt;0&gt;] ksys_chdir+0x59/0xd0</span><br><span class="line">[&lt;0&gt;] __x64_sys_chdir+0x12/0x20</span><br><span class="line">[&lt;0&gt;] do_syscall_64+0x60/0x190</span><br><span class="line">[&lt;0&gt;] entry_SYSCALL_64_after_hwframe+0x44/0xa9</span><br><span class="line">[&lt;0&gt;] 0xffffffffffffffff</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在使用 &lt;code&gt;kubectl exec&lt;/code&gt; 进入到 &lt;code&gt;pod&lt;/code&gt; 时，进程会停止响应。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://divinerapier.github.io/tags/docker/"/>
    
    <category term="containerd" scheme="http://divinerapier.github.io/tags/containerd/"/>
    
  </entry>
  
  <entry>
    <title>Pod 持续处于 Terminating 状态</title>
    <link href="http://divinerapier.github.io/2021/03/12/pod-stuck-in-terminating-state/"/>
    <id>http://divinerapier.github.io/2021/03/12/pod-stuck-in-terminating-state/</id>
    <published>2021-03-12T02:11:34.000Z</published>
    <updated>2021-03-12T02:16:19.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当删除 <code>Pod</code> 时</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://containersolutions.github.io/runbooks/posts/kubernetes/pod-stuck-in-terminating-state/" target="_blank" rel="noopener">pod stuck in terminating state</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;当删除 &lt;code&gt;Pod&lt;/code&gt; 时&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB 入门</title>
    <link href="http://divinerapier.github.io/2021/03/08/innodb-introduction/"/>
    <id>http://divinerapier.github.io/2021/03/08/innodb-introduction/</id>
    <published>2021-03-08T05:27:56.000Z</published>
    <updated>2021-03-09T02:03:53.433Z</updated>
    
    <content type="html"><![CDATA[<p><code>InnoDB</code> 是一种平衡可靠性与性能的通用存储引擎。在 <code>MySQL 8.0</code> 中，通过 <code>CREATE TABLE</code> 语句创建表时，如若未通过 <code>ENGINE</code> 子句指定引擎，将采用 <code>InnoDB</code> 作为默认的存储引擎。</p><h2 id="InnoDB-的关键优势"><a href="#InnoDB-的关键优势" class="headerlink" title="InnoDB 的关键优势"></a>InnoDB 的关键优势</h2><ul><li><code>InnoDB</code> 的 <code>DML</code> 操作遵循 <code>ACID</code> 模型，且具有提交、回滚、错误恢复等事务的功能与能力，保障用户数据安全。</li><li>行级锁定和 <code>Oracle</code> 风格的 <strong>一致性读取</strong> 提高了多用户使用时的并发性与性能。</li><li><code>InnoDB</code> 表将数据存放在磁盘上，基于 <strong>主键</strong> 来优化查询。每个 <code>InnoDB</code> 表都有一个称为 <strong>聚集索引</strong> 的主键索引，使用该索引组织数据可以将查找主键的 <code>I/O</code> 最小化。</li><li>为了维护数据完整性，<code>InnoDB</code> 支持外键约束。当使用外键时，<code>InnoDB</code> 会检查插入、更新和删除等语句，来确保它们不会导致相关表之间的数据不一致。</li></ul><h3 id="InnoDB-功能列表"><a href="#InnoDB-功能列表" class="headerlink" title="InnoDB 功能列表"></a>InnoDB 功能列表</h3><table><thead><tr><th align="left">Feature</th><th align="left">Support</th></tr></thead><tbody><tr><td align="left">B-tree indexes</td><td align="left">Yes</td></tr><tr><td align="left">Backup/point-in-time recovery (在服务端实现，而非存储引擎。)</td><td align="left">Yes</td></tr><tr><td align="left">Cluster database support</td><td align="left">No</td></tr><tr><td align="left">Clustered indexes</td><td align="left">Yes</td></tr><tr><td align="left">Compressed data</td><td align="left">Yes</td></tr><tr><td align="left">Data caches</td><td align="left">Yes</td></tr><tr><td align="left">Encrypted data</td><td align="left">Yes (在服务器端通过加密功能实现;在MySQL 5.7和更高版本中，支持数据静止加密。)</td></tr><tr><td align="left">Foreign key support</td><td align="left">Yes</td></tr><tr><td align="left">Full-text search indexes</td><td align="left">Yes (在MySQL 5.6和更高版本中支持全文索引。)</td></tr><tr><td align="left">Geospatial data type support</td><td align="left">Yes</td></tr><tr><td align="left">Geospatial indexing support</td><td align="left">Yes (MySQL 5.7和更高版本中提供了对地理空间索引的支持。)</td></tr><tr><td align="left">Hash indexes</td><td align="left">No (InnoDB内部利用哈希索引来实现自适应哈希索引特性。)</td></tr><tr><td align="left">Index caches</td><td align="left">Yes</td></tr><tr><td align="left">Locking granularity</td><td align="left">Row</td></tr><tr><td align="left">MVCC</td><td align="left">Yes</td></tr><tr><td align="left">Replication support (在服务端实现，而非存储引擎。)</td><td align="left">Yes</td></tr><tr><td align="left">Storage limits</td><td align="left">64TB</td></tr><tr><td align="left">T-tree indexes</td><td align="left">No</td></tr><tr><td align="left">Transactions</td><td align="left">Yes</td></tr><tr><td align="left">Update statistics for data dictionary</td><td align="left">Yes</td></tr></tbody></table><h2 id="使用-InnoDB-的优势"><a href="#使用-InnoDB-的优势" class="headerlink" title="使用 InnoDB 的优势"></a>使用 InnoDB 的优势</h2><p>使用 <code>InnoDB</code> 有如下优势:</p><ul><li>如果服务器由于硬件或软件问题而意外退出，无论崩溃时数据库内部遇到什么问题，在重新启动数据库后都不需要做任何特殊的操作。<code>InnoDB</code> 会恢复崩溃前已经确定的更改，并撤销正在进行但未提交的更改，允许用户重新启动并从停止的地方继续。</li><li><code>InnoDB</code> 存储引擎维护其内部的缓冲池，当数据被访问时，该缓冲池会在内存中缓存表和索引数据。频繁被使用到的数据将直接从内存中处理。多种类型的信息都可以通过使用该缓存来提高处理速度。在专用的数据库服务器上，通常会将高达 <code>80%</code> 的物理内存分配给缓冲池使用。</li><li>可以设置外键，保证多个相关数据表之间的数据完整性。</li><li>如果磁盘或内存中的数据损坏，<strong>校验和</strong> 机制会在使问题假数据之前向用户发出警告。变量 <code>innodb_checksum_algorithm</code> 定义了 <code>InnoDB</code> 使用了何种校验和算法。</li><li>在 <code>WHERE</code>、<code>ORDER BY</code>、<code>GROUP BY</code> 等子句与 <code>JOIN</code> 操作中使用主键时，<code>InnoDB</code> 将自动优化涉及这些列的操作，使这些操作的执行速度非常快。</li><li>更改缓冲(change buffering) 这一自动极致会对插入，更新和删除进行优化。 <code>InnoDB</code> 不仅允许对同一表的并发读写访问，而且会缓存被更改数据，使磁盘 <code>I/O</code> 流水线化。</li><li>性能优势并不仅限于哪些需要很长时间查询的大表。当表中的某些被反复访问时，<code>InnoDB</code> 会通过自适应哈希索引( Adaptive Hash Index) 处理，加快查询速度，达到类似使用哈希表查找的效果。</li><li>允许压缩表和关联索引。</li><li>加密数据。</li><li>在线创建和删除索引，执行其他 <code>DDL</code> 操作对性能和可用性有较小的影响。</li><li>截断每个表文件的表空间的速度非常快，被释放的磁盘空间不仅可以供 <code>InnoDB</code> 使用，操作系统同样可以重用。</li><li>表数据的存储布局对于使用动态(DYNAMIC) 行格式的 <code>BLOB</code> 和长文本字段更有效。</li><li>可以通过查询 <code>INFORMATION_SCHEMA</code> 表来监视存储引擎的内部工作。</li><li>可以通过查询 <code>performance_schema</code> 表来监控存储引擎的性能详情。</li><li>可以混合使用 <code>InnoDB</code> 表和使用其他 <code>MySQL</code> 存储引擎的表，即使是在同一个语句中。例如，可以使用 <code>JOIN</code> 操作在单个查询中组合来自 <code>InnoDB</code> 和内存表的数据。</li><li><code>InnoDB</code> 的设计目标是在处理大数据量时的提高 <code>CPU</code> 效率并达到最高性能。</li><li><code>InnoDB</code> 表可以处理大量数据，即使在文件大小被限制为 <code>2GB</code> 的操作系统上。</li></ul><h2 id="InnoDB-表的最佳实践"><a href="#InnoDB-表的最佳实践" class="headerlink" title="InnoDB 表的最佳实践"></a>InnoDB 表的最佳实践</h2><p>在使用 <code>InnoDB</code> 的表时有如下最佳实践:</p><ul><li>使用查询最频繁的一列或多列作为表的主键，如果没有明显的主键，则使用自动递增 <code>ID</code>。</li><li>使用 <code>JOIN</code> 操作根据相同的 <code>ID</code> 值从多个表中从多个表中获取数据。在 <code>JOIN</code> 的列上定义外键约束，并为这些列声明相同的数据类型。外键约束可以确保被引用的列上是有索引的，这也可以提高性能。同时，外键约束可以将删除和更新的结果在所有收到影响的表上生效，保证当父表中没有相应的 <code>ID</code> 时，不会将数据插入到子表中。</li><li>关闭自动提交可以提高性能 (受到存储设备写入速度的限制)。</li><li>使用 <code>START TRANSACTION</code> 和 <code>COMMIT</code> 语句，将一组相关的 <code>DML</code> 操作，以事务的形式执行。事务的范围过小会导致频繁提交，范围过大会导致提交间隔太久。</li><li>禁止使用 <code>LOCK TABLES</code> 语句。<code>InnoDB</code> 可以同时处理多个会话对同一个表的读写，而不会牺牲可靠性和高性能。要获得对一组行的独占写访问，请使用 <code>SELECT ... FOR UPDATE</code> 只锁定要更新的行。</li><li>启用变量 <code>innodb_file_per_table</code>，或者使用通用表空间(general tablespaces) 将表的数据和索引放到单独的文件中，不建议使用 system 表空间(system tablespace)。默认启用变量 <code>innodb_file_per_table</code>。</li><li>压缩 <code>InnoDB</code> 表数据，在某些场景可以提升读写性能。</li><li>使用 <code>--sql_mode=NO_ENGINE_SUBSTITUTION</code> 参数启动服务，可避免使用禁止的引擎创建表。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html" target="_blank" rel="noopener">Introduction to InnoDB</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-benefits.html" target="_blank" rel="noopener">Benefits of Using InnoDB Tables</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-best-practices.html" target="_blank" rel="noopener">Best Practices for InnoDB Tables</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;InnoDB&lt;/code&gt; 是一种平衡可靠性与性能的通用存储引擎。在 &lt;code&gt;MySQL 8.0&lt;/code&gt; 中，通过 &lt;code&gt;CREATE TABLE&lt;/code&gt; 语句创建表时，如若未通过 &lt;code&gt;ENGINE&lt;/code&gt; 子句指定引擎，将采</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://divinerapier.github.io/tags/mysql/"/>
    
    <category term="innnodb" scheme="http://divinerapier.github.io/tags/innnodb/"/>
    
  </entry>
  
  <entry>
    <title>未设置 shm 导致 PyTorch 任务失败</title>
    <link href="http://divinerapier.github.io/2021/03/05/pytorch-fails-without-shm/"/>
    <id>http://divinerapier.github.io/2021/03/05/pytorch-fails-without-shm/</id>
    <published>2021-03-05T02:01:27.000Z</published>
    <updated>2021-03-05T05:37:05.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近，配合研发同学将原来在老集群上直接用 <code>docker</code> 运行的 <code>pytorch</code> 算法迁移到使用 <code>k8s</code> 的新集群上运行。结果，很不幸，研发同学说无法运行。错误日志如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-Traceback (most recent call last):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/runpy.py"</span>, line 193, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-<span class="string">"__main__"</span>, mod_spec)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/runpy.py"</span>, line 85, <span class="keyword">in</span> _run_code</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-exec(code, run_globals)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/egs/chn_40h/extend_code/launch.py"</span>, line 29, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-main()</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/launch.py"</span>, line 10, <span class="keyword">in</span> main</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-launch(args)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/cli/launch.py"</span>, line 148, <span class="keyword">in</span> launch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-trainer.train_on(data)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 77, <span class="keyword">in</span> train_on</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-self.train_epoch(data[<span class="string">'tr'</span>])</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 41, <span class="keyword">in</span> train_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-return self._one_epoch(data_queue, is_training=True)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/trainer.py"</span>, line 63, <span class="keyword">in</span> _one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-return self.one_epoch(data_queue, is_training)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/naive_trainer.py"</span>, line 115, <span class="keyword">in</span> one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-for batch_idx, batch <span class="keyword">in</span> enumerate(self.timer[<span class="string">'io'</span>].profile(data_queue)):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/common.py"</span>, line 102, <span class="keyword">in</span> profile</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-value = next(iterator)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"&lt;string&gt;"</span>, line 2, <span class="keyword">in</span> get</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/miniconda3/envs/pyasr/lib/python3.7/multiprocessing/managers.py"</span>, line 834, <span class="keyword">in</span> _callmethod</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-raise convert_to_error(kind, result)</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-_queue</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-.</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-Empty</span><br><span class="line">11:12:55[asr.utils.bootstrap]-WARNING-Version 0.3.1.dev28</span><br></pre></td></tr></table></figure><p>看到这个错误，就挺迷茫的。</p><p>根据错误信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/naive_trainer.py"</span>, line 115, <span class="keyword">in</span> one_epoch</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-for batch_idx, batch <span class="keyword">in</span> enumerate(self.timer[<span class="string">'io'</span>].profile(data_queue)):</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-  File <span class="string">"/pytorch-asr/asr/trainer/common.py"</span>, line 102, <span class="keyword">in</span> profile</span><br><span class="line">10:59:01[asr.utils.bootstrap]-ERROR-value = next(iterator)</span><br></pre></td></tr></table></figure><p>推断是读数据的时候出现了问题。虽然看起来与 <code>GPU</code> 没有关系，但是，为了保险起见，依然对比了前后环境的 <code>NVIDIA Driver</code>，<code>CUDA</code> 等版本信息，结果是一致的。而且，<code>NCCL</code> 是在镜像中安装的，不太可能有问题。</p><p>之后，尝试在容器中安装 <code>perf</code>，但是失败了，尝试在容器中使用 <code>strace</code>，提示没有权限。</p><p>正在我继续死磕的时候，研发提供了另一段错误日志:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytorch-956sg:9319:9379 [0] include/shm.h:48 NCCL WARN Error <span class="keyword">while</span> creating shared memory segment nccl-shm-recv-183375136c5888b6-0-2-3 (size 9637888)</span><br></pre></td></tr></table></figure><p>这个错误就很有价值啊，创建共享内存失败。</p><p>此前，反复与研发同学确认过，是否只依赖于外部的 <code>NVIDIA Driver</code> 与 <code>CUDA</code>，得到了肯定的答复。因此，就一直以此为前提进行排查。但现在我产生了怀疑，问研发要来启动命令，隐藏敏感数据后如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit /data:/data --name asr --ipc=host image:latest /bin/bash</span><br></pre></td></tr></table></figure><p>果然就发现了隐藏信息: <strong>–ipc=host</strong> 。</p><p>因此，修改在原有创建任务的 <code>yaml</code> 文件中增加 <code>volume</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">asr</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image:latest</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/dev/shm</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">shm</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shm</span></span><br><span class="line">      <span class="attr">emptyDir:</span></span><br><span class="line">         <span class="attr">medium:</span> <span class="string">Memory</span></span><br></pre></td></tr></table></figure><p>在容器内，挂载一个 <code>tmpfs</code> 到 <code>/dev/shm</code>。成功解决上述两个问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>虽然成功解决了两个问题，但是对于第一个问题还是感到迷惑。虽然，根据答案反推原因，可以查到 <code>DataLoader</code> 在工作的时候会依赖于 <code>shm</code>。但是，查到的错误却不同于第一份错误日志。</p></li><li><p>这次是运气好，遇到了第二个错误明显的提示。否则，可能就需要继续跟 <code>perf</code>，<code>strace</code> 作斗争了，甚至于调试 <code>coredump</code>。</p></li><li><p>在遇到错误二之前，已经决定自己在新集群上使用 <code>docker</code> 运行看看了，其实，这样的话也能发现被隐藏的 <code>--ipc=host</code>。</p></li><li><p>最终要的一点，不要轻易相信他人给定的条件。即使对方不是有意隐瞒，也可能会由于遗忘，或本来就不清楚等各种原因，导致丢失已知条件。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近，配合研发同学将原来在老集群上直接用 &lt;code&gt;docker&lt;/code&gt; 运行的 &lt;code&gt;pytorch&lt;/code&gt; 算法迁移到使用 &lt;code&gt;k8s&lt;/code&gt; 的新集群上运行。结果，很不幸，研发同学说无法运行。错误日志如下:&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://divinerapier.github.io/tags/docker/"/>
    
    <category term="k8s" scheme="http://divinerapier.github.io/tags/k8s/"/>
    
    <category term="pytorch" scheme="http://divinerapier.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>开闭原则</title>
    <link href="http://divinerapier.github.io/2021/02/08/programming-open-closed-principle/"/>
    <id>http://divinerapier.github.io/2021/02/08/programming-open-closed-principle/</id>
    <published>2021-02-08T06:17:10.000Z</published>
    <updated>2021-03-06T12:40:09.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是开闭原则"><a href="#什么是开闭原则" class="headerlink" title="什么是开闭原则"></a>什么是开闭原则</h2><p><strong>需求变化</strong> 是让开发者最为头痛的问题之一。通常在新增一个功能的时候，都会伴随着修改原有的代码。因此，理想情况是在新增功能时尽可能减少对已有代码的改动，避免因改动代码引入新的问题。</p><p>由此产生了一个编码设计原则: 开闭原则 (Open Close Principle)。</p><blockquote><p>Software entities like classes, modules and functions should be <strong>open for extension</strong> but <strong>closed for modifications</strong>.</p></blockquote><h2 id="举个栗子-——-用户注册模块"><a href="#举个栗子-——-用户注册模块" class="headerlink" title="举个栗子 —— 用户注册模块"></a>举个栗子 —— 用户注册模块</h2><h3 id="原始需求"><a href="#原始需求" class="headerlink" title="原始需求"></a>原始需求</h3><p>业务初期，只允许使用邮箱注册，因此，需要实现向邮箱发送验证码的功能。</p><p>定义邮箱发送类，用于发送验证码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *EmailMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义服务类，调用邮箱发送类发送消息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  emailSender *EmailMessageSender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">()</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">    emailSender: &amp;EmailMessageSender&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MessageService)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  s.emailSender.SendVerificationCode(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  service := NewMessageService()</span><br><span class="line">  service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加需求"><a href="#增加需求" class="headerlink" title="增加需求"></a>增加需求</h3><p>后来业务要求，允许使用手机号注册，通过短信的方式接受验证码。</p><p>因此，增加发送短信类:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ShortMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ShortMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，需要修改 <code>MessageService</code> 类:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  emailSender        *EmailMessageSender</span><br><span class="line">  shortMessageSender *ShortMessageSender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要通过某种方式制定使用哪种途径发送消息，例如增加一个表示类型的参数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageSender <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  MessageSenderEmail        MessageSender = <span class="literal">iota</span></span><br><span class="line">  MessageSenderShortMessage</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">(typ MessageSender)</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> typ &#123;</span><br><span class="line">    <span class="keyword">case</span> MessageSenderEmail:</span><br><span class="line">      <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">        emailSender: &amp;EmailMessageSender&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> MessageSenderShortMessage:</span><br><span class="line">      <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">        shortMessageSender: &amp;ShortMessageSender&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"unknown sender type: %s"</span>, typ))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MessageService)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> s.emailSender != <span class="literal">nil</span> &#123;</span><br><span class="line">    s.emailSender.SendVerificationCode(code)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> s.shortMessageSender != <span class="literal">nil</span> &#123;</span><br><span class="line">    s.shortMessageSender.SendVerificationCode(code)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(MessageSenderEmail)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(MessageSenderShortMessage)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上面的实现方式违背了 <code>OCP</code>: 在增加新类型 <code>ShortMessageSender</code> 的同时，为了能使用这个类，需要同时修改函数 <code>NewMessageService</code> 与函数 <code>MessageService::SendVerificationCode</code>，手动确定使用哪种方式发送消息。</p><p>并且可以确定以后每增加一种发送消息的类型，都需要同时修改这两个函数。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>首先，可以观察到，无论是通过类型 <code>EmailMessageSender</code> 发送消息，亦或是通过类型 <code>ShortMessageSender</code> 发送消息，二者对于 <code>MessageService</code> 都只是发送消息的一种实现方式，而 <code>MessageService</code> 并不关心具体使用的方式是什么。由此可以考虑将这个功能抽象为一个接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Sender <span class="keyword">interface</span> &#123;</span><br><span class="line">  SendVerificationCode(code <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MessageService</code> 只需要持有这个接口即可:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageService <span class="keyword">struct</span> &#123;</span><br><span class="line">  sender Sender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessageService</span><span class="params">(sender Sender)</span> *<span class="title">MessageService</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;MessageService&#123;</span><br><span class="line">    sender: sender,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s *MessageService) SendVerificationCode(code <span class="keyword">string</span>) &#123;</span><br><span class="line">  s.sender.SendVerificationCode(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是水到渠成的事情，让 <code>EmailMessageSender</code> 与 <code>ShortMessageSender</code> 分别实现接口 <code>Sender</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *EmailMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShortMessageSender <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ShortMessageSender)</span> <span class="title">SendVerificationCode</span><span class="params">(code <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Code: "</span>, code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，调用方式为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(&amp;EmailMessageSender&#123;&#125;)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    service := NewMessageService(&amp;ShortMessageSender&#123;&#125;)</span><br><span class="line">    service.SendVerificationCode(<span class="string">"10086"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式，若要增加新的发送方式，只需要增加对应的类型，并使其实现接口 <code>Sender</code> 即可，而无需修改除 <code>main</code> 以外的其他函数。达到 <strong>open for extension</strong> but <strong>closed for modifications</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>开闭原则</strong> 的目标是指导如何 <strong>提高代码可扩展性</strong>，因此是众多设计模式主要遵从的设计原则。</p><p>熟练使用这项原则，需要开发者具备扩展意识、抽象意识、封装意识等。在写代码之前，要认真思考，未来的需求可能会改变哪里。将可能的变化进行抽象，对外提供不变的接口。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.oodesign.com/open-close-principle.html" target="_blank" rel="noopener">open close principle</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是开闭原则&quot;&gt;&lt;a href=&quot;#什么是开闭原则&quot; class=&quot;headerlink&quot; title=&quot;什么是开闭原则&quot;&gt;&lt;/a&gt;什么是开闭原则&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;需求变化&lt;/strong&gt; 是让开发者最为头痛的问题之一。通常在新增一个功能的时候，</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>单一职责原则</title>
    <link href="http://divinerapier.github.io/2021/02/08/programming-single-responsibility-principle/"/>
    <id>http://divinerapier.github.io/2021/02/08/programming-single-responsibility-principle/</id>
    <published>2021-02-08T02:06:13.000Z</published>
    <updated>2021-03-06T06:57:08.027Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A class or module should have a single responsibility.</p></blockquote><p>单一职责原则要求，一个类或模块只应该有唯一的职责。</p><p>首先来明确概念，职责可以被看做一个类或者模块被修改的原因。那么，由这个概念可以得出，当一个类或者模块被修改的原因有两个或以上时，应该考虑将这些功能拆分到多个类或者模块中，从而使每一个类或者模块被修改的原因只有一个。</p><p>那么，问题来了: 什么叫做单一职责，或者说，以类为例，如何判断一个类的职责是否单一？这个原则在字面上是非常简单的，但实际上却又非常主观。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>大多数业务中都会涉及到用户信息，例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID                <span class="keyword">int64</span></span><br><span class="line">    Name              <span class="keyword">string</span></span><br><span class="line">    Email             <span class="keyword">string</span></span><br><span class="line">    Telephone         <span class="keyword">string</span></span><br><span class="line">    CreateTime        time.Time</span><br><span class="line">    LastLoginTime     time.Time</span><br><span class="line">    AvatarURL         <span class="keyword">string</span></span><br><span class="line">    ProvinceOfAddress Province</span><br><span class="line">    CityOfAddress     City</span><br><span class="line">    RegionOfAddress   Region</span><br><span class="line">    DetailedAddress   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大部分的开发者会使用如上扁平化的数据结构，事实上也不会有什么问题。但本着从学术的角度出发，来审视一下 <code>UserInfo</code> 中的职责有哪些:</p><ul><li>调用接口时，作为唯一标志<ul><li><code>ID</code></li></ul></li><li>展示作用<ul><li><code>Name</code></li><li><code>CreateTime</code></li><li><code>LastLoginTime</code></li><li><code>AvatarURL</code></li></ul></li><li>认证作用<ul><li><code>Email</code></li><li><code>Telephone</code></li></ul></li><li>地址信息<ul><li><code>ProvinceOfAddress</code></li><li><code>CityOfAddress</code></li><li><code>RegionOfAddress</code></li><li><code>DetailedAddress</code></li></ul></li></ul><p>结果分析下来，竟然包含了四种职责。并且，这四种职责基本上是相互独立的，即任何一种职责的信息发生变化，基本不会影响其他职责的功能。</p><p>同时，思考如下几个问题:</p><ol><li>用户登录的时候，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含认证相关字段的类型 <code>Credential</code> 呢</li><li>展示用户信息的时候，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含展示信息字段的类型 <code>UserDisplayInfo</code> 呢</li><li>在处理订单收货地址是，是直接使用 <code>UserInfo</code> 类型做处理，还是使用只包含地址相关字段的类型 <code>Address</code> 呢</li><li>在计算发货地与收货地距离时，也要使用 <code>UserInfo</code> 类型处理吗</li></ol><p>如此看来，应该将 <code>UserInfo</code> 修改为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Credential <span class="keyword">struct</span> &#123;</span><br><span class="line">    Email             <span class="keyword">string</span></span><br><span class="line">    Telephone         <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserDisplayInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name              <span class="keyword">string</span></span><br><span class="line">    CreateTime        time.Time</span><br><span class="line">    LastLoginTime     time.Time</span><br><span class="line">    AvatarURL         <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    ProvinceOfAddress Province</span><br><span class="line">    CityOfAddress     City</span><br><span class="line">    RegionOfAddress   Region</span><br><span class="line">    DetailedAddress   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID              <span class="keyword">int64</span></span><br><span class="line">    Credential      Credential</span><br><span class="line">    UserDisplayInfo UserDisplayInfo</span><br><span class="line">    Address         Address</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，还有可能你开发的产品没有订单功能，这时候还有必要有 <code>Address</code> 类吗？</p><p>因此，开篇才会说，这是一个主观的设计原则。职责是否单一还应该取决于实际的业务场景。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.oodesign.com/single-responsibility-principle.html" target="_blank" rel="noopener">OODesign: single responsibility principle</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;A class or module should have a single responsibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则要求，一个类或模块只应该有唯一的职责。&lt;/p&gt;
&lt;p&gt;首先来明确概念，职责可以被看做</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>针对接口编程</title>
    <link href="http://divinerapier.github.io/2021/02/06/programming-program-to-an-interface/"/>
    <id>http://divinerapier.github.io/2021/02/06/programming-program-to-an-interface/</id>
    <published>2021-02-06T08:22:31.000Z</published>
    <updated>2021-03-06T06:57:22.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Program to an interface, not an implementation.</p></blockquote><p>针对接口，而非实现编程 —— 出自 GoF《设计模式: 可复用面向对象软件基础》。<strong>接口</strong> 表示一组 <strong>协议</strong> 或 <strong>约定</strong>，是一组功能的集合。</p><p>接口在不同的语言中，有不同的称呼:</p><ul><li><strong>rust</strong> 中的 <strong>trait</strong></li><li><strong>go</strong> 中的 <strong>interface</strong></li><li><strong>swift</strong> 中的 <strong>protocol</strong></li><li><strong>java</strong> 中的 <strong>interface</strong></li></ul><p>但无论他们的名字是否相同，其作用都是表达一组 <strong>抽象的功能集合</strong>。</p><p>以上字面意思很好理解，下面来详细说明。</p><h2 id="为什么要针对接口编程"><a href="#为什么要针对接口编程" class="headerlink" title="为什么要针对接口编程"></a>为什么要针对接口编程</h2><p>初级开发者在实现某一具体需求时，其思考的关注点在于需求本身，分析实现这个需求要经过哪些步骤，每个步骤又要做那些事情，以此类推。在经过逐层分析，想明白流程之后，这名开发者就会把解决步骤转化为代码。</p><p>如果只看这个需求，这名开发者完成并交付了这个功能。但是，当需求发生变动时，需要修改功能，或增加功能时，由于上面的实现方式是面向过程的，步骤与步骤之间互相暴露实现的细节。因此，当修改了某一个步骤的代码时，就非常可能需要同步修改前后相邻步骤的代码，最坏的情况可能要修改全部的代码。结果就是不小的开发工作量与测试工作量。</p><p>如果开发者使用针对接口编程的方式，封装不稳定的实现细节，暴露稳定的接口。当需求发生变化时，只需要修改相关的接口实现，而因为接口不变，所以无需改动其他代码。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>产品给你分配了一个任务: 有一批保存在 <code>aws s3</code> 上的数据，需要你将它们同步到 <code>aliyun oss</code> 上。</p><h3 id="针对实现编程"><a href="#针对实现编程" class="headerlink" title="针对实现编程"></a>针对实现编程</h3><p>如果是使用针对实现编程方式，那么在收到这个需求之后，应该就会思考: 把 <code>aws s3</code> 的数据同步到 <code>aliyun oss</code> 上，步骤差不多是:</p><ol><li>想办法把数据从 <code>aws s3</code> 上下载到磁盘或者内存</li><li>把磁盘或者内存中的数据上传到 <code>aliyun oss</code></li></ol><p>想到这里，感觉差不多可以写代码了:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AwsS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">type</span> AliyunOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) Sync(oss *AliyunOSS, names []<span class="keyword">string</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> _, name := ranges names &#123;</span><br><span class="line">    data := s3.Download(name)</span><br><span class="line">    oss.Upload(name, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试确认无误后，发布上线，成功运行了几个月没出现 Bug。</p><h4 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h4><p>后来呢，产品要求你有的数据要同步到 <code>aliyun oss</code>，有一些要同步到 <code>ceph s3</code> 上。你一看，这个需求简单啊，我会。然后，你把上面的代码复制了一份，稍加改动:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CephS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Meta <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name     <span class="keyword">string</span></span><br><span class="line">  ToOss    <span class="keyword">bool</span></span><br><span class="line">  ToCephS3 <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) syncToOss(oss *AliyunOSS, name <span class="keyword">string</span>) &#123;</span><br><span class="line">  data := s3.Download(name)</span><br><span class="line">  oss.Upload(name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) syncToCephS3(cephs3 *CephS3, name <span class="keyword">string</span>) &#123;</span><br><span class="line">  data := s3.Download(name)</span><br><span class="line">  cephs3.Upload(name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (s3 *AwsS3) Sync(oss *AliyunOSS, cephs3 *CephS3, metas *Meta) &#123;</span><br><span class="line">  <span class="keyword">for</span> _, meta := ranges metas &#123;</span><br><span class="line">    data := s3.Download(meta.Name)</span><br><span class="line">    <span class="keyword">if</span> meta.ToOss &#123;</span><br><span class="line">      s3.syncToOss(oss, meta.Name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> meta.ToCephS3 &#123;</span><br><span class="line">      s3.syncToCephS3(cephs3, meta.Name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不到一天的时间就完成了开发、测试，第二天就上线了。</p><h3 id="针对接口编程"><a href="#针对接口编程" class="headerlink" title="针对接口编程"></a>针对接口编程</h3><p>实现将数据从 <code>aws s3</code> 同步到 <code>aliyun oss</code> 上，可以提取到的信息包括 <code>aws s3</code>、<code>aliyun oss</code> 两种存储系统，同步是要实现的操作。</p><p>由此引发思考，同步是一种动作，未来发生变化的可能性不大，或许有增加其他的动作可能，比如对比两个存储系统的内容，但这应该算作扩展需求，暂时无需考虑；但是存储系统就不好说了，现在是这样的要求，未来可能就会要求同步到 <code>minio</code> 上，或者同步到另一个 <code>aws s3</code> 上。</p><p>至此，可以考虑将存储系统抽象为一组接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Storage <span class="keyword">interface</span> &#123;</span><br><span class="line">  Upload(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span><br><span class="line">  Download(name <span class="keyword">string</span>) []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来思考，现在是要求从 <code>aws s3</code> 同步到 <code>aliyun oss</code> 上，既然上面已经认为未来有很大概率需要同步其他存储系统，由此提出问题: 如何确定同步的目标系统？先大胆猜测:</p><ol><li>一个服务只负责一种特定源到特定目标的同步任务</li><li>在创建同步任务时指定，即在请求参数中，适用于本次任务的所有数据</li><li>根据某种策略，或者是算法，确定每一个文件的源与目的分别是哪里</li></ol><p>那么接下来逐条分析:</p><ul><li>方法一，极其不灵活，如果有 <strong>n</strong> 个存储系统，那么一共需要启动 <strong>nx(n-1)</strong>个服务，无论是对于使用者，还是维护者来说，都可谓是灾难</li><li>方法二，相比于方法一，极大地提高了灵活性，只需要一个服务就能替代上述 <strong>nx(n-1)</strong> 个服务</li><li>方法三，相比于方法二，更进一步提高了灵活性，每一个文件都可以有独立的源与目标。但这种方法只是看起来很美好，很灵活，实际上可能并没有真实的使用场景。原因是，如果每一个文件都可以具有独立的目标，那么完全可以将目标相同的文件聚合到一起，作为一个批量的任务，这样就演变为了 <strong>方法二</strong></li></ul><p>综上所述，下面实现 <strong>方法二</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Batch <span class="keyword">struct</span> &#123;</span><br><span class="line">  From    <span class="keyword">string</span></span><br><span class="line">  Targets []<span class="keyword">string</span></span><br><span class="line">  Names   []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sync</span><span class="params">(batch *Batch)</span></span> &#123;</span><br><span class="line">  from := NewStorage(batch.From)</span><br><span class="line">  targets := NewStorages(batch.Targets)</span><br><span class="line">  <span class="keyword">for</span> _, name := <span class="keyword">range</span> batch.Names &#123;</span><br><span class="line">    data := from.Download(name)</span><br><span class="line">    <span class="keyword">for</span> _, target := <span class="keyword">range</span> targets &#123;</span><br><span class="line">      target.Upload(name, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，所有代码都是面向接口编程，需求中提到的 <code>aws s3</code> 与 <code>aliyun oss</code> 还没有出现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AwsS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AliyunOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s3 *AwsS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后，需要实现两个函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorage</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> name &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"awss3"</span>:</span><br><span class="line">      <span class="keyword">return</span> &amp;AwsS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"aliyunoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> AliyunOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"unknown name: %s"</span>, name) <span class="comment">// 只作为演示 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorages</span><span class="params">(names <span class="keyword">string</span>)</span> []<span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> results []Storage</span><br><span class="line">  <span class="keyword">for</span> _, name := <span class="keyword">range</span> names &#123;</span><br><span class="line">    results = <span class="built_in">append</span>(results, NewStorage(name))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，才终于完成了原始需求。使用面向实现方式的同学会说: 你这代码量要比面向实现的方法多很多，你实现了一个需求，我都实现好几个了。</p><p>对此，我是不慌的。</p><p>当产品要求将数据同步到 <code>cephs3</code>，<code>minio</code> 时，或者是从 <code>tencent cos</code>，本地磁盘同步到其他地方时，<code>func Sync</code> 是完全不需要改动的，代码的改动只有:</p><ol><li><p>增加对应的类型实现 <strong>Storage</strong> 接口:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CephS3 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ceph *CephS3)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ceph *CephS3)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MinIO <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(minio *MinIO)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(minio *MinIO)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Posix <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fs *Posix)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fs *Posix)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TencentOSS <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(oss *TencentOSS)</span> <span class="title">Upload</span><span class="params">(name <span class="keyword">string</span>, data []<span class="keyword">byte</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(oss *TencentOSS)</span> <span class="title">Download</span><span class="params">(name <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 <strong>func NewStorage</strong>:</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStorage</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Storage</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> name &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"awss3"</span>:</span><br><span class="line">      <span class="keyword">return</span> &amp;AwsS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"aliyunoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> AliyunOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"cephs3"</span>:</span><br><span class="line">      <span class="keyword">return</span> CephS3&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minio"</span>:</span><br><span class="line">      <span class="keyword">return</span> MinIO&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"posix"</span>:</span><br><span class="line">      <span class="keyword">return</span> Posix&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"tencentoss"</span>:</span><br><span class="line">      <span class="keyword">return</span> TencentOSS&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"unknown name: %s"</span>, name) <span class="comment">// 只作为演示 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完成所有的修改了。如果是面向实现的方式，算了，我不想了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>抽象会提升思维上的难度，但却能提高代码的灵活性。而且，灵活性还会随着抽象程度的提升一起提高。优秀的代码设计，不但能满足于眼前的需求，还提供了在不改变已有设计的前提支持对未来可能变化的需求的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Program to an interface, not an implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对接口，而非实现编程 —— 出自 GoF《设计模式: 可复用面向对象软件基础》。&lt;strong&gt;接口&lt;/st</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>代码质量衡量标准</title>
    <link href="http://divinerapier.github.io/2021/02/06/the-code-quality-metrics/"/>
    <id>http://divinerapier.github.io/2021/02/06/the-code-quality-metrics/</id>
    <published>2021-02-06T04:51:33.000Z</published>
    <updated>2021-02-07T07:32:46.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可维护性-maintainability"><a href="#可维护性-maintainability" class="headerlink" title="可维护性 (maintainability)"></a>可维护性 (maintainability)</h2><p>常见的代码维护工作，大体上包括: 修复 Bug，修改已有的代码，添加新的代码。可维护性就是用来衡量上述工作的难度。</p><p>显而易见地，修改配置的难度小于修改编译参数，小于增加代码，小于改动已有代码。改动一处代码的难度小于改动多出代码，更小于改动不知道多少处代码。</p><p>易于维护就要求，在不破坏原有代码设计、引入新 Bug 低风险的情况下，能够快速修改或者添加代码。反之，则是不易于维护。</p><p>易于维护代码应该在兼具 <strong>可读性</strong> 的前提下，具有良好的模块化设计，做到高内聚低耦合，遵从面向接口而非实现的程序设计原则。</p><p>但是，可维护性是一个偏主观的衡量标准。一段代码的可维护性依赖于代码量、业务复杂度、知识背景、文档完善度还有开发开发者水平等诸多方面的因素。</p><p>同一段代码对于不同的开发者会具有不同的可维护性。</p><h2 id="可读性-readability"><a href="#可读性-readability" class="headerlink" title="可读性 (readability)"></a>可读性 (readability)</h2><blockquote><p>Martin Fowler:”Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”</p></blockquote><p>代码被阅读的次数远超过被编写的次数，无论是学习编程、修改代码、添加代码还是进行 Code Review 时，都需要对代码进行阅读。</p><p>很多人都听说过 <strong>可读性</strong>，知道 <strong>可读性</strong> 很重要，但却并不重视。在实际写代码的时候，会为了 <strong>编写上舒服</strong>，为了 <strong>自以为的高效</strong>，为了 <strong>炫技</strong> 或者是其他什么原因，写出让其他人难以理解，甚至无法理解的代码。更有甚者，<strong>看不懂若干月之前自己写的代码</strong>。</p><p>个人认为，可读性应被看做最重要的衡量标准。因为，无论是修复 Bug 还是开发新功能，只有先读懂代码，才能得到自己需要的信息去完成接下来的工作。若是读都读不懂，那么轻则工作效率事倍功半，加班成为常态；重则引入 Bug 影响绩效。</p><p>衡量可读性可以从编码规范、命名、函数长度、模块划分、注释等方面切入。</p><p>检测可读性可以通过 Code Review，如果同事读你的代码有很多疑问就表示需要提高可读性了。</p><h2 id="可扩展性-extensibility"><a href="#可扩展性-extensibility" class="headerlink" title="可扩展性 (extensibility)"></a>可扩展性 (extensibility)</h2><p>代码的可扩展性表示代码应对未来需求变化的能力。</p><p>在添加新功能时，扩展性的高低反比与对已有代码修改的数量。修改的内容越少，则表示扩展性越好。如果能做到只通过扩展的方式添加新代码，而无需修改已有代码时，则表示代码具有非常好的可扩展性。</p><h2 id="灵活性-flexibility"><a href="#灵活性-flexibility" class="headerlink" title="灵活性 (flexibility)"></a>灵活性 (flexibility)</h2><p>灵活性也是一个比较主观的衡量标准。例如:</p><ul><li>代码具有非常好的可扩展性</li><li>底层模块抽象度高，封装良好，已于复用代码</li><li>接口可以应对各种使用场景，满足各种不同的需求</li></ul><h2 id="简洁性-simplicity"><a href="#简洁性-simplicity" class="headerlink" title="简洁性 (simplicity)"></a>简洁性 (simplicity)</h2><blockquote><p>KISS 原则: Kepp It Simple, Stupid.</p></blockquote><p>保持代码简单、结构简洁、逻辑清晰。因为，越简单的代码，越易于理解。避免在代码中引入不必要的设计模式，或其他炫技的写法。</p><h2 id="可复用性-reusability"><a href="#可复用性-reusability" class="headerlink" title="可复用性 (reusability)"></a>可复用性 (reusability)</h2><p>大部分开发者一定听过可复用性，也一定听过 <strong>Don’t Repeat Yourself</strong>，也明白同样的代码只写一次，但却很少有人能真正做到，或者说是不知道如何做:</p><ul><li>面向对象的封装、继承、多态</li><li>单一职责原则</li><li>解耦，高内聚低耦合</li></ul><h2 id="可测试性-testability"><a href="#可测试性-testability" class="headerlink" title="可测试性 (testability)"></a>可测试性 (testability)</h2><p>编写易于单元测试的代码，如果为你的代码编写单元测试很困难，那你可能需要思考，你的一个函数或模块是不是做了太多的事情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可维护性-maintainability&quot;&gt;&lt;a href=&quot;#可维护性-maintainability&quot; class=&quot;headerlink&quot; title=&quot;可维护性 (maintainability)&quot;&gt;&lt;/a&gt;可维护性 (maintainability)&lt;/</summary>
      
    
    
    
    
    <category term="programming" scheme="http://divinerapier.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>删除已合并的分支</title>
    <link href="http://divinerapier.github.io/2020/12/31/git-delete-merged-branches/"/>
    <id>http://divinerapier.github.io/2020/12/31/git-delete-merged-branches/</id>
    <published>2020-12-31T03:05:56.000Z</published>
    <updated>2020-12-31T03:06:25.302Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged | egrep -v <span class="string">"(^\*|master|dev)"</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="git" scheme="http://divinerapier.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在 Archlinux 使用 diff cmp</title>
    <link href="http://divinerapier.github.io/2020/12/16/archlinux-diffutils/"/>
    <id>http://divinerapier.github.io/2020/12/16/archlinux-diffutils/</id>
    <published>2020-12-16T06:59:09.000Z</published>
    <updated>2020-12-16T07:01:41.168Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">kubernetes</a> 仓库中的脚本依赖于 <code>cmp &amp; diff</code> 命令。</p><p>这些命令在 <a href="https://www.archlinux.org/packages/core/x86_64/diffutils/files/" target="_blank" rel="noopener">diffutils</a> 中。</p><p>使用如下方式安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S diffutils</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes&lt;/a&gt; 仓库中的脚本依赖于 &lt;code&gt;cmp &amp;amp; diff&lt;/code&gt; </summary>
      
    
    
    
    
    <category term="archlinux" scheme="http://divinerapier.github.io/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>安装 NVIDIA Driver 和 CUDA</title>
    <link href="http://divinerapier.github.io/2020/12/08/install-nvidia-driver-and-cuda/"/>
    <id>http://divinerapier.github.io/2020/12/08/install-nvidia-driver-and-cuda/</id>
    <published>2020-12-08T02:46:02.000Z</published>
    <updated>2020-12-08T04:33:22.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ /home/sihao$ cat /etc/os-release</span><br><span class="line"></span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"18.04.4 LTS (Bionic Beaver)"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 18.04.4 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"18.04"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"https://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.launchpad.net/ubuntu/"</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span></span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><p><strong>GPU: GTX 2080Ti</strong>。</p><h2 id="下载安装程序"><a href="#下载安装程序" class="headerlink" title="下载安装程序"></a>下载安装程序</h2><p><strong>cuda</strong> 版本为 <a href="https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=runfilelocal" target="_blank" rel="noopener">cuda10.0</a></p><p><strong>NVIDIA Driver</strong> 版本为 440.82</p><h2 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/cuda-10.0 /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/cuda/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:<span class="variable">$LD_LIBRARY_PATH</span>"</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"/usr/local/cuda/lib64"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h2 id="安装-NVIDIA-Driver"><a href="#安装-NVIDIA-Driver" class="headerlink" title="安装 NVIDIA Driver"></a>安装 NVIDIA Driver</h2><h3 id="卸载已有-NVIDIA-Driver"><a href="#卸载已有-NVIDIA-Driver" class="headerlink" title="卸载已有 NVIDIA Driver"></a>卸载已有 NVIDIA Driver</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/nvidia-uninstall</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="安装新-NVIDIA-Driver"><a href="#安装新-NVIDIA-Driver" class="headerlink" title="安装新 NVIDIA Driver"></a>安装新 NVIDIA Driver</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh NVIDIA-Linux-x86_64-440.82.run</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://forums.developer.nvidia.com/t/libcublas-so-10-0-cannot-be-found/69629" target="_blank" rel="noopener">libcublas-so-10-0-cannot-be-found</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="nvidia" scheme="http://divinerapier.github.io/tags/nvidia/"/>
    
    <category term="cuda" scheme="http://divinerapier.github.io/tags/cuda/"/>
    
  </entry>
  
  <entry>
    <title>Volcano Plugin - binpack</title>
    <link href="http://divinerapier.github.io/2020/12/07/volcano-plugin-binpack/"/>
    <id>http://divinerapier.github.io/2020/12/07/volcano-plugin-binpack/</id>
    <published>2020-12-07T07:17:39.000Z</published>
    <updated>2020-12-08T07:32:05.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>binpack</strong> 解决的问题是，提高节点的利用率，避免资源碎片化。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>如下代码来自: <code>pkg/scheduler/plugins/binpack/binpack.go</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BinPackingScore use the best fit polices during scheduling.</span></span><br><span class="line"><span class="comment">// Goals:</span></span><br><span class="line"><span class="comment">// - Schedule Jobs using BestFit Policy using Resource Bin Packing Priority Function</span></span><br><span class="line"><span class="comment">// - Reduce Fragmentation of scarce resources on the Cluster</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinPackingScore</span><span class="params">(task *api.TaskInfo, node *api.NodeInfo, weight priorityWeight)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    score := <span class="number">0.0</span></span><br><span class="line">    weightSum := <span class="number">0</span></span><br><span class="line">    requested := task.Resreq</span><br><span class="line">    allocatable := node.Allocatable</span><br><span class="line">    used := node.Used</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, resource := <span class="keyword">range</span> requested.ResourceNames() &#123;</span><br><span class="line">        request := requested.Get(resource)</span><br><span class="line">        <span class="keyword">if</span> request == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        allocate := allocatable.Get(resource)</span><br><span class="line">        nodeUsed := used.Get(resource)</span><br><span class="line"></span><br><span class="line">        resourceWeight := <span class="number">0</span></span><br><span class="line">        found := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">switch</span> resource &#123;</span><br><span class="line">        <span class="keyword">case</span> v1.ResourceCPU:</span><br><span class="line">            resourceWeight = weight.BinPackingCPU</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> v1.ResourceMemory:</span><br><span class="line">            resourceWeight = weight.BinPackingMemory</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            resourceWeight, found = weight.BinPackingResources[resource]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !found &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resourceScore := ResourceBinPackingScore(request, allocate, nodeUsed, resourceWeight)</span><br><span class="line">        klog.V(<span class="number">5</span>).Infof(<span class="string">"task %s/%s on node %s resource %s, need %f, used %f, allocatable %f, weight %d, score %f"</span>, task.Namespace, task.Name, node.Name, resource, request, nodeUsed, allocate, resourceWeight, resourceScore)</span><br><span class="line"></span><br><span class="line">        score += resourceScore</span><br><span class="line">        weightSum += resourceWeight</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapping the result from [0, weightSum] to [0, 10(MaxPriority)]</span></span><br><span class="line">    <span class="keyword">if</span> weightSum &gt; <span class="number">0</span> &#123;</span><br><span class="line">        score /= <span class="keyword">float64</span>(weightSum)</span><br><span class="line">    &#125;</span><br><span class="line">    score *= <span class="keyword">float64</span>(v1alpha1.MaxNodeScore * <span class="keyword">int64</span>(weight.BinPackingWeight))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResourceBinPackingScore calculate the binpack score for resource with provided info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResourceBinPackingScore</span><span class="params">(requested, capacity, used <span class="keyword">float64</span>, weight <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> capacity == <span class="number">0</span> || weight == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    usedFinally := requested + used</span><br><span class="line">    <span class="keyword">if</span> usedFinally &gt; capacity &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    score := usedFinally * <span class="keyword">float64</span>(weight) / capacity</span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volcano-scheduler-configmap</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">volcano-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">volcano-scheduler.conf:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">actions:</span> <span class="string">"enqueue, allocate, backfill"</span></span><br><span class="line">    <span class="attr">tiers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">priority</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gang</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conformance</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">drf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">predicates</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proportion</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nodeorder</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">binpack</span></span><br><span class="line">        <span class="attr">arguments:</span></span><br><span class="line">          <span class="comment"># binpack 插件权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.weight:</span> <span class="number">10</span></span><br><span class="line">          <span class="comment"># cpu 资源权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.cpu:</span> <span class="number">1</span></span><br><span class="line">          <span class="comment"># memory 资源权重</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.memory:</span> <span class="number">1</span></span><br><span class="line">          <span class="comment"># gpu 等其他资源类型</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.resources:</span> <span class="string">nvidia.com/gpu</span></span><br><span class="line">          <span class="comment"># gpu 等其他资源权重配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">binpack.resources.nvidia.com/gpu:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Volcano-Scheduler-日志"><a href="#Volcano-Scheduler-日志" class="headerlink" title="Volcano Scheduler 日志"></a>Volcano Scheduler 日志</h3><p><strong>Volcano Scheduler</strong> 中可以看到 <strong>binpack plugin</strong> 加载的配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n volcano-system logs -f volcano-scheduler-566b6f749d-4wr6m</span><br><span class="line"></span><br><span class="line">I1208 07:27:43.875761       1 binpack.go:161] Leaving binpack plugin. binpack.weight[10], binpack.cpu[1], binpack.memory[1], nvidia.com/gpu[2] ...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;binpack&lt;/strong&gt; 解决的问题是，提高节点的利用率，避免资源碎片化。&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="volcano" scheme="http://divinerapier.github.io/tags/volcano/"/>
    
  </entry>
  
  <entry>
    <title>删除所有 Evicted 状态的 Pod</title>
    <link href="http://divinerapier.github.io/2020/12/01/delete-all-evicted-pods/"/>
    <id>http://divinerapier.github.io/2020/12/01/delete-all-evicted-pods/</id>
    <published>2020-12-01T05:53:47.000Z</published>
    <updated>2020-12-01T05:54:30.431Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -ojson | jq -r <span class="string">'.items[] | select(.status.reason!=null) | select(.status.reason | contains("Evicted")) | .metadata.namespace + " " + .metadata.name'</span> | xargs -n2 -l bash -c <span class="string">'kubectl delete pods -n $0 $1'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>设置容器内的 locale</title>
    <link href="http://divinerapier.github.io/2020/11/30/set-locale-inside-a-container/"/>
    <id>http://divinerapier.github.io/2020/11/30/set-locale-inside-a-container/</id>
    <published>2020-11-30T02:22:26.000Z</published>
    <updated>2020-11-30T06:17:58.252Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法面向 <strong>Ubuntu/Debian</strong> 系列，<strong>CentOS</strong> 系列方法类似。</p><h2 id="在容器内处理"><a href="#在容器内处理" class="headerlink" title="在容器内处理"></a>在容器内处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt update --fix-missing</span><br><span class="line">apt install -y locales</span><br><span class="line">sed -i <span class="string">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen</span><br><span class="line">locale-gen</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LANG=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LANGUAGE=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LC_ALL=en_US.UTF-8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936"</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set termencoding=utf-8"</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set encoding=utf-8"</span> &gt;&gt; ~/.vimrc</span><br></pre></td></tr></table></figure><h2 id="在-Dockerfile-中处理"><a href="#在-Dockerfile-中处理" class="headerlink" title="在 Dockerfile 中处理"></a>在 Dockerfile 中处理</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update --fix-missing \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y locales \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen \</span></span><br><span class="line"><span class="bash">    &amp;&amp; locale-gen</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936"</span> &gt;&gt; ~/.vimrc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"set termencoding=utf-8"</span> &gt;&gt; ~/.vimrc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"set encoding=utf-8"</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解决办法面向 &lt;strong&gt;Ubuntu/Debian&lt;/strong&gt; 系列，&lt;strong&gt;CentOS&lt;/strong&gt; 系列方法类似。&lt;/p&gt;
&lt;h2 id=&quot;在容器内处理&quot;&gt;&lt;a href=&quot;#在容器内处理&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://divinerapier.github.io/tags/linux/"/>
    
    <category term="container" scheme="http://divinerapier.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>并行程序设计</title>
    <link href="http://divinerapier.github.io/2020/11/21/introduction-to-parallel-programming/"/>
    <id>http://divinerapier.github.io/2020/11/21/introduction-to-parallel-programming/</id>
    <published>2020-11-21T06:24:38.000Z</published>
    <updated>2020-11-23T02:10:49.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要并行程序"><a href="#为什么需要并行程序" class="headerlink" title="为什么需要并行程序"></a>为什么需要并行程序</h2><p>单核心的性能不满足需求。</p><h2 id="如何设计并行程序"><a href="#如何设计并行程序" class="headerlink" title="如何设计并行程序"></a>如何设计并行程序</h2><p>在软件层面，通常的方案的基本思想是将要完成的任务分配给各个处理核心。有两种广泛采用的方法: <strong>任务并行</strong> 和 <strong>数据并行</strong>。</p><p>以如下问题解释说明:</p><p>试卷共计 5 道题目，有 100 名学生参加考试，5 名教师阅卷。</p><h3 id="任务并行"><a href="#任务并行" class="headerlink" title="任务并行"></a>任务并行</h3><p>将待解决的问题所需要执行的各个任务分配到各个核心上执行。</p><p>对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，批改每一道题是一个任务。则将任务分配到核心的含义是: 每一名教师只需要负责批阅固定的一道题目。</p><h3 id="数据并行"><a href="#数据并行" class="headerlink" title="数据并行"></a>数据并行</h3><p>将待解决问题所需要处理的数据分配给各个处理核心，每个处理核心执行相同的操作。</p><p>对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，将试卷 —— 也就是数据分配给教师，教师负责试卷的整个批阅过程。各个老师是做的工作是相同的。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如何衡量并行程序的性能指标。</p><h3 id="加速比和效率"><a href="#加速比和效率" class="headerlink" title="加速比和效率"></a>加速比和效率</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要并行程序&quot;&gt;&lt;a href=&quot;#为什么需要并行程序&quot; class=&quot;headerlink&quot; title=&quot;为什么需要并行程序&quot;&gt;&lt;/a&gt;为什么需要并行程序&lt;/h2&gt;&lt;p&gt;单核心的性能不满足需求。&lt;/p&gt;
&lt;h2 id=&quot;如何设计并行程序&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="parallel programming" scheme="http://divinerapier.github.io/tags/parallel-programming/"/>
    
  </entry>
  
  <entry>
    <title>测试节点之间的网络带宽</title>
    <link href="http://divinerapier.github.io/2020/11/19/testing-the-bandwidth-between-two-nodes/"/>
    <id>http://divinerapier.github.io/2020/11/19/testing-the-bandwidth-between-two-nodes/</id>
    <published>2020-11-19T05:14:30.000Z</published>
    <updated>2020-11-19T08:05:50.160Z</updated>
    
    <content type="html"><![CDATA[<p>昨天同事找到我，说 <strong>nfs</strong> 太慢了，通过 <strong>iostat</strong> 看只有 <strong>1-2MB/s</strong> 的写入速度。在通过 <strong>fio</strong> 测试磁盘顺序写入速度，得到结果为 <strong>300MB/s</strong> 之后，遂怀疑是网络的问题。</p><h2 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h2><blockquote><p>iperf is a tool for performing network throughput measurements.  It can test either TCP or UDP throughput.  To perform an iperf test the user must establish both a server (to discard traffic) and a client (to generate traffic).</p></blockquote><p>此处省略安装过程。</p><h3 id="测试网络带宽"><a href="#测试网络带宽" class="headerlink" title="测试网络带宽"></a>测试网络带宽</h3><p><strong>iperf</strong> 通过使用不同的命令行参数，支持分别作为 <strong>服务端</strong> 或 <strong>客户端</strong>。</p><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><p>监听默认端口 <strong>5001</strong>，启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s</span><br></pre></td></tr></table></figure><p>或者，监听指定端口，启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s -p &lt;port&gt;</span><br></pre></td></tr></table></figure><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p>连接默认端口 <strong>5001</strong>，启动客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt;</span><br></pre></td></tr></table></figure><p>或者，连接指定端口，启动客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt; -p &lt;port&gt;</span><br></pre></td></tr></table></figure><p>同时，<strong>iperf</strong> 也支持多线程的客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c &lt;server-host&gt; -p &lt;port&gt; -P &lt;threadiness&gt;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>单线程客户端的测试结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.33.28.26, TCP port 9999</span><br><span class="line">TCP window size:  170 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] <span class="built_in">local</span> 172.29.60.164 port 37290 connected with 10.33.28.26 port 9999</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.6 sec  24.0 MBytes  19.0 Mbits/sec</span><br></pre></td></tr></table></figure><p>多线程客户端的测试结果，两个节点都有 <strong>16</strong> 个 <strong>CPU</strong> 核心:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.33.28.26, TCP port 9999</span><br><span class="line">TCP window size: 85.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[ 18] <span class="built_in">local</span> 172.29.60.164 port 37392 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 17] <span class="built_in">local</span> 172.29.60.164 port 37390 connected with 10.33.28.26 port 9999</span><br><span class="line">[  4] <span class="built_in">local</span> 172.29.60.164 port 37364 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 11] <span class="built_in">local</span> 172.29.60.164 port 37378 connected with 10.33.28.26 port 9999</span><br><span class="line">[  9] <span class="built_in">local</span> 172.29.60.164 port 37374 connected with 10.33.28.26 port 9999</span><br><span class="line">[  8] <span class="built_in">local</span> 172.29.60.164 port 37372 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 10] <span class="built_in">local</span> 172.29.60.164 port 37376 connected with 10.33.28.26 port 9999</span><br><span class="line">[  6] <span class="built_in">local</span> 172.29.60.164 port 37366 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 13] <span class="built_in">local</span> 172.29.60.164 port 37382 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 14] <span class="built_in">local</span> 172.29.60.164 port 37384 connected with 10.33.28.26 port 9999</span><br><span class="line">[  3] <span class="built_in">local</span> 172.29.60.164 port 37362 connected with 10.33.28.26 port 9999</span><br><span class="line">[  5] <span class="built_in">local</span> 172.29.60.164 port 37368 connected with 10.33.28.26 port 9999</span><br><span class="line">[  7] <span class="built_in">local</span> 172.29.60.164 port 37370 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 15] <span class="built_in">local</span> 172.29.60.164 port 37386 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 16] <span class="built_in">local</span> 172.29.60.164 port 37388 connected with 10.33.28.26 port 9999</span><br><span class="line">[ 12] <span class="built_in">local</span> 172.29.60.164 port 37380 connected with 10.33.28.26 port 9999</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.2 sec  2.62 MBytes  2.17 Mbits/sec</span><br><span class="line">[ 13]  0.0-10.2 sec  2.88 MBytes  2.36 Mbits/sec</span><br><span class="line">[ 15]  0.0-10.2 sec  1.88 MBytes  1.54 Mbits/sec</span><br><span class="line">[  7]  0.0-10.9 sec  1.50 MBytes  1.15 Mbits/sec</span><br><span class="line">[  6]  0.0-11.0 sec  1.75 MBytes  1.34 Mbits/sec</span><br><span class="line">[ 17]  0.0-11.2 sec  1.88 MBytes  1.40 Mbits/sec</span><br><span class="line">[  5]  0.0-11.3 sec  1.50 MBytes  1.12 Mbits/sec</span><br><span class="line">[ 10]  0.0-11.6 sec  1.88 MBytes  1.35 Mbits/sec</span><br><span class="line">[  9]  0.0-12.4 sec  1.62 MBytes  1.10 Mbits/sec</span><br><span class="line">[  4]  0.0-13.0 sec  2.88 MBytes  1.85 Mbits/sec</span><br><span class="line">[ 11]  0.0-13.0 sec  4.62 MBytes  2.98 Mbits/sec</span><br><span class="line">[ 14]  0.0-13.1 sec  4.88 MBytes  3.12 Mbits/sec</span><br><span class="line">[  8]  0.0-13.9 sec  2.12 MBytes  1.28 Mbits/sec</span><br><span class="line">[ 16]  0.0-14.1 sec  2.00 MBytes  1.19 Mbits/sec</span><br><span class="line">[ 18]  0.0-14.1 sec  2.12 MBytes  1.26 Mbits/sec</span><br><span class="line">[ 12]  0.0-14.3 sec  1.73 MBytes  1.01 Mbits/sec</span><br><span class="line">[SUM]  0.0-14.3 sec  37.9 MBytes  22.1 Mbits/sec</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>瓶颈在网络带宽，悲哀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天同事找到我，说 &lt;strong&gt;nfs&lt;/strong&gt; 太慢了，通过 &lt;strong&gt;iostat&lt;/strong&gt; 看只有 &lt;strong&gt;1-2MB/s&lt;/strong&gt; 的写入速度。在通过 &lt;strong&gt;fio&lt;/strong&gt; 测试磁盘顺序写入速度，得到结果</summary>
      
    
    
    
    
    <category term="network" scheme="http://divinerapier.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Volcano</title>
    <link href="http://divinerapier.github.io/2020/11/16/volcano/"/>
    <id>http://divinerapier.github.io/2020/11/16/volcano/</id>
    <published>2020-11-16T06:43:43.000Z</published>
    <updated>2020-11-18T03:31:38.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>从 <a href="https://github.com/volcano-sh/volcano/releases" target="_blank" rel="noopener">volocano release</a> 下载 <strong>Volcano</strong>，通过 <strong>yaml</strong> 文件创建 <strong>Deployment</strong> 等。</p><p>以当前版本 <strong>v1.1.0</strong> 为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/volcano-sh/volcano/releases/download/v1.1.0/volcano-v1.1.0-linux-gnu.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar xzf volcano-v1.1.0-linux-gnu.tar.gz</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f ./volcano-v1.1.0.yaml</span><br><span class="line">namespace/volcano-system created</span><br><span class="line">namespace/volcano-monitoring created</span><br><span class="line">configmap/volcano-scheduler-configmap created</span><br><span class="line">serviceaccount/volcano-scheduler created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-scheduler created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-scheduler-role created</span><br><span class="line">deployment.apps/volcano-scheduler created</span><br><span class="line">service/volcano-scheduler-service created</span><br><span class="line">serviceaccount/volcano-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-admission-role created</span><br><span class="line">deployment.apps/volcano-admission created</span><br><span class="line">service/volcano-admission-service created</span><br><span class="line">job.batch/volcano-admission-init created</span><br><span class="line">serviceaccount/volcano-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/volcano-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/volcano-controllers-role created</span><br><span class="line">deployment.apps/volcano-controllers created</span><br><span class="line">Warning: apiextensions.k8s.io/v1beta1 CustomResourceDefinition is deprecated <span class="keyword">in</span> v1.16+, unavailable <span class="keyword">in</span> v1.22+; use apiextensions.k8s.io/v1 CustomResourceDefinition</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/jobs.batch.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/commands.bus.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/podgroups.scheduling.volcano.sh created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/queues.scheduling.volcano.sh created</span><br></pre></td></tr></table></figure><p>验证 <strong>Volcano</strong> 组件运行状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get all -n volcano-system</span><br><span class="line">NAME                                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/volcano-admission-7cfdf5b8d-cd2mk    1/1     Running     0          6m27s</span><br><span class="line">pod/volcano-admission-init-rmd7w         0/1     Completed   0          6m27s</span><br><span class="line">pod/volcano-controllers-c4c5f48b-dtx4w   1/1     Running     0          6m27s</span><br><span class="line">pod/volcano-scheduler-54f77d6788-d6t9j   1/1     Running     0          6m27s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/volcano-admission-service   ClusterIP   10.5.51.59    &lt;none&gt;        443/TCP    6m27s</span><br><span class="line">service/volcano-scheduler-service   ClusterIP   10.5.128.19   &lt;none&gt;        8080/TCP   6m27s</span><br><span class="line"></span><br><span class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/volcano-admission     1/1     1            1           6m27s</span><br><span class="line">deployment.apps/volcano-controllers   1/1     1            1           6m27s</span><br><span class="line">deployment.apps/volcano-scheduler     1/1     1            1           6m27s</span><br><span class="line"></span><br><span class="line">NAME                                           DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/volcano-admission-7cfdf5b8d    1         1         1       6m27s</span><br><span class="line">replicaset.apps/volcano-controllers-c4c5f48b   1         1         1       6m27s</span><br><span class="line">replicaset.apps/volcano-scheduler-54f77d6788   1         1         1       6m27s</span><br><span class="line"></span><br><span class="line">NAME                               COMPLETIONS   DURATION   AGE</span><br><span class="line">job.batch/volcano-admission-init   1/1           4m24s      6m27s</span><br></pre></td></tr></table></figure><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><h3 id="CPU-任务"><a href="#CPU-任务" class="headerlink" title="CPU 任务"></a>CPU 任务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeflow.org/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MPIJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">volcano</span></span><br><span class="line">  <span class="attr">slotsPerWorker:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cleanPodPolicy:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">mpiReplicaSpecs:</span></span><br><span class="line">    <span class="attr">Launcher:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">         <span class="attr">spec:</span></span><br><span class="line">           <span class="attr">containers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">divinerapier/openmpi-helloworld:0.0.1</span></span><br><span class="line">             <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line">             <span class="attr">command:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">mpirun</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--allow-run-as-root</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-np</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">"2"</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">/helloworld/mpi_hello_world</span></span><br><span class="line">             <span class="attr">resources:</span></span><br><span class="line">               <span class="attr">request:</span></span><br><span class="line">                 <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">               <span class="attr">limits:</span></span><br><span class="line">                 <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">    <span class="attr">Worker:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">divinerapier/openmpi-helloworld:0.0.1</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">openmpi-helloworld-job</span></span><br><span class="line">            <span class="attr">resources:</span></span><br><span class="line">              <span class="attr">request:</span></span><br><span class="line">                <span class="attr">cpu:</span> <span class="number">0.1</span></span><br><span class="line">              <span class="attr">limits:</span></span><br><span class="line">                <span class="attr">cpu:</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure><h3 id="GPU-任务"><a href="#GPU-任务" class="headerlink" title="GPU 任务"></a>GPU 任务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeflow.org/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MPIJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">volcano</span></span><br><span class="line">  <span class="attr">slotsPerWorker:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cleanPodPolicy:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">mpiReplicaSpecs:</span></span><br><span class="line">    <span class="attr">Launcher:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">         <span class="attr">spec:</span></span><br><span class="line">           <span class="attr">containers:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mpioperator/tensorflow-benchmarks:latest</span></span><br><span class="line">             <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line">             <span class="attr">command:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">mpirun</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--allow-run-as-root</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-np</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">"2"</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-bind-to</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">none</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-map-by</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">slot</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">NCCL_DEBUG=INFO</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">LD_LIBRARY_PATH</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">PATH</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-mca</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">pml</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">ob1</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">-mca</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">btl</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">^openib</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--model=resnet101</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--batch_size=64</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">--variable_update=horovod</span></span><br><span class="line">             <span class="attr">resources:</span></span><br><span class="line">               <span class="attr">limits:</span></span><br><span class="line">                 <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Worker:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mpioperator/tensorflow-benchmarks:latest</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">tensorflow-benchmarks</span></span><br><span class="line">            <span class="attr">resources:</span></span><br><span class="line">              <span class="attr">limits:</span></span><br><span class="line">                <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>volcano-scheduler</strong> 在调度任务时，当任务使用的资源太少时会被跳过，具体逻辑为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    minMilliCPU <span class="keyword">float64</span> = <span class="number">10</span></span><br><span class="line">    minMilliScalarResources <span class="keyword">float64</span> = <span class="number">10</span></span><br><span class="line">    minMemory <span class="keyword">float64</span> = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(alloc *Action)</span> <span class="title">Execute</span><span class="params">(ssn *framework.Session)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> _, found = pendingTasks[job.UID]; !found &#123;</span><br><span class="line">        tasks := util.NewPriorityQueue(ssn.TaskOrderFn)</span><br><span class="line">        <span class="keyword">for</span> _, task := <span class="keyword">range</span> job.TaskStatusIndex[api.Pending] &#123;</span><br><span class="line">            <span class="comment">// Skip BestEffort task in 'allocate' action.</span></span><br><span class="line">            <span class="keyword">if</span> task.Resreq.IsEmpty() &#123;</span><br><span class="line">                klog.V(<span class="number">4</span>).Infof(<span class="string">"Task &lt;%v/%v&gt; is BestEffort task, skip it."</span>,</span><br><span class="line">                task.Namespace, task.Name)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tasks.Push(task)</span><br><span class="line">        &#125;</span><br><span class="line">        pendingTasks[job.UID] = tasks</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty returns bool after checking any of resource is less than min possible value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resource)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r.MilliCPU &gt;= minMilliCPU || r.Memory &gt;= minMemory &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, rQuant := <span class="keyword">range</span> r.ScalarResources &#123;</span><br><span class="line">        <span class="keyword">if</span> rQuant &gt;= minMilliScalarResources &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，在使用 <strong>volcano</strong> 作为调度器时，必须要对 <strong>Pod</strong> 使用的资源做出限制。对于使用 <strong>volcano</strong> 调度 <strong>MPIJob</strong> 时，无论是 <strong>Launcher</strong> 还是 <strong>Worker</strong> 都需要显示声明需要的资源。</p><p>更具体地，<strong>volcano</strong> 会将资源分为两个大类:</p><ul><li><strong>CPU</strong> 与 <strong>Memory</strong></li><li>其他资源</li></ul><p>要求上述两类资源，至少有一类使用的资源满足最低要求即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;从 &lt;a href=&quot;https://github.com/</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="scheduler" scheme="http://divinerapier.github.io/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>调度与驱逐 —— 将 Pod 分配到节点上</title>
    <link href="http://divinerapier.github.io/2020/11/15/scheduling-and-eviction-assigning-pods-to-nodes/"/>
    <id>http://divinerapier.github.io/2020/11/15/scheduling-and-eviction-assigning-pods-to-nodes/</id>
    <published>2020-11-15T10:47:40.000Z</published>
    <updated>2020-11-15T13:38:36.880Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">Labels and Selectors</a> 来选择。该约束为可选项，默认情况下调度器将自动进行合理的调度，比如，将 pod 分散到节点上，而非在可用资源不足的节点上。但在某些情况下，用户期望对调度 Pod 的 Node(s) 有更多控制，例如，确保 pod 最终落在有 SSD 的机器上，或者将若干有大量通信的服务的 pod 放置在同一个可用区。</p><h2 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h2><p><strong>nodeSelector</strong> 是最简单推荐形式的节点选择约束。nodeSelector 是 PodSpec 的一个字段，其包含键值对映射。为了使 pod 可以在某个节点上运行，约束键值对构成的集合必须是节点标签集合的子集。</p><h3 id="Get-nodes"><a href="#Get-nodes" class="headerlink" title="Get nodes"></a>Get nodes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="Get-the-names-of-cluster’s-nodes"><a href="#Get-the-names-of-cluster’s-nodes" class="headerlink" title="Get the names of cluster’s nodes"></a>Get the names of cluster’s nodes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="Attach-label-to-the-node"><a href="#Attach-label-to-the-node" class="headerlink" title="Attach label to the node"></a>Attach label to the node</h3><p>规则为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;</span><br></pre></td></tr></table></figure><p>例如，节点 ‘kubernetes-foo-node-1.c.a-robinson.internal’，标签 ‘disktype=ssd’，则可以执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes kubernetes-foo-node-1.c.a-robinson.internal disktype=ssd</span><br></pre></td></tr></table></figure><p>通过命令验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node &lt;node-name&gt;</span><br></pre></td></tr></table></figure><h3 id="Add-a-nodeSelector-field-to-your-pod-configuration"><a href="#Add-a-nodeSelector-field-to-your-pod-configuration" class="headerlink" title="Add a nodeSelector field to your pod configuration"></a>Add a nodeSelector field to your pod configuration</h3><p>如下为原始 Pod 配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>在此基础上，添加 nodeSelector:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure><p>而改文件可以在 <a href="https://k8s.io/examples/pods/pod-nginx.yaml" target="_blank" rel="noopener">https://k8s.io/examples/pods/pod-nginx.yaml</a> 得到。因此，使用如下命令创建 Pod:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/pods/pod-nginx.yaml</span><br></pre></td></tr></table></figure><p>之后，查看 Pod 所在的 Node 并验证约束是否有效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">kubectl describe node &lt;node-name&gt;</span><br></pre></td></tr></table></figure><h3 id="Affinity-and-anti-affinity"><a href="#Affinity-and-anti-affinity" class="headerlink" title="Affinity and anti-affinity"></a>Affinity and anti-affinity</h3><p>Affinity and anti-affinity (亲和与反亲和) 是 nodeSelector 提供的一种非常简单的将 pod 约束到具有特定标签的节点上的方法，极大地扩展了用户可以表达约束的类型。关键增强表现为:</p><ol><li>语言更具表现力，不只是 “完全匹配的 AND” 语义</li><li>规则可以是一种建议性的，而非硬性要求，即使调度器无法找到满足要求的 Node，依旧会调度该 pod</li><li>除了可以使用 Node 本身的标签作为约束之外，还可以使用运行在 Node 上的 pod 的标签作为约束，表明可以或者不可以与哪些 pod 运行在同一 Node 上。</li></ol><p>Affinity 功能包含两种类型的 affinity: <strong>node affinity</strong> 与 <strong>inter-pod affinity/anti-affinity</strong>。<strong>node affinity</strong> 类似于 <strong>nodeSelector</strong>，对应上述 <strong>1,2</strong> 两点优势。而 <strong>inter-pod affinity/anti-affinity</strong> 具有上述 <strong>1,2,3</strong> 三点优势。</p><h4 id="Node-affinity"><a href="#Node-affinity" class="headerlink" title="Node affinity"></a>Node affinity</h4><p><strong>Node affinity</strong> 概念上类似于 <strong>nodeSelector</strong>，可以根据节点上的标签来约束 pod 可以调度到哪些节点。</p><p>目前有两种类型的 Node affinity，分别为 <strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 和 <strong>preferredDuringSchedulingIgnoredDuringExecution</strong>。</p><p><strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 指定了将 pod 调度到一个节点上必须满足的规则，原则上等同于 nodeSelector，但语法更具有表现力。</p><p><strong>preferredDuringSchedulingIgnoredDuringExecution</strong> 指定调度器将尝试执行但不能保证的偏好。</p><p>名称中 <strong>IgnoredDuringExecution</strong> 类似于 <strong>nodeSelector</strong> 的用法，表明如果节点的标签在 Pod 运行时发生变更，从而不再满足 pod 上的 affinity 规则时，pod 将仍然继续运行在原节点上。<strong>requiredDuringSchedulingRequiredDuringExecution</strong> 还只存在于计划中。</p><p>因此，在下面的示例中:</p><ul><li><strong>requiredDuringSchedulingIgnoredDuringExecution</strong> 的含义为: <strong>必须将 pod 运行在具有 kubernetes.io/e2e-az-name=e2e-az1 或 kubernetes.io/e2e-az-name=e2e-az2 标签的 Node 上</strong></li><li><strong>preferredDuringSchedulingIgnoredDuringExecution</strong> 的含义为: <strong>尝试将 pod 运行具有 another-node-label-key=another-node-label-value 标签的 Node 上，如果这不可能的话，则允许 pod 在其他地方运行</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/e2e-az-name</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">e2e-az2</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">another-node-label-key</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">another-node-label-value</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause:2.0</span></span><br></pre></td></tr></table></figure><p>Node affinity 语法支持的操作符: In，NotIn，Exists，DoesNotExist，Gt，Lt。使用 NotIn 和 DoesNotExist 来实现 <strong>node anti-affinity</strong> 行为，或者使用 <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/" target="_blank" rel="noopener">node taints(节点污点将)</a> pod 从特定节点中驱逐。</p><p>如果同时指定了 <strong>nodeSelector</strong> 和 <strong>nodeAffinity</strong>，则要求两者必须同时满足，才能将 pod 调度到候选 Node 上。</p><p>如果指定了多个与 <strong>nodeAffinity</strong> 类型关联的 <strong>nodeSelectorTerms</strong>，则 Node 只需要满足其中任何一个 nodeSelectorTerms 即可将 pod 调度到 Node 上。</p><p>如果指定了多个与 <strong>nodeSelectorTerms</strong> 关联的 <strong>matchExpressions</strong>，则当且仅当所有 <strong>matchExpressions</strong> 得到满足时才将 pod 调度到该 Node 上。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/" target="_blank" rel="noopener">Assigning Pods to Nodes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://divinerapier.github.io/tags/kubernetes/"/>
    
    <category term="scheduling" scheme="http://divinerapier.github.io/tags/scheduling/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Device Plugin</title>
    <link href="http://divinerapier.github.io/2020/11/15/kubernetes-device-plugin/"/>
    <id>http://divinerapier.github.io/2020/11/15/kubernetes-device-plugin/</id>
    <published>2020-11-15T09:20:26.000Z</published>
    <updated>2020-11-15T10:27:25.570Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 提供 <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/device-plugin.md" target="_blank" rel="noopener">device plugin framework</a>，允许用户将系统硬件资源发布到 Kubelet。</p><p>Device Plugin 由设备供应商实现，由用户或手动部署或作为 DaemonSet 来部署，而无需定制 Kubernetes 本身的代码。目标设备可以是 GPU、高性能 NIC、FPGA、InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。</p><h2 id="注册-Device-Plugin"><a href="#注册-Device-Plugin" class="headerlink" title="注册 Device Plugin"></a>注册 Device Plugin</h2><p>kubelet 提供了一个 Registration 的 gRPC 服务:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Registration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Register(RegisterRequest) <span class="keyword">returns</span> (Empty) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Device Plugin</strong> 可以通过此 gRPC 服务在 kubelet 进行注册。在注册时，<strong>Device Plugin</strong> 需要提供如下内容:</p><ul><li>Device Plugin 的 Unix 套接字。</li><li>Device Plugin 的 API 版本。</li><li>ResourceName。遵循 <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#extended-resources" target="_blank" rel="noopener">扩展资源命名方案</a>，形如 vendor-domain/resourcetype: 比如 NVIDIA GPU 就被公布为 nvidia.com/gpu。</li></ul><p>在成功注册后，<strong>Device Plugin</strong> 会向 kubelet 发送他所管理的设备列表，之后 kubelet 负责将这些资源发布到 API Server，作为 kubelet 节点状态更新的一部分。</p><p>比如，<strong>Device Plugin</strong> 在 kubelet 中注册了 <strong>hardware-vendor.example/foo</strong> 并报告了节点上的两个运行状况良好的设备后，节点状态将更新以通告该节点已安装2个 Foo 设备并且是可用的。</p><p>然后，用户就可以在 Container 规范中请求这类设备，但是有以下的限制:</p><ul><li>扩展资源仅可作为整数资源使用，且不能被过量使用</li><li>设备不能在容器之间共享</li></ul><p>假设 Kubernetes 集群正在运行一个 <strong>Device Plugin</strong>，ResourceName 为 <strong>hardware-vendor.example/foo</strong>。下面就是一个 Pod 示例，请求此资源以运行某演示负载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">demo-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause:2.0</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">hardware-vendor.example/foo:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># pod 需要两个 hardware-vendor.example/foo 设备</span></span><br><span class="line"><span class="comment"># 而且只能够调度到满足需求的 node 上</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果该节点中有2个以上的设备可用，剩余的设备可供其他 pod 使用</span></span><br></pre></td></tr></table></figure><h2 id="实现-Device-Plugin"><a href="#实现-Device-Plugin" class="headerlink" title="实现 Device Plugin"></a>实现 Device Plugin</h2><p>Device Plugin 的常规工作流程包括以下几个步骤：</p><ul><li><p>初始化。在这个阶段，Device Plugin 将执行供应商特定的初始化和设置，以确保设备处于就绪状态。</p></li><li><p>使用主机路径 /var/lib/kubelet/device-plugins/ 下的 Unix socket 启动一个 gRPC 服务，该服务实现以下接口：</p>  <figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">DevicePlugin</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GetDevicePluginOptions returns options to be communicated with Device Manager.</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> GetDevicePluginOptions(Empty) <span class="keyword">returns</span> (DevicePluginOptions) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // ListAndWatch <span class="keyword">returns</span> a stream of List of Devices</span></span><br><span class="line"><span class="function">    // Whenever a Device state change or a Device disappears, ListAndWatch</span></span><br><span class="line"><span class="function">    // <span class="keyword">returns</span> the new list</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> ListAndWatch(Empty) <span class="keyword">returns</span> (stream ListAndWatchResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // Allocate is called during container creation so that the Device</span></span><br><span class="line"><span class="function">    // Plugin can run device specific operations and instruct Kubelet</span></span><br><span class="line"><span class="function">    // of the steps to make the Device available in the container</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> Allocate(AllocateRequest) <span class="keyword">returns</span> (AllocateResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // GetPreferredAllocation <span class="keyword">returns</span> a preferred set of devices to allocate</span></span><br><span class="line"><span class="function">    // from a list of available ones. The resulting preferred allocation is not</span></span><br><span class="line"><span class="function">    // guaranteed to be the allocation ultimately performed by the</span></span><br><span class="line"><span class="function">    // devicemanager. It is only designed to help the devicemanager make a more</span></span><br><span class="line"><span class="function">    // informed allocation decision when possible.</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> GetPreferredAllocation(PreferredAllocationRequest) <span class="keyword">returns</span> (PreferredAllocationResponse) &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // PreStartContainer is called, if indicated by Device Plugin during registeration phase,</span></span><br><span class="line"><span class="function">    // before each container start. Device plugin can run device specific operations</span></span><br><span class="line"><span class="function">    // such as resetting the device before making devices available to the container.</span></span><br><span class="line"><span class="function">    <span class="keyword">rpc</span> PreStartContainer(PreStartContainerRequest) <span class="keyword">returns</span> (PreStartContainerResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>通过 Unix socket 在主机路径 /var/lib/kubelet/device-plugins/kubelet.sock 处向 kubelet 注册自身。</p></li><li><p>成功注册自身后，Device Plugin 将以服务模式运行，之后，它将持续监控设备运行状况，并在设备状态发生任何变化时报告 kubelet。它还负责响应 Allocate gRPC 请求。 在 Allocate 期间，Device Plugin 可能还会做一些设备特定的准备；例如清理 GPU 或初始化 QRNG。如果操作成功，则 Device Plugin 将返回 AllocateResponse，其中包含用于访问被分配的设备容器运行时的配置。 kubelet 将此信息传递到容器运行时。</p></li></ul><h3 id="处理-kubelet-重启"><a href="#处理-kubelet-重启" class="headerlink" title="处理 kubelet 重启"></a>处理 kubelet 重启</h3><p>Device Plugin 应能监测到 kubelet 重启，并且向新的 kubelet 实例来重新注册自己。在当前实现中，当 kubelet 重启的时候，新的 kubelet 实例会删除 /var/lib/kubelet/device-plugins 下所有已经存在的 Unix sockets。 Device Plugin 需要能够监控到它的 Unix socket 被删除，并且当发生此类事件时重新注册自己。</p><h2 id="部署-Device-Plugin"><a href="#部署-Device-Plugin" class="headerlink" title="部署 Device Plugin"></a>部署 Device Plugin</h2><p>用户可以将 Device Plugin 作为节点操作系统的软件包来部署、作为 DaemonSet 来部署或者手动部署。</p><p>规范目录 /var/lib/kubelet/device-plugins 是需要特权访问的，所以 Device Plugin 必须要在被授权的安全的上下文中运行。如果将 Device Plugin 部署为 DaemonSet，/var/lib/kubelet/device-plugins 目录必须要在 DevicePlugin 的 PodSpec 中声明作为 Volume 被 mount 到 Device Plugin 中。</p><p>若选择 DaemonSet 方法，用户可以通过 Kubernetes 进行以下操作: 将 Device Plugin 的 Pod 放置在节点上，在出现故障后重新启动守护进程 Pod，来进行自动升级。</p><h2 id="API-兼容性"><a href="#API-兼容性" class="headerlink" title="API 兼容性"></a>API 兼容性</h2><p>Kubernetes Device Plugin 还处于 beta 版本。所以在稳定版本出来之前 API 会以不兼容的方式进行更改。作为一个项目，Kubernetes 建议 Device Plugin 开发者:</p><ul><li>注意未来版本的更改</li><li>支持多个版本的 Device Plugin API，以实现向后/向前兼容性。</li></ul><p>如果你启用 DevicePlugins 功能，并在需要升级到 Kubernetes 版本来获得较新的 Device Plugin API 版本的节点上运行 Device Plugin，请在升级这些节点之前先升级 Device Plugin 以支持这两个版本。 采用该方法将确保升级期间设备分配的连续运行。</p><h2 id="监控-Device-Plugin"><a href="#监控-Device-Plugin" class="headerlink" title="监控 Device Plugin"></a>监控 Device Plugin</h2><p>为了监控 Device Plugin 提供的资源，监控代理程序需要能够发现节点上正在使用的设备，并获取元数据来描述哪个指标与容器相关联。 设备监控代理暴露给 <a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a> 的指标应该遵循 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/instrumentation.md" target="_blank" rel="noopener">Kubernetes Instrumentation Guidelines</a>，使用 pod、namespace 和 container 标签来标识容器。</p><p>kubelet 提供了 gRPC 服务来使得正在使用中的设备被发现，并且还未这些设备提供了元数据:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PodResourcesLister is a service provided by the kubelet that provides information about the</span></span><br><span class="line"><span class="comment">// node resources consumed by pods and containers on the node</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">PodResourcesLister</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> List(ListPodResourcesRequest) <span class="keyword">returns</span> (ListPodResourcesResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>gRPC 服务通过 /var/lib/kubelet/pod-resources/kubelet.sock 的 UNIX 套接字来提供服务。 Device Plugin资源的监控代理程序可以部署为守护进程或者 DaemonSet。 规范的路径 /var/lib/kubelet/pod-resources 需要特权来进入， 所以监控代理程序必须要在获得授权的安全的上下文中运行。 如果设备监控代理以 DaemonSet 形式运行，必须要在插件的 PodSpec 中声明将 /var/lib/kubelet/pod-resources 目录以 卷的形式被挂载到容器中。</p><p>对“PodResources 服务”的支持要求启用 KubeletPodResources 特性门控。 从 Kubernetes 1.15 开始默认启用。</p><h2 id="Device-Plugin-集成-The-Topology-Manager"><a href="#Device-Plugin-集成-The-Topology-Manager" class="headerlink" title="Device Plugin 集成 The Topology Manager"></a>Device Plugin 集成 The Topology Manager</h2><p>The Topology Manager 是 Kubelet 的一个组件，它允许以拓扑对齐方式来调度资源。 为了做到这一点，Device Plugin API 进行了扩展来包括一个 TopologyInfo 结构体。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">TopologyInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">repeated</span> NUMANode nodes = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">NUMANode</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int64</span> ID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Device Plugin 希望 The Topology Manager 可以将填充的 TopologyInfo 结构体作为设备注册的一部分以及设备 ID 和设备的运行状况发送回去。然后 The Topology Manager 将使用此信息来咨询拓扑管理器并做出资源分配决策。</p><p>TopologyInfo 支持定义 nodes 字段，允许为 nil（默认）或者是一个 NUMA 节点的列表。 这样就可以使Device Plugin可以跨越 NUMA 节点去发布。</p><p>下面是一个由 Device Plugin 为设备填充 TopologyInfo 结构体的示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pluginapi.Device&#123;ID: &quot;25102017&quot;, Health: pluginapi.Healthy, Topology:&amp;pluginapi.TopologyInfo&#123;Nodes: []*pluginapi.NUMANode&#123;&amp;pluginapi.NUMANode&#123;ID: 0,&#125;,&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/" target="_blank" rel="noopener">Kubernetes Device Plugin</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubernetes 提供 &lt;a href=&quot;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/device-plugi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nvidia Docker</title>
    <link href="http://divinerapier.github.io/2020/11/14/nvidia-docker/"/>
    <id>http://divinerapier.github.io/2020/11/14/nvidia-docker/</id>
    <published>2020-11-14T10:21:01.000Z</published>
    <updated>2020-12-08T05:23:13.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nvidia-docker/nvidia-container-toolkit.png" alt="nvidia-container-toolkit.png"></p><p>Nvidia Container Toolkit 包含容器运行时库和一些工具，用于自动配置容器使用 GPU 资源。并且，支持多种不同的容器引擎，如 Docker、LXC、Podman 等。用户根据需要可以自行选择使用哪种引擎。</p><h2 id="The-Architecture-Overview-of-Nvidia-Container-Toolkit"><a href="#The-Architecture-Overview-of-Nvidia-Container-Toolkit" class="headerlink" title="The Architecture Overview of Nvidia Container Toolkit"></a>The Architecture Overview of Nvidia Container Toolkit</h2><p>Nvidia Container Toolkit 的架构允许其支持任何容器运行时。若以 Docker 为例，其由以下组件，以从上到下的层次结构组成:</p><ul><li>nvidia-docker2</li><li>nvidia-container-runtime</li><li>nvidia-container-toolkit</li><li>libnvidia-container</li></ul><p>下图为各个组件的关系:</p><p><img src="/images/nvidia-docker/nvidia-docker-arch.png" alt="nvidia-docker-arch.png"></p><h3 id="Components-and-Packages"><a href="#Components-and-Packages" class="headerlink" title="Components and Packages"></a>Components and Packages</h3><h4 id="libnvidia-container"><a href="#libnvidia-container" class="headerlink" title="libnvidia-container"></a>libnvidia-container</h4><p>提供库与 CLI 程序，实现自动化配置 GNU/Linux 容器使用 NVIDIA GPU 资源，其实现依赖于内核基础功能，且在设计上与容器运行时解耦。</p><p>libnvidia-container 提供了一个定义良好的 API 和一个封装好的 CLI 程序(nvidia-container-cli)，任何容器运行时都可以调用它来支持 NVIDIA GPU。</p><h4 id="nvidia-container-toolkit"><a href="#nvidia-container-toolkit" class="headerlink" title="nvidia-container-toolkit"></a>nvidia-container-toolkit</h4><p>实现了 runC prestart hook 需要的接口的脚本。该脚本在容器被创建之后，启动之前被 runC 调用，且被赋予访问与容器相关联的 config.json 的权限。脚本根据 config.json 中的信息作为合适的命令行参数 (an appropriate set of flags) 来调用 libnvidia-container CLI。其中，“指定哪些 GPU 设备在容器中使用” 是最重要的参数。</p><p>该组件之前的名字是 nvidia-container-runtime-hook，现在系统上的 nvidia-container-runtime-hook 是 nvidia-container-toolkit 的符号链接。</p><h4 id="nvidia-container-runtime"><a href="#nvidia-container-runtime" class="headerlink" title="nvidia-container-runtime"></a>nvidia-container-runtime</h4><p>曾经，nvidia-container-runtime 以 runC 作为基础，添加了 NVIDIA 特定的代码。2019 年，更改为对宿主机上原生 runC 做简单的封装。nvidia-container-runtime 将 runC spec 作为输入，将 nvidia-container-toolkit 脚本作为 prestart hook 注入到 runC spec 中。然后，将修改后的带有该 hook set 的 runC spec 传递给原生 runC 并调用 runC。需要注意的是，该组件不一定是针对 docker 的(但它是针对runC的)。</p><p>当该 package 完成安装后，Docker 的 daemon.json 文件会被更新为指向这个二进制文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"default-runtime"</span>: <span class="string">"nvidia"</span>,</span><br><span class="line">  <span class="string">"runtimes"</span>: &#123;</span><br><span class="line">    <span class="string">"nvidia"</span>: &#123;</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"/usr/bin/nvidia-container-runtime"</span>,</span><br><span class="line">        <span class="string">"runtimeArgs"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nvidia-docker2"><a href="#nvidia-docker2" class="headerlink" title="nvidia-docker2"></a>nvidia-docker2</h4><p>这个 package 是架构中唯一的 docker 专用包。它采用与 nvidia-container-runtime 相关的脚本，并将其安装到 docker 的 /etc/docker/daemon.json 文件中。这样，使用者就可以运行 <strong>docker run –runtime=nvidia …</strong> 来自动为容器添加对 GPU 的支持。这个 package 还安装了一个封装了原生 docker CLI 的脚本，名为 nvidia-docker，避免每次都指定 –runtime=nvidia 来调用 docker。它还允许用户在宿主机上设置环境变量 NV_GPU 来指定将哪些 GPU 注入到容器中。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Pre-Requisites"><a href="#Pre-Requisites" class="headerlink" title="Pre-Requisites"></a>Pre-Requisites</h3><ul><li><a href="https://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener">NVIDIA Drivers</a></li><li>Platform Requirements:<ol><li>GNU/Linux x86_64 with kernel version &gt; 3.10</li><li>Docker &gt;= 19.03 (recommended, but some distributions may include older versions of Docker. The minimum supported version is 1.12)</li><li>NVIDIA GPU with Architecture &gt; Fermi (or compute capability 2.1)</li><li>NVIDIA drivers ~= 361.93 (untested on older versions)</li></ol></li><li>Docker CE</li></ul><h3 id="Setting-up-NVIDIA-Container-Toolkit"><a href="#Setting-up-NVIDIA-Container-Toolkit" class="headerlink" title="Setting up NVIDIA Container Toolkit"></a>Setting up NVIDIA Container Toolkit</h3><p>安装软件源与 GPG key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>) \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure><p>安装 nvidia-docker2 并重启 Docker Daemon:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update \</span><br><span class="line">   &amp;&amp; sudo apt-get install -y nvidia-docker2 \</span><br><span class="line">   &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>启动容器测试，如果得到类似如下的输出则安装成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                               |                      |               MIG M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |</span><br><span class="line">| N/A   34C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/index.html" target="_blank" rel="noopener">NVIDIA Cloud Native Technologies</a></li><li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html" target="_blank" rel="noopener">Container Toolkit Installation Guide</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/nvidia-docker/nvidia-container-toolkit.png&quot; alt=&quot;nvidia-container-toolkit.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nvidia Container Toolkit 包含容器运行时</summary>
      
    
    
    
    
    <category term="gpu" scheme="http://divinerapier.github.io/tags/gpu/"/>
    
    <category term="docker" scheme="http://divinerapier.github.io/tags/docker/"/>
    
    <category term="nvidia" scheme="http://divinerapier.github.io/tags/nvidia/"/>
    
  </entry>
  
</feed>
